package b.c.a.a;

import c.a.a.a.G;
import c.a.a.a.b.l;
import c.a.a.a.e;
import c.a.a.a.q;
import c.a.a.a.t;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;

public abstract class g
  extends f
{
  private String[] i = { "application/octet-stream", "image/jpeg", "image/png", "image/gif" };
  
  public g(String[] paramArrayOfString)
  {
    if (paramArrayOfString != null)
    {
      i = paramArrayOfString;
      return;
    }
    d.a.b("BinaryHttpRH", "Constructor passed allowedContentTypes was null !");
  }
  
  public final void a(t paramT)
  {
    Object localObject1 = paramT.getStatusLine();
    Object localObject2 = paramT.getHeaders("Content-Type");
    if (localObject2.length != 1)
    {
      a(((G)localObject1).getStatusCode(), paramT.getAllHeaders(), null, new l(((G)localObject1).getStatusCode(), "None, or more than one, Content-Type Header found!"));
      return;
    }
    int j = 0;
    localObject2 = localObject2[0];
    String[] arrayOfString = j();
    int m = arrayOfString.length;
    int k = 0;
    while (j < m)
    {
      String str = arrayOfString[j];
      try
      {
        boolean bool = Pattern.matches(str, ((e)localObject2).getValue());
        if (bool) {
          k = 1;
        }
      }
      catch (PatternSyntaxException localPatternSyntaxException)
      {
        k localK = d.a;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Given pattern is not valid: ");
        localStringBuilder.append(str);
        localK.b("BinaryHttpRH", localStringBuilder.toString(), localPatternSyntaxException);
      }
      j += 1;
    }
    if (k == 0)
    {
      j = ((G)localObject1).getStatusCode();
      paramT = paramT.getAllHeaders();
      k = ((G)localObject1).getStatusCode();
      localObject1 = new StringBuilder();
      ((StringBuilder)localObject1).append("Content-Type (");
      ((StringBuilder)localObject1).append(((e)localObject2).getValue());
      ((StringBuilder)localObject1).append(") not allowed!");
      a(j, paramT, null, new l(k, ((StringBuilder)localObject1).toString()));
      return;
    }
    super.a(paramT);
  }
  
  public String[] j()
  {
    return i;
  }
}
