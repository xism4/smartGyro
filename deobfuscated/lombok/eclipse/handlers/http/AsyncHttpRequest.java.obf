package b.c.a.a;

import c.a.a.a.b.c.l;
import c.a.a.a.i.b.a;
import c.a.a.a.i.b.h;
import c.a.a.a.t;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.UnknownHostException;
import java.util.concurrent.atomic.AtomicBoolean;

public class e
  implements Runnable
{
  private final a a;
  private final c.a.a.a.n.e b;
  private final l c;
  private final s d;
  private final AtomicBoolean e = new AtomicBoolean();
  private int f;
  private boolean g;
  private volatile boolean h;
  private boolean i;
  
  public e(a paramA, c.a.a.a.n.e paramE, l paramL, s paramS)
  {
    u.a(paramA, "client");
    a = ((a)paramA);
    u.a(paramE, "context");
    b = ((c.a.a.a.n.e)paramE);
    u.a(paramL, "request");
    c = ((l)paramL);
    u.a(paramS, "responseHandler");
    d = ((s)paramS);
  }
  
  private void c()
  {
    if (a()) {
      return;
    }
    if (c.getURI().getScheme() != null)
    {
      Object localObject = d;
      if ((localObject instanceof o)) {
        ((o)localObject).a(c);
      }
      localObject = a.a(c, b);
      if (a()) {
        return;
      }
      s localS = d;
      localS.b(localS, (t)localObject);
      if (a()) {
        return;
      }
      d.a((t)localObject);
      if (a()) {
        return;
      }
      localS = d;
      localS.a(localS, (t)localObject);
      return;
    }
    throw new MalformedURLException("No valid URI scheme was provided");
  }
  
  private void d()
  {
    c.a.a.a.b.k localK = a.A();
    StringBuilder localStringBuilder = null;
    int k = 1;
    boolean bool;
    Object localObject1;
    if (k != 0)
    {
      try
      {
        c();
        return;
      }
      catch (Exception localException)
      {
        break label259;
      }
      catch (IOException localIOException)
      {
        if (a()) {
          return;
        }
        j = f + 1;
        f = j;
        bool = localK.a(localIOException, j, b);
      }
      catch (NullPointerException localNullPointerException)
      {
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("NPE in HttpClient: ");
        localStringBuilder.append(localNullPointerException.getMessage());
        localObject1 = new IOException(localStringBuilder.toString());
        j = f + 1;
        f = j;
        bool = localK.a((IOException)localObject1, j, b);
      }
      catch (UnknownHostException localUnknownHostException)
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append("UnknownHostException exception: ");
        ((StringBuilder)localObject1).append(localUnknownHostException.getMessage());
        localObject1 = new IOException(((StringBuilder)localObject1).toString());
        if (f <= 0) {
          break label324;
        }
      }
      int j = f + 1;
      f = j;
      if (!localK.a(localUnknownHostException, j, b)) {
        break label324;
      }
      bool = true;
    }
    for (;;)
    {
      k = bool;
      Object localObject2 = localObject1;
      if (!bool) {
        break;
      }
      d.a(f);
      k = bool;
      localObject2 = localObject1;
      break;
      label259:
      d.a.b("AsyncHttpRequest", "Unhandled exception origin cause", (Throwable)localObject1);
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Unhandled exception: ");
      ((StringBuilder)localObject2).append(((Exception)localObject1).getMessage());
      localObject2 = new IOException(((StringBuilder)localObject2).toString());
      for (;;)
      {
        throw ((Throwable)localObject2);
      }
      label324:
      bool = false;
    }
  }
  
  private void e()
  {
    try
    {
      if ((!h) && (e.get()) && (!g))
      {
        g = true;
        d.e();
      }
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public void a(e paramE) {}
  
  public boolean a()
  {
    boolean bool = e.get();
    if (bool) {
      e();
    }
    return bool;
  }
  
  public boolean a(boolean paramBoolean)
  {
    e.set(true);
    c.abort();
    return a();
  }
  
  public void b(e paramE) {}
  
  public boolean b()
  {
    return (a()) || (h);
  }
  
  public void run()
  {
    if (a()) {
      return;
    }
    if (!i)
    {
      i = true;
      b(this);
    }
    if (a()) {
      return;
    }
    d.c();
    if (a()) {
      return;
    }
    try
    {
      d();
    }
    catch (IOException localIOException)
    {
      if (!a()) {
        d.a(0, null, null, localIOException);
      } else {
        d.a.b("AsyncHttpRequest", "makeRequestWithRetries returned error", localIOException);
      }
    }
    if (a()) {
      return;
    }
    d.d();
    if (a()) {
      return;
    }
    a(this);
    h = true;
  }
}
