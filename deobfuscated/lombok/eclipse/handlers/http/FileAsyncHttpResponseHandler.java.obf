package b.c.a.a;

import c.a.a.a.e;
import c.a.a.a.l;
import java.io.File;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.net.URI;

public abstract class h
  extends f
{
  protected final File i;
  protected final boolean j;
  protected final boolean k;
  protected File l;
  
  public h(File paramFile, boolean paramBoolean)
  {
    this(paramFile, paramBoolean, false);
  }
  
  public h(File paramFile, boolean paramBoolean1, boolean paramBoolean2)
  {
    this(paramFile, paramBoolean1, paramBoolean2, false);
  }
  
  public h(File paramFile, boolean paramBoolean1, boolean paramBoolean2, boolean paramBoolean3)
  {
    super(paramBoolean3);
    if (paramFile != null) {
      paramBoolean3 = true;
    } else {
      paramBoolean3 = false;
    }
    u.a(paramBoolean3, "File passed into FileAsyncHttpResponseHandler constructor must not be null");
    if ((!paramFile.isDirectory()) && (!paramFile.getParentFile().isDirectory())) {
      u.a(paramFile.getParentFile().mkdirs(), "Cannot create parent directories for requested File location");
    }
    if ((paramFile.isDirectory()) && (!paramFile.mkdirs())) {
      d.a.d("FileAsyncHttpRH", "Cannot create directories for requested Directory location, might not be a problem");
    }
    i = paramFile;
    j = paramBoolean1;
    k = paramBoolean2;
  }
  
  public abstract void a(int paramInt, e[] paramArrayOfE, File paramFile);
  
  public abstract void a(int paramInt, e[] paramArrayOfE, Throwable paramThrowable, File paramFile);
  
  public final void a(int paramInt, e[] paramArrayOfE, byte[] paramArrayOfByte)
  {
    a(paramInt, paramArrayOfE, k());
  }
  
  protected byte[] a(l paramL)
  {
    if (paramL != null)
    {
      InputStream localInputStream = paramL.getContent();
      long l1 = paramL.getContentLength();
      paramL = new FileOutputStream(k(), j);
      if (localInputStream != null) {
        try
        {
          byte[] arrayOfByte = new byte['?'];
          int m = 0;
          for (;;)
          {
            int n = localInputStream.read(arrayOfByte);
            if ((n == -1) || (Thread.currentThread().isInterrupted())) {
              break;
            }
            m += n;
            paramL.write(arrayOfByte, 0, n);
            b(m, l1);
          }
        }
        finally
        {
          d.a(localInputStream);
          paramL.flush();
          d.a(paramL);
        }
      }
    }
    return null;
  }
  
  public final void b(int paramInt, e[] paramArrayOfE, byte[] paramArrayOfByte, Throwable paramThrowable)
  {
    a(paramInt, paramArrayOfE, paramThrowable, k());
  }
  
  protected File j()
  {
    boolean bool;
    if (i != null) {
      bool = true;
    } else {
      bool = false;
    }
    u.a(bool, "Target file is null, fatal!");
    return i;
  }
  
  public File k()
  {
    if (l == null)
    {
      File localFile;
      if (j().isDirectory()) {
        localFile = l();
      } else {
        localFile = j();
      }
      l = localFile;
    }
    return l;
  }
  
  protected File l()
  {
    u.a(j().isDirectory(), "Target file is not a directory, cannot proceed");
    boolean bool;
    if (f() != null) {
      bool = true;
    } else {
      bool = false;
    }
    u.a(bool, "RequestURI is null, cannot proceed");
    Object localObject1 = f().toString();
    Object localObject2 = ((String)localObject1).substring(((String)localObject1).lastIndexOf('/') + 1, ((String)localObject1).length());
    localObject1 = new File(j(), (String)localObject2);
    if ((((File)localObject1).exists()) && (k))
    {
      if (!((String)localObject2).contains("."))
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append((String)localObject2);
        ((StringBuilder)localObject1).append(" (%d)");
      }
      else
      {
        localObject1 = new StringBuilder();
        ((StringBuilder)localObject1).append(((String)localObject2).substring(0, ((String)localObject2).lastIndexOf('.')));
        ((StringBuilder)localObject1).append(" (%d)");
        ((StringBuilder)localObject1).append(((String)localObject2).substring(((String)localObject2).lastIndexOf('.'), ((String)localObject2).length()));
      }
      localObject1 = ((StringBuilder)localObject1).toString();
      int m = 0;
      for (;;)
      {
        localObject2 = new File(j(), String.format((String)localObject1, new Object[] { Integer.valueOf(m) }));
        if (!((File)localObject2).exists()) {
          return localObject2;
        }
        m += 1;
      }
    }
    return localObject1;
  }
}
