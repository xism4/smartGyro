package b.c.a.a;

import c.a.a.a.C;
import c.a.a.a.F;
import c.a.a.a.G;
import c.a.a.a.i.b.m;
import c.a.a.a.i.b.u;
import c.a.a.a.l.g;
import c.a.a.a.o;
import c.a.a.a.q;
import c.a.a.a.r;
import c.a.a.a.t;
import java.net.URI;
import java.net.URISyntaxException;

class l
  extends m
{
  private final boolean b;
  
  public l(boolean paramBoolean)
  {
    b = paramBoolean;
  }
  
  public URI a(t paramT, c.a.a.a.n.e paramE)
  {
    if (paramT != null)
    {
      Object localObject1 = paramT.getFirstHeader("location");
      if (localObject1 != null)
      {
        Object localObject2 = ((c.a.a.a.e)localObject1).getValue().replaceAll(" ", "%20");
        try
        {
          localObject1 = new URI((String)localObject2);
          localObject2 = paramT.getParams();
          paramT = (t)localObject1;
          if (!((URI)localObject1).isAbsolute()) {
            if (!((g)localObject2).isParameterTrue("http.protocol.reject-relative-redirect"))
            {
              paramT = (o)paramE.getAttribute("http.target_host");
              if (paramT != null)
              {
                r localR = (r)paramE.getAttribute("http.request");
                try
                {
                  paramT = c.a.a.a.b.f.e.a(c.a.a.a.b.f.e.a(new URI(localR.getRequestLine().getUri()), paramT, true), (URI)localObject1);
                }
                catch (URISyntaxException paramT)
                {
                  throw new C(paramT.getMessage(), paramT);
                }
              }
              else
              {
                throw new IllegalStateException("Target host not available in the HTTP context");
              }
            }
            else
            {
              paramT = new StringBuilder();
              paramT.append("Relative redirect location '");
              paramT.append(localObject1);
              paramT.append("' not allowed");
              throw new C(paramT.toString());
            }
          }
          if (((g)localObject2).isParameterFalse("http.protocol.allow-circular-redirects"))
          {
            localObject2 = (u)paramE.getAttribute("http.protocol.redirect-locations");
            localObject1 = localObject2;
            if (localObject2 == null)
            {
              localObject1 = new u();
              paramE.setAttribute("http.protocol.redirect-locations", localObject1);
            }
            if (paramT.getFragment() != null) {
              try
              {
                paramE = c.a.a.a.b.f.e.a(paramT, new o(paramT.getHost(), paramT.getPort(), paramT.getScheme()), true);
              }
              catch (URISyntaxException paramT)
              {
                throw new C(paramT.getMessage(), paramT);
              }
            } else {
              paramE = paramT;
            }
            if (!((u)localObject1).b(paramE))
            {
              ((u)localObject1).a(paramE);
              return paramT;
            }
            paramT = new StringBuilder();
            paramT.append("Circular redirect to '");
            paramT.append(paramE);
            paramT.append("'");
            throw new c.a.a.a.b.e(paramT.toString());
          }
          return paramT;
        }
        catch (URISyntaxException paramT)
        {
          paramE = new StringBuilder();
          paramE.append("Invalid redirect URI: ");
          paramE.append((String)localObject2);
          throw new C(paramE.toString(), paramT);
        }
      }
      paramE = new StringBuilder();
      paramE.append("Received redirect response ");
      paramE.append(paramT.getStatusLine());
      paramE.append(" but no location header");
      throw new C(paramE.toString());
    }
    throw new IllegalArgumentException("HTTP response may not be null");
  }
  
  public boolean b(t paramT, c.a.a.a.n.e paramE)
  {
    if (!b) {
      return false;
    }
    if (paramT != null)
    {
      int i = paramT.getStatusLine().getStatusCode();
      if (i != 307) {
        switch (i)
        {
        default: 
          return false;
        }
      }
      return true;
    }
    throw new IllegalArgumentException("HTTP response may not be null");
  }
}
