package b.a.a.a.a;

import android.content.res.AssetFileDescriptor;
import android.os.ParcelFileDescriptor;
import android.util.Log;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.util.HashMap;
import java.util.zip.ZipFile;

public class b
{
  private HashMap<String, a> a = new HashMap();
  public HashMap<File, ZipFile> b = new HashMap();
  ByteBuffer c = ByteBuffer.allocate(4);
  
  public b(String paramString)
  {
    a(paramString);
  }
  
  private static int a(int paramInt)
  {
    return ((paramInt & 0xFF) << 24) + ((0xFF00 & paramInt) << 8) + ((0xFF0000 & paramInt) >>> 8) + (paramInt >>> 24 & 0xFF);
  }
  
  private static int a(RandomAccessFile paramRandomAccessFile)
  {
    return a(paramRandomAccessFile.readInt());
  }
  
  void a(String paramString)
  {
    Object localObject1 = paramString;
    File localFile = new File((String)localObject1);
    RandomAccessFile localRandomAccessFile = new RandomAccessFile(localFile, "r");
    long l2 = localRandomAccessFile.length();
    if (l2 >= 22L)
    {
      long l1 = 65557L;
      if (65557L > l2) {
        l1 = l2;
      }
      localRandomAccessFile.seek(0L);
      int i = a(localRandomAccessFile);
      if (i != 101010256)
      {
        if (i == 67324752)
        {
          localRandomAccessFile.seek(l2 - l1);
          Object localObject2 = ByteBuffer.allocate((int)l1);
          Object localObject3 = ((ByteBuffer)localObject2).array();
          localRandomAccessFile.readFully((byte[])localObject3);
          ((ByteBuffer)localObject2).order(ByteOrder.LITTLE_ENDIAN);
          i = localObject3.length - 22;
          while ((i >= 0) && ((localObject3[i] != 80) || (((ByteBuffer)localObject2).getInt(i) != 101010256))) {
            i -= 1;
          }
          if (i < 0)
          {
            localObject3 = new StringBuilder();
            ((StringBuilder)localObject3).append("Zip: EOCD not found, ");
            ((StringBuilder)localObject3).append((String)localObject1);
            ((StringBuilder)localObject3).append(" is not zip");
            Log.d("zipro", ((StringBuilder)localObject3).toString());
          }
          int k = ((ByteBuffer)localObject2).getShort(i + 8);
          l1 = ((ByteBuffer)localObject2).getInt(i + 12) & 0xFFFFFFFF;
          long l3 = ((ByteBuffer)localObject2).getInt(i + 16) & 0xFFFFFFFF;
          if (l3 + l1 <= l2)
          {
            if (k != 0)
            {
              localObject1 = localRandomAccessFile.getChannel().map(FileChannel.MapMode.READ_ONLY, l3, l1);
              ((MappedByteBuffer)localObject1).order(ByteOrder.LITTLE_ENDIAN);
              localObject2 = new byte[65535];
              localObject3 = ByteBuffer.allocate(30);
              ((ByteBuffer)localObject3).order(ByteOrder.LITTLE_ENDIAN);
              i = 0;
              int j = 0;
              while (i < k) {
                if (((MappedByteBuffer)localObject1).getInt(j) == 33639248)
                {
                  int m = ((MappedByteBuffer)localObject1).getShort(j + 28) & 0xFFFF;
                  int n = ((MappedByteBuffer)localObject1).getShort(j + 30);
                  int i1 = ((MappedByteBuffer)localObject1).getShort(j + 32);
                  ((MappedByteBuffer)localObject1).position(j + 46);
                  ((MappedByteBuffer)localObject1).get((byte[])localObject2, 0, m);
                  ((MappedByteBuffer)localObject1).position(0);
                  String str = new String((byte[])localObject2, 0, m);
                  a localA = new a(paramString, localFile, str);
                  e = (((MappedByteBuffer)localObject1).getShort(j + 10) & 0xFFFF);
                  f = (((MappedByteBuffer)localObject1).getInt(j + 12) & 0xFFFFFFFF);
                  g = (((MappedByteBuffer)localObject1).getLong(j + 16) & 0xFFFFFFFF);
                  h = (((MappedByteBuffer)localObject1).getLong(j + 20) & 0xFFFFFFFF);
                  i = (((MappedByteBuffer)localObject1).getLong(j + 24) & 0xFFFFFFFF);
                  d = (((MappedByteBuffer)localObject1).getInt(j + 42) & 0xFFFFFFFF);
                  ((ByteBuffer)localObject3).clear();
                  localA.a(localRandomAccessFile, (ByteBuffer)localObject3);
                  a.put(str, localA);
                  j += m + 46 + (n & 0xFFFF) + (i1 & 0xFFFF);
                  i += 1;
                }
                else
                {
                  paramString = new StringBuilder();
                  paramString.append("Missed a central dir sig (at ");
                  paramString.append(j);
                  paramString.append(")");
                  Log.w("zipro", paramString.toString());
                  throw new IOException();
                }
              }
              return;
            }
            Log.w("zipro", "empty archive?");
            throw new IOException();
          }
          paramString = new StringBuilder();
          paramString.append("bad offsets (dir ");
          paramString.append(l3);
          paramString.append(", size ");
          paramString.append(l1);
          paramString.append(", eocd ");
          paramString.append(i);
          paramString.append(")");
          Log.w("zipro", paramString.toString());
          throw new IOException();
        }
        Log.v("zipro", "Not a Zip archive");
        throw new IOException();
      }
      Log.i("zipro", "Found Zip archive, but it looks empty");
      throw new IOException();
    }
    paramString = new IOException();
    for (;;)
    {
      throw paramString;
    }
  }
  
  public AssetFileDescriptor b(String paramString)
  {
    paramString = (a)a.get(paramString);
    if (paramString != null) {
      return paramString.a();
    }
    return null;
  }
  
  public static final class a
  {
    public final File a;
    public final String b;
    public final String c;
    public long d;
    public int e;
    public long f;
    public long g;
    public long h;
    public long i;
    public long j = -1L;
    
    public a(String paramString1, File paramFile, String paramString2)
    {
      b = paramString2;
      c = paramString1;
      a = paramFile;
    }
    
    public AssetFileDescriptor a()
    {
      if (e == 0) {
        try
        {
          AssetFileDescriptor localAssetFileDescriptor = new AssetFileDescriptor(ParcelFileDescriptor.open(a, 268435456), b(), i);
          return localAssetFileDescriptor;
        }
        catch (FileNotFoundException localFileNotFoundException)
        {
          localFileNotFoundException.printStackTrace();
        }
      }
      return null;
    }
    
    public void a(RandomAccessFile paramRandomAccessFile, ByteBuffer paramByteBuffer)
    {
      long l = d;
      try
      {
        paramRandomAccessFile.seek(l);
        paramRandomAccessFile.readFully(paramByteBuffer.array());
        if (paramByteBuffer.getInt(0) == 67324752)
        {
          int k = paramByteBuffer.getShort(26);
          int m = paramByteBuffer.getShort(28);
          j = (l + 30L + (k & 0xFFFF) + (m & 0xFFFF));
          return;
        }
        Log.w("zipro", "didn't find signature at start of lfh");
        throw new IOException();
      }
      catch (IOException paramRandomAccessFile)
      {
        paramRandomAccessFile.printStackTrace();
        return;
      }
      catch (FileNotFoundException paramRandomAccessFile)
      {
        paramRandomAccessFile.printStackTrace();
      }
    }
    
    public long b()
    {
      return j;
    }
  }
}
