package android.support.v4.widget;

import a.a.c.e.a;
import a.a.c.e.a.a;
import a.a.c.e.a.a.a;
import a.a.c.f.h;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.graphics.Paint.FontMetricsInt;
import android.os.Build.VERSION;
import android.text.Editable;
import android.text.TextDirectionHeuristic;
import android.text.TextDirectionHeuristics;
import android.text.TextPaint;
import android.text.method.PasswordTransformationMethod;
import android.view.ActionMode;
import android.view.ActionMode.Callback;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.TextView;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

public final class m
{
  private static int a(TextDirectionHeuristic paramTextDirectionHeuristic)
  {
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_RTL) {
      return 1;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_LTR) {
      return 1;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.ANYRTL_LTR) {
      return 2;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.LTR) {
      return 3;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.RTL) {
      return 4;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.LOCALE) {
      return 5;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_LTR) {
      return 6;
    }
    if (paramTextDirectionHeuristic == TextDirectionHeuristics.FIRSTSTRONG_RTL) {
      return 7;
    }
    return 1;
  }
  
  public static int a(TextView paramTextView)
  {
    return paramTextView.getPaddingTop() - getPaintgetFontMetricsInttop;
  }
  
  public static ActionMode.Callback a(TextView paramTextView, ActionMode.Callback paramCallback)
  {
    int i = Build.VERSION.SDK_INT;
    if ((i >= 26) && (i <= 27))
    {
      if ((paramCallback instanceof a)) {
        return paramCallback;
      }
      return new a(paramCallback, paramTextView);
    }
    return paramCallback;
  }
  
  public static void a(TextView paramTextView, int paramInt)
  {
    h.a(paramInt);
    if (Build.VERSION.SDK_INT >= 28)
    {
      paramTextView.setFirstBaselineToTopHeight(paramInt);
      return;
    }
    Paint.FontMetricsInt localFontMetricsInt = paramTextView.getPaint().getFontMetricsInt();
    int i;
    if ((Build.VERSION.SDK_INT >= 16) && (!paramTextView.getIncludeFontPadding())) {
      i = ascent;
    } else {
      i = top;
    }
    if (paramInt > Math.abs(i))
    {
      i = -i;
      paramTextView.setPadding(paramTextView.getPaddingLeft(), paramInt - i, paramTextView.getPaddingRight(), paramTextView.getPaddingBottom());
    }
  }
  
  public static void a(TextView paramTextView, a.a paramA)
  {
    if (Build.VERSION.SDK_INT >= 18) {
      paramTextView.setTextDirection(a(paramA.c()));
    }
    if (Build.VERSION.SDK_INT < 23)
    {
      float f = paramA.d().getTextScaleX();
      paramTextView.getPaint().set(paramA.d());
      if (f == paramTextView.getTextScaleX()) {
        paramTextView.setTextScaleX(f / 2.0F + 1.0F);
      }
      paramTextView.setTextScaleX(f);
      return;
    }
    paramTextView.getPaint().set(paramA.d());
    paramTextView.setBreakStrategy(paramA.a());
    paramTextView.setHyphenationFrequency(paramA.b());
  }
  
  public static void a(TextView paramTextView, a paramA)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      paramA = paramA.b();
    }
    while (c(paramTextView).equals(paramA.a()))
    {
      paramTextView.setText(paramA);
      return;
    }
    paramTextView = new IllegalArgumentException("Given text can not be applied to TextView.");
    for (;;)
    {
      throw paramTextView;
    }
  }
  
  public static int b(TextView paramTextView)
  {
    return paramTextView.getPaddingBottom() + getPaintgetFontMetricsIntbottom;
  }
  
  public static void b(TextView paramTextView, int paramInt)
  {
    h.a(paramInt);
    Paint.FontMetricsInt localFontMetricsInt = paramTextView.getPaint().getFontMetricsInt();
    int i;
    if ((Build.VERSION.SDK_INT >= 16) && (!paramTextView.getIncludeFontPadding())) {
      i = descent;
    } else {
      i = bottom;
    }
    if (paramInt > Math.abs(i)) {
      paramTextView.setPadding(paramTextView.getPaddingLeft(), paramTextView.getPaddingTop(), paramTextView.getPaddingRight(), paramInt - i);
    }
  }
  
  public static a.a c(TextView paramTextView)
  {
    if (Build.VERSION.SDK_INT >= 28) {
      return new a.a(paramTextView.getTextMetricsParams());
    }
    a.a.a localA = new a.a.a(new TextPaint(paramTextView.getPaint()));
    if (Build.VERSION.SDK_INT >= 23)
    {
      localA.a(paramTextView.getBreakStrategy());
      localA.b(paramTextView.getHyphenationFrequency());
    }
    if (Build.VERSION.SDK_INT >= 18) {
      localA.a(d(paramTextView));
    }
    return localA.a();
  }
  
  public static void c(TextView paramTextView, int paramInt)
  {
    h.a(paramInt);
    int i = paramTextView.getPaint().getFontMetricsInt(null);
    if (paramInt != i) {
      paramTextView.setLineSpacing(paramInt - i, 1.0F);
    }
  }
  
  private static TextDirectionHeuristic d(TextView paramTextView)
  {
    if ((paramTextView.getTransformationMethod() instanceof PasswordTransformationMethod)) {
      return TextDirectionHeuristics.LTR;
    }
    int j = Build.VERSION.SDK_INT;
    int i = 0;
    if ((j >= 28) && ((paramTextView.getInputType() & 0xF) == 3))
    {
      i = Character.getDirectionality(android.icu.text.DecimalFormatSymbols.getInstance(paramTextView.getTextLocale()).getDigitStrings()[0].codePointAt(0));
      if ((i != 1) && (i != 2)) {
        return TextDirectionHeuristics.LTR;
      }
      return TextDirectionHeuristics.RTL;
    }
    if (paramTextView.getLayoutDirection() == 1) {
      i = 1;
    }
    switch (paramTextView.getTextDirection())
    {
    default: 
      if (i != 0) {
        return TextDirectionHeuristics.FIRSTSTRONG_RTL;
      }
      break;
    case 7: 
      return TextDirectionHeuristics.FIRSTSTRONG_RTL;
    case 6: 
      return TextDirectionHeuristics.FIRSTSTRONG_LTR;
    case 5: 
      return TextDirectionHeuristics.LOCALE;
    case 4: 
      return TextDirectionHeuristics.RTL;
    case 3: 
      return TextDirectionHeuristics.LTR;
    case 2: 
      return TextDirectionHeuristics.ANYRTL_LTR;
    }
    return TextDirectionHeuristics.FIRSTSTRONG_LTR;
  }
  
  private static class a
    implements ActionMode.Callback
  {
    private final ActionMode.Callback a;
    private final TextView b;
    private Class c;
    private Method d;
    private boolean e;
    private boolean f;
    
    a(ActionMode.Callback paramCallback, TextView paramTextView)
    {
      a = paramCallback;
      b = paramTextView;
      f = false;
    }
    
    private Intent a()
    {
      return new Intent().setAction("android.intent.action.PROCESS_TEXT").setType("text/plain");
    }
    
    private Intent a(ResolveInfo paramResolveInfo, TextView paramTextView)
    {
      return a().putExtra("android.intent.extra.PROCESS_TEXT_READONLY", a(paramTextView) ^ true).setClassName(activityInfo.packageName, activityInfo.name);
    }
    
    private List<ResolveInfo> a(Context paramContext, PackageManager paramPackageManager)
    {
      ArrayList localArrayList = new ArrayList();
      if (!(paramContext instanceof Activity)) {
        return localArrayList;
      }
      paramPackageManager = paramPackageManager.queryIntentActivities(a(), 0).iterator();
      while (paramPackageManager.hasNext())
      {
        ResolveInfo localResolveInfo = (ResolveInfo)paramPackageManager.next();
        if (a(localResolveInfo, paramContext)) {
          localArrayList.add(localResolveInfo);
        }
      }
      return localArrayList;
    }
    
    private void a(Menu paramMenu)
    {
      Object localObject2 = b.getContext();
      PackageManager localPackageManager = ((Context)localObject2).getPackageManager();
      if (!f) {
        f = true;
      }
      try
      {
        c = Class.forName("com.android.internal.view.menu.MenuBuilder");
        d = c.getDeclaredMethod("removeItemAt", new Class[] { Integer.TYPE });
        e = true;
      }
      catch (ClassNotFoundException|NoSuchMethodException localClassNotFoundException)
      {
        for (;;)
        {
          try
          {
            if ((e) && (c.isInstance(paramMenu))) {
              localObject1 = d;
            } else {
              localObject1 = paramMenu.getClass().getDeclaredMethod("removeItemAt", new Class[] { Integer.TYPE });
            }
            int i = paramMenu.size() - 1;
            if (i >= 0)
            {
              MenuItem localMenuItem = paramMenu.getItem(i);
              if ((localMenuItem.getIntent() != null) && ("android.intent.action.PROCESS_TEXT".equals(localMenuItem.getIntent().getAction()))) {
                ((Method)localObject1).invoke(paramMenu, new Object[] { Integer.valueOf(i) });
              }
              i -= 1;
              continue;
            }
            Object localObject1 = a((Context)localObject2, localPackageManager);
            i = 0;
            if (i < ((List)localObject1).size())
            {
              localObject2 = (ResolveInfo)((List)localObject1).get(i);
              paramMenu.add(0, 0, i + 100, ((ResolveInfo)localObject2).loadLabel(localPackageManager)).setIntent(a((ResolveInfo)localObject2, b)).setShowAsAction(1);
              i += 1;
              continue;
            }
            return;
          }
          catch (NoSuchMethodException|IllegalAccessException|InvocationTargetException paramMenu) {}
          localClassNotFoundException = localClassNotFoundException;
        }
      }
      c = null;
      d = null;
      e = false;
    }
    
    private boolean a(ResolveInfo paramResolveInfo, Context paramContext)
    {
      boolean bool2 = paramContext.getPackageName().equals(activityInfo.packageName);
      boolean bool1 = true;
      if (bool2) {
        return true;
      }
      if (!activityInfo.exported) {
        return false;
      }
      paramResolveInfo = activityInfo.permission;
      if (paramResolveInfo != null)
      {
        if (paramContext.checkSelfPermission(paramResolveInfo) == 0) {
          return true;
        }
        bool1 = false;
      }
      return bool1;
    }
    
    private boolean a(TextView paramTextView)
    {
      return ((paramTextView instanceof Editable)) && (paramTextView.onCheckIsTextEditor()) && (paramTextView.isEnabled());
    }
    
    public boolean onActionItemClicked(ActionMode paramActionMode, MenuItem paramMenuItem)
    {
      return a.onActionItemClicked(paramActionMode, paramMenuItem);
    }
    
    public boolean onCreateActionMode(ActionMode paramActionMode, Menu paramMenu)
    {
      return a.onCreateActionMode(paramActionMode, paramMenu);
    }
    
    public void onDestroyActionMode(ActionMode paramActionMode)
    {
      a.onDestroyActionMode(paramActionMode);
    }
    
    public boolean onPrepareActionMode(ActionMode paramActionMode, Menu paramMenu)
    {
      a(paramMenu);
      return a.onPrepareActionMode(paramActionMode, paramMenu);
    }
  }
}
