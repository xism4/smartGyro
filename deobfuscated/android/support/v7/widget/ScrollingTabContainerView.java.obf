package android.support.v7.widget;

import android.content.Context;
import android.content.res.Configuration;
import android.graphics.drawable.Drawable;
import android.support.v7.app.a.c;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.accessibility.AccessibilityEvent;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Interpolator;
import android.widget.AbsListView.LayoutParams;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.BaseAdapter;
import android.widget.HorizontalScrollView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.Spinner;
import android.widget.TextView;

public class aa
  extends HorizontalScrollView
  implements AdapterView.OnItemSelectedListener
{
  private static final Interpolator a = new DecelerateInterpolator();
  Runnable b;
  private b c;
  Q d;
  private Spinner e;
  private boolean f;
  int g;
  int h;
  private int i;
  private int j;
  
  private Spinner a()
  {
    C localC = new C(getContext(), null, a.a.d.a.a.actionDropDownStyle);
    localC.setLayoutParams(new Q.a(-2, -1));
    localC.setOnItemSelectedListener(this);
    return localC;
  }
  
  private boolean b()
  {
    Spinner localSpinner = e;
    return (localSpinner != null) && (localSpinner.getParent() == this);
  }
  
  private void c()
  {
    if (b()) {
      return;
    }
    if (e == null) {
      e = a();
    }
    removeView(d);
    addView(e, new ViewGroup.LayoutParams(-2, -1));
    if (e.getAdapter() == null) {
      e.setAdapter(new a());
    }
    Runnable localRunnable = b;
    if (localRunnable != null)
    {
      removeCallbacks(localRunnable);
      b = null;
    }
    e.setSelection(j);
  }
  
  private boolean d()
  {
    if (!b()) {
      return false;
    }
    removeView(e);
    addView(d, new ViewGroup.LayoutParams(-2, -1));
    setTabSelected(e.getSelectedItemPosition());
    return false;
  }
  
  c a(a.c paramC, boolean paramBoolean)
  {
    paramC = new c(getContext(), paramC, paramBoolean);
    if (paramBoolean)
    {
      paramC.setBackgroundDrawable(null);
      paramC.setLayoutParams(new AbsListView.LayoutParams(-1, i));
      return paramC;
    }
    paramC.setFocusable(true);
    if (c == null) {
      c = new b();
    }
    paramC.setOnClickListener(c);
    return paramC;
  }
  
  public void a(int paramInt)
  {
    View localView = d.getChildAt(paramInt);
    Runnable localRunnable = b;
    if (localRunnable != null) {
      removeCallbacks(localRunnable);
    }
    b = new Z(this, localView);
    post(b);
  }
  
  public void onAttachedToWindow()
  {
    super.onAttachedToWindow();
    Runnable localRunnable = b;
    if (localRunnable != null) {
      post(localRunnable);
    }
  }
  
  protected void onConfigurationChanged(Configuration paramConfiguration)
  {
    super.onConfigurationChanged(paramConfiguration);
    paramConfiguration = a.a.d.d.a.a(getContext());
    setContentHeight(paramConfiguration.e());
    h = paramConfiguration.d();
  }
  
  public void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    Runnable localRunnable = b;
    if (localRunnable != null) {
      removeCallbacks(localRunnable);
    }
  }
  
  public void onItemSelected(AdapterView<?> paramAdapterView, View paramView, int paramInt, long paramLong)
  {
    ((c)paramView).a().e();
  }
  
  public void onMeasure(int paramInt1, int paramInt2)
  {
    paramInt2 = View.MeasureSpec.getMode(paramInt1);
    int k = 1;
    boolean bool;
    if (paramInt2 == 1073741824) {
      bool = true;
    } else {
      bool = false;
    }
    setFillViewport(bool);
    int m = d.getChildCount();
    if ((m > 1) && ((paramInt2 == 1073741824) || (paramInt2 == Integer.MIN_VALUE)))
    {
      if (m > 2) {
        g = ((int)(View.MeasureSpec.getSize(paramInt1) * 0.4F));
      } else {
        g = (View.MeasureSpec.getSize(paramInt1) / 2);
      }
      paramInt2 = Math.min(g, h);
    }
    else
    {
      paramInt2 = -1;
    }
    g = paramInt2;
    m = View.MeasureSpec.makeMeasureSpec(i, 1073741824);
    if ((!bool) && (f)) {
      paramInt2 = k;
    } else {
      paramInt2 = 0;
    }
    if (paramInt2 != 0)
    {
      d.measure(0, m);
      if (d.getMeasuredWidth() > View.MeasureSpec.getSize(paramInt1))
      {
        c();
        break label179;
      }
    }
    d();
    label179:
    paramInt2 = getMeasuredWidth();
    super.onMeasure(paramInt1, m);
    paramInt1 = getMeasuredWidth();
    if ((bool) && (paramInt2 != paramInt1)) {
      setTabSelected(j);
    }
  }
  
  public void onNothingSelected(AdapterView<?> paramAdapterView) {}
  
  public void setAllowCollapse(boolean paramBoolean)
  {
    f = paramBoolean;
  }
  
  public void setContentHeight(int paramInt)
  {
    i = paramInt;
    requestLayout();
  }
  
  public void setTabSelected(int paramInt)
  {
    j = paramInt;
    int m = d.getChildCount();
    int k = 0;
    while (k < m)
    {
      localObject = d.getChildAt(k);
      boolean bool;
      if (k == paramInt) {
        bool = true;
      } else {
        bool = false;
      }
      ((View)localObject).setSelected(bool);
      if (bool) {
        a(paramInt);
      }
      k += 1;
    }
    Object localObject = e;
    if ((localObject != null) && (paramInt >= 0)) {
      ((Spinner)localObject).setSelection(paramInt);
    }
  }
  
  private class a
    extends BaseAdapter
  {
    a() {}
    
    public int getCount()
    {
      return d.getChildCount();
    }
    
    public Object getItem(int paramInt)
    {
      return ((aa.c)d.getChildAt(paramInt)).a();
    }
    
    public long getItemId(int paramInt)
    {
      return paramInt;
    }
    
    public View getView(int paramInt, View paramView, ViewGroup paramViewGroup)
    {
      if (paramView == null) {
        return a((a.c)getItem(paramInt), true);
      }
      ((aa.c)paramView).a((a.c)getItem(paramInt));
      return paramView;
    }
  }
  
  private class b
    implements View.OnClickListener
  {
    b() {}
    
    public void onClick(View paramView)
    {
      ((aa.c)paramView).a().e();
      int j = d.getChildCount();
      int i = 0;
      while (i < j)
      {
        View localView = d.getChildAt(i);
        boolean bool;
        if (localView == paramView) {
          bool = true;
        } else {
          bool = false;
        }
        localView.setSelected(bool);
        i += 1;
      }
    }
  }
  
  private class c
    extends LinearLayout
  {
    private final int[] a = { 16842964 };
    private a.c b;
    private TextView c;
    private ImageView d;
    private View e;
    
    public c(Context paramContext, a.c paramC, boolean paramBoolean)
    {
      super(null, a.a.d.a.a.actionBarTabStyle);
      b = paramC;
      this$1 = ta.a(paramContext, null, a, a.a.d.a.a.actionBarTabStyle, 0);
      if (g(0)) {
        setBackgroundDrawable(b(0));
      }
      a();
      if (paramBoolean) {
        setGravity(8388627);
      }
      b();
    }
    
    public a.c a()
    {
      return b;
    }
    
    public void a(a.c paramC)
    {
      b = paramC;
      b();
    }
    
    public void b()
    {
      a.c localC = b;
      Object localObject2 = localC.b();
      Object localObject1 = null;
      if (localObject2 != null)
      {
        localObject1 = ((View)localObject2).getParent();
        if (localObject1 != this)
        {
          if (localObject1 != null) {
            ((ViewGroup)localObject1).removeView((View)localObject2);
          }
          addView((View)localObject2);
        }
        e = ((View)localObject2);
        localObject1 = c;
        if (localObject1 != null) {
          ((TextView)localObject1).setVisibility(8);
        }
        localObject1 = d;
        if (localObject1 != null)
        {
          ((ImageView)localObject1).setVisibility(8);
          d.setImageDrawable(null);
        }
      }
      else
      {
        localObject2 = e;
        if (localObject2 != null)
        {
          removeView((View)localObject2);
          e = null;
        }
        Object localObject3 = localC.c();
        localObject2 = localC.d();
        Object localObject4;
        if (localObject3 != null)
        {
          if (d == null)
          {
            localObject4 = new t(getContext());
            LinearLayout.LayoutParams localLayoutParams = new LinearLayout.LayoutParams(-2, -2);
            gravity = 16;
            ((ImageView)localObject4).setLayoutParams(localLayoutParams);
            addView((View)localObject4, 0);
            d = ((ImageView)localObject4);
          }
          d.setImageDrawable((Drawable)localObject3);
          d.setVisibility(0);
        }
        else
        {
          localObject3 = d;
          if (localObject3 != null)
          {
            ((ImageView)localObject3).setVisibility(8);
            d.setImageDrawable(null);
          }
        }
        boolean bool = TextUtils.isEmpty((CharSequence)localObject2) ^ true;
        if (bool)
        {
          if (c == null)
          {
            localObject3 = new I(getContext(), null, a.a.d.a.a.actionBarTabTextStyle);
            ((TextView)localObject3).setEllipsize(TextUtils.TruncateAt.END);
            localObject4 = new LinearLayout.LayoutParams(-2, -2);
            gravity = 16;
            ((TextView)localObject3).setLayoutParams((ViewGroup.LayoutParams)localObject4);
            addView((View)localObject3);
            c = ((TextView)localObject3);
          }
          c.setText((CharSequence)localObject2);
          c.setVisibility(0);
        }
        else
        {
          localObject2 = c;
          if (localObject2 != null)
          {
            ((TextView)localObject2).setVisibility(8);
            c.setText(null);
          }
        }
        localObject2 = d;
        if (localObject2 != null) {
          ((ImageView)localObject2).setContentDescription(localC.a());
        }
        if (!bool) {
          localObject1 = localC.a();
        }
        Ba.a(this, (CharSequence)localObject1);
      }
    }
    
    public void onInitializeAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
    {
      super.onInitializeAccessibilityEvent(paramAccessibilityEvent);
      paramAccessibilityEvent.setClassName(a.c.class.getName());
    }
    
    public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo paramAccessibilityNodeInfo)
    {
      super.onInitializeAccessibilityNodeInfo(paramAccessibilityNodeInfo);
      paramAccessibilityNodeInfo.setClassName(a.c.class.getName());
    }
    
    public void onMeasure(int paramInt1, int paramInt2)
    {
      super.onMeasure(paramInt1, paramInt2);
      if (g > 0)
      {
        paramInt1 = getMeasuredWidth();
        int i = g;
        if (paramInt1 > i) {
          super.onMeasure(View.MeasureSpec.makeMeasureSpec(i, 1073741824), paramInt2);
        }
      }
    }
    
    public void setSelected(boolean paramBoolean)
    {
      int i;
      if (isSelected() != paramBoolean) {
        i = 1;
      } else {
        i = 0;
      }
      super.setSelected(paramBoolean);
      if ((i != 0) && (paramBoolean)) {
        sendAccessibilityEvent(4);
      }
    }
  }
}
