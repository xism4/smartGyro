package android.support.v7.widget;

import a.a.c.g.u;
import a.a.d.a.a;
import a.a.d.a.f;
import a.a.d.a.g;
import a.a.d.a.h;
import a.a.d.a.j;
import android.app.PendingIntent;
import android.app.SearchableInfo;
import android.content.ActivityNotFoundException;
import android.content.ComponentName;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.res.Configuration;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.graphics.drawable.Drawable.ConstantState;
import android.net.Uri;
import android.os.Bundle;
import android.os.Parcel;
import android.os.Parcelable;
import android.os.Parcelable.Creator;
import android.text.Editable;
import android.text.SpannableStringBuilder;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.text.style.ImageSpan;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.Log;
import android.util.TypedValue;
import android.view.KeyEvent;
import android.view.KeyEvent.DispatcherState;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.TouchDelegate;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.View.OnClickListener;
import android.view.View.OnFocusChangeListener;
import android.view.View.OnKeyListener;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import android.view.inputmethod.InputMethodManager;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemSelectedListener;
import android.widget.AutoCompleteTextView;
import android.widget.ImageView;
import android.widget.TextView.OnEditorActionListener;
import java.lang.reflect.Method;
import java.util.WeakHashMap;

public class SearchView
  extends Q
  implements a.a.d.d.c
{
  static final a p = new a();
  private Rect A = new Rect();
  private Rect B = new Rect();
  private int[] C = new int[2];
  private int[] D = new int[2];
  private final ImageView E;
  private final Drawable F;
  private final int G;
  private final int H;
  private final Intent I;
  private final Intent J;
  private final CharSequence K;
  private c L;
  private b M;
  View.OnFocusChangeListener N;
  private d O;
  private View.OnClickListener P;
  private boolean Q;
  private boolean R;
  android.support.v4.widget.d S;
  private boolean T;
  private CharSequence U;
  private boolean V;
  private boolean W;
  private int aa;
  private boolean ba;
  private CharSequence ca;
  private CharSequence da;
  private boolean ea;
  private int fa;
  SearchableInfo ga;
  private Bundle ha;
  private final Runnable ia = new ca(this);
  private Runnable ja = new da(this);
  private final WeakHashMap<String, Drawable.ConstantState> ka = new WeakHashMap();
  private final View.OnClickListener la = new ga(this);
  View.OnKeyListener ma = new ha(this);
  private final TextView.OnEditorActionListener na = new ia(this);
  private final AdapterView.OnItemClickListener oa = new ja(this);
  private final AdapterView.OnItemSelectedListener pa = new ka(this);
  final SearchAutoComplete q;
  private TextWatcher qa = new ba(this);
  private final View r;
  private final View s;
  private final View t;
  final ImageView u;
  final ImageView v;
  final ImageView w;
  final ImageView x;
  private final View y;
  private f z;
  
  public SearchView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public SearchView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, a.searchViewStyle);
  }
  
  public SearchView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramAttributeSet = ta.a(paramContext, paramAttributeSet, j.SearchView, paramInt, 0);
    LayoutInflater.from(paramContext).inflate(paramAttributeSet.g(j.SearchView_layout, g.abc_search_view), this, true);
    q = ((SearchAutoComplete)findViewById(f.search_src_text));
    q.setSearchView(this);
    r = findViewById(f.search_edit_frame);
    s = findViewById(f.search_plate);
    t = findViewById(f.submit_area);
    u = ((ImageView)findViewById(f.search_button));
    v = ((ImageView)findViewById(f.search_go_btn));
    w = ((ImageView)findViewById(f.search_close_btn));
    x = ((ImageView)findViewById(f.search_voice_btn));
    E = ((ImageView)findViewById(f.search_mag_icon));
    u.a(s, paramAttributeSet.b(j.SearchView_queryBackground));
    u.a(t, paramAttributeSet.b(j.SearchView_submitBackground));
    u.setImageDrawable(paramAttributeSet.b(j.SearchView_searchIcon));
    v.setImageDrawable(paramAttributeSet.b(j.SearchView_goIcon));
    w.setImageDrawable(paramAttributeSet.b(j.SearchView_closeIcon));
    x.setImageDrawable(paramAttributeSet.b(j.SearchView_voiceIcon));
    E.setImageDrawable(paramAttributeSet.b(j.SearchView_searchIcon));
    F = paramAttributeSet.b(j.SearchView_searchHintIcon);
    Ba.a(u, getResources().getString(h.abc_searchview_description_search));
    G = paramAttributeSet.g(j.SearchView_suggestionRowLayout, g.abc_search_dropdown_item_icons_2line);
    H = paramAttributeSet.g(j.SearchView_commitIcon, 0);
    u.setOnClickListener(la);
    w.setOnClickListener(la);
    v.setOnClickListener(la);
    x.setOnClickListener(la);
    q.setOnClickListener(la);
    q.addTextChangedListener(qa);
    q.setOnEditorActionListener(na);
    q.setOnItemClickListener(oa);
    q.setOnItemSelectedListener(pa);
    q.setOnKeyListener(ma);
    q.setOnFocusChangeListener(new ea(this));
    setIconifiedByDefault(paramAttributeSet.a(j.SearchView_iconifiedByDefault, true));
    paramInt = paramAttributeSet.c(j.SearchView_android_maxWidth, -1);
    if (paramInt != -1) {
      setMaxWidth(paramInt);
    }
    K = paramAttributeSet.e(j.SearchView_defaultQueryHint);
    U = paramAttributeSet.e(j.SearchView_queryHint);
    paramInt = paramAttributeSet.d(j.SearchView_android_imeOptions, -1);
    if (paramInt != -1) {
      setImeOptions(paramInt);
    }
    paramInt = paramAttributeSet.d(j.SearchView_android_inputType, -1);
    if (paramInt != -1) {
      setInputType(paramInt);
    }
    setFocusable(paramAttributeSet.a(j.SearchView_android_focusable, true));
    paramAttributeSet.a();
    I = new Intent("android.speech.action.WEB_SEARCH");
    I.addFlags(268435456);
    I.putExtra("android.speech.extra.LANGUAGE_MODEL", "web_search");
    J = new Intent("android.speech.action.RECOGNIZE_SPEECH");
    J.addFlags(268435456);
    y = findViewById(q.getDropDownAnchor());
    paramContext = y;
    if (paramContext != null) {
      paramContext.addOnLayoutChangeListener(new fa(this));
    }
    b(Q);
    o();
  }
  
  private Intent a(Intent paramIntent, SearchableInfo paramSearchableInfo)
  {
    ComponentName localComponentName = paramSearchableInfo.getSearchActivity();
    Object localObject1 = new Intent("android.intent.action.SEARCH");
    ((Intent)localObject1).setComponent(localComponentName);
    PendingIntent localPendingIntent = PendingIntent.getActivity(getContext(), 0, (Intent)localObject1, 1073741824);
    Bundle localBundle = new Bundle();
    localObject1 = ha;
    if (localObject1 != null) {
      localBundle.putParcelable("app_data", (Parcelable)localObject1);
    }
    Intent localIntent = new Intent(paramIntent);
    int i = 1;
    Object localObject2 = getResources();
    if (paramSearchableInfo.getVoiceLanguageModeId() != 0) {
      paramIntent = ((Resources)localObject2).getString(paramSearchableInfo.getVoiceLanguageModeId());
    } else {
      paramIntent = "free_form";
    }
    int j = paramSearchableInfo.getVoicePromptTextId();
    Object localObject3 = null;
    if (j != 0) {
      localObject1 = ((Resources)localObject2).getString(paramSearchableInfo.getVoicePromptTextId());
    } else {
      localObject1 = null;
    }
    if (paramSearchableInfo.getVoiceLanguageId() != 0) {
      localObject2 = ((Resources)localObject2).getString(paramSearchableInfo.getVoiceLanguageId());
    } else {
      localObject2 = null;
    }
    if (paramSearchableInfo.getVoiceMaxResults() != 0) {
      i = paramSearchableInfo.getVoiceMaxResults();
    }
    localIntent.putExtra("android.speech.extra.LANGUAGE_MODEL", paramIntent);
    localIntent.putExtra("android.speech.extra.PROMPT", (String)localObject1);
    localIntent.putExtra("android.speech.extra.LANGUAGE", (String)localObject2);
    localIntent.putExtra("android.speech.extra.MAX_RESULTS", i);
    if (localComponentName == null) {
      paramIntent = localObject3;
    } else {
      paramIntent = localComponentName.flattenToShortString();
    }
    localIntent.putExtra("calling_package", paramIntent);
    localIntent.putExtra("android.speech.extra.RESULTS_PENDINGINTENT", localPendingIntent);
    localIntent.putExtra("android.speech.extra.RESULTS_PENDINGINTENT_BUNDLE", localBundle);
    return localIntent;
  }
  
  private Intent a(Cursor paramCursor, int paramInt, String paramString)
  {
    try
    {
      localObject2 = na.a(paramCursor, "suggest_intent_action");
      localObject1 = localObject2;
      if (localObject2 != null) {
        break label230;
      }
      localObject1 = ga.getSuggestIntentAction();
    }
    catch (RuntimeException paramString)
    {
      for (;;)
      {
        Object localObject1;
        Object localObject3;
        try
        {
          String str;
          paramInt = paramCursor.getPosition();
        }
        catch (RuntimeException paramCursor)
        {
          continue;
        }
        paramInt = -1;
        paramCursor = new StringBuilder();
        paramCursor.append("Search suggestions cursor at row ");
        paramCursor.append(paramInt);
        paramCursor.append(" returned exception.");
        Log.w("SearchView", paramCursor.toString(), paramString);
        return null;
        label230:
        Object localObject2 = localObject1;
        if (localObject1 == null)
        {
          localObject2 = "android.intent.action.SEARCH";
          continue;
          label247:
          if (localObject3 == null) {
            localObject1 = null;
          }
        }
      }
    }
    localObject3 = na.a(paramCursor, "suggest_intent_data");
    localObject1 = localObject3;
    if (localObject3 == null) {
      localObject1 = ga.getSuggestIntentData();
    }
    localObject3 = localObject1;
    if (localObject1 != null)
    {
      str = na.a(paramCursor, "suggest_intent_data_id");
      localObject3 = localObject1;
      if (str != null)
      {
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append((String)localObject1);
        ((StringBuilder)localObject3).append("/");
        ((StringBuilder)localObject3).append(Uri.encode(str));
        localObject3 = ((StringBuilder)localObject3).toString();
        break label247;
        localObject1 = Uri.parse((String)localObject3);
        localObject3 = na.a(paramCursor, "suggest_intent_query");
        paramString = a((String)localObject2, (Uri)localObject1, na.a(paramCursor, "suggest_intent_extra_data"), (String)localObject3, paramInt, paramString);
        return paramString;
      }
    }
  }
  
  private Intent a(String paramString1, Uri paramUri, String paramString2, String paramString3, int paramInt, String paramString4)
  {
    paramString1 = new Intent(paramString1);
    paramString1.addFlags(268435456);
    if (paramUri != null) {
      paramString1.setData(paramUri);
    }
    paramString1.putExtra("user_query", da);
    if (paramString3 != null) {
      paramString1.putExtra("query", paramString3);
    }
    if (paramString2 != null) {
      paramString1.putExtra("intent_extra_data_key", paramString2);
    }
    paramUri = ha;
    if (paramUri != null) {
      paramString1.putExtra("app_data", paramUri);
    }
    if (paramInt != 0)
    {
      paramString1.putExtra("action_key", paramInt);
      paramString1.putExtra("action_msg", paramString4);
    }
    paramString1.setComponent(ga.getSearchActivity());
    return paramString1;
  }
  
  private void a(Intent paramIntent)
  {
    if (paramIntent == null) {
      return;
    }
    try
    {
      getContext().startActivity(paramIntent);
      return;
    }
    catch (RuntimeException localRuntimeException)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("Failed launch activity: ");
      localStringBuilder.append(paramIntent);
      Log.e("SearchView", localStringBuilder.toString(), localRuntimeException);
    }
  }
  
  private void a(View paramView, Rect paramRect)
  {
    paramView.getLocationInWindow(C);
    getLocationInWindow(D);
    int[] arrayOfInt1 = C;
    int i = arrayOfInt1[1];
    int[] arrayOfInt2 = D;
    i -= arrayOfInt2[1];
    int j = arrayOfInt1[0] - arrayOfInt2[0];
    paramRect.set(j, i, paramView.getWidth() + j, paramView.getHeight() + i);
  }
  
  private void a(boolean paramBoolean)
  {
    int i;
    if ((T) && (l()) && (hasFocus()) && ((paramBoolean) || (!ba))) {
      i = 0;
    } else {
      i = 8;
    }
    v.setVisibility(i);
  }
  
  static boolean a(Context paramContext)
  {
    return getResourcesgetConfigurationorientation == 2;
  }
  
  private Intent b(Intent paramIntent, SearchableInfo paramSearchableInfo)
  {
    Intent localIntent = new Intent(paramIntent);
    paramIntent = paramSearchableInfo.getSearchActivity();
    if (paramIntent == null) {
      paramIntent = null;
    } else {
      paramIntent = paramIntent.flattenToShortString();
    }
    localIntent.putExtra("calling_package", paramIntent);
    return localIntent;
  }
  
  private void b(boolean paramBoolean)
  {
    R = paramBoolean;
    int j = 8;
    boolean bool1 = false;
    if (paramBoolean) {
      i = 0;
    } else {
      i = 8;
    }
    boolean bool2 = TextUtils.isEmpty(q.getText()) ^ true;
    u.setVisibility(i);
    a(bool2);
    View localView = r;
    if (paramBoolean) {
      i = 8;
    } else {
      i = 0;
    }
    localView.setVisibility(i);
    int i = j;
    if (E.getDrawable() != null) {
      if (Q) {
        i = j;
      } else {
        i = 0;
      }
    }
    E.setVisibility(i);
    n();
    paramBoolean = bool1;
    if (!bool2) {
      paramBoolean = true;
    }
    c(paramBoolean);
    q();
  }
  
  private boolean b(int paramInt1, int paramInt2, String paramString)
  {
    Cursor localCursor = S.a();
    if ((localCursor != null) && (localCursor.moveToPosition(paramInt1)))
    {
      a(a(localCursor, paramInt2, paramString));
      return true;
    }
    return false;
  }
  
  private CharSequence c(CharSequence paramCharSequence)
  {
    if (Q)
    {
      if (F == null) {
        return paramCharSequence;
      }
      double d = q.getTextSize();
      Double.isNaN(d);
      int i = (int)(d * 1.25D);
      F.setBounds(0, 0, i, i);
      SpannableStringBuilder localSpannableStringBuilder = new SpannableStringBuilder("   ");
      localSpannableStringBuilder.setSpan(new ImageSpan(F), 1, 2, 33);
      localSpannableStringBuilder.append(paramCharSequence);
      return localSpannableStringBuilder;
    }
    return paramCharSequence;
  }
  
  private void c(boolean paramBoolean)
  {
    int i;
    if ((ba) && (!c()) && (paramBoolean))
    {
      i = 0;
      v.setVisibility(8);
    }
    else
    {
      i = 8;
    }
    x.setVisibility(i);
  }
  
  private void e(int paramInt)
  {
    Editable localEditable = q.getText();
    Object localObject = S.a();
    if (localObject == null) {
      return;
    }
    if (((Cursor)localObject).moveToPosition(paramInt))
    {
      localObject = S.convertToString((Cursor)localObject);
      if (localObject != null)
      {
        setQuery((CharSequence)localObject);
        return;
      }
    }
    setQuery(localEditable);
  }
  
  private int getPreferredHeight()
  {
    return getContext().getResources().getDimensionPixelSize(a.a.d.a.d.abc_search_view_preferred_height);
  }
  
  private int getPreferredWidth()
  {
    return getContext().getResources().getDimensionPixelSize(a.a.d.a.d.abc_search_view_preferred_width);
  }
  
  private void j()
  {
    q.dismissDropDown();
  }
  
  private boolean k()
  {
    Object localObject = ga;
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (localObject != null)
    {
      bool1 = bool2;
      if (((SearchableInfo)localObject).getVoiceSearchEnabled())
      {
        localObject = null;
        if (ga.getVoiceSearchLaunchWebSearch()) {
          localObject = I;
        } else if (ga.getVoiceSearchLaunchRecognizer()) {
          localObject = J;
        }
        bool1 = bool2;
        if (localObject != null)
        {
          bool1 = bool2;
          if (getContext().getPackageManager().resolveActivity((Intent)localObject, 65536) != null) {
            bool1 = true;
          }
        }
      }
    }
    return bool1;
  }
  
  private boolean l()
  {
    return ((T) || (ba)) && (!c());
  }
  
  private void m()
  {
    post(ia);
  }
  
  private void n()
  {
    boolean bool = TextUtils.isEmpty(q.getText());
    int k = 1;
    int m = bool ^ true;
    int j = 0;
    int i = k;
    if (m == 0) {
      if ((Q) && (!ea)) {
        i = k;
      } else {
        i = 0;
      }
    }
    Object localObject = w;
    if (i != 0) {
      i = j;
    } else {
      i = 8;
    }
    ((ImageView)localObject).setVisibility(i);
    Drawable localDrawable = w.getDrawable();
    if (localDrawable != null)
    {
      if (m != 0) {
        localObject = ViewGroup.ENABLED_STATE_SET;
      } else {
        localObject = ViewGroup.EMPTY_STATE_SET;
      }
      localDrawable.setState((int[])localObject);
    }
  }
  
  private void o()
  {
    CharSequence localCharSequence = getQueryHint();
    SearchAutoComplete localSearchAutoComplete = q;
    Object localObject = localCharSequence;
    if (localCharSequence == null) {
      localObject = "";
    }
    localSearchAutoComplete.setHint(c((CharSequence)localObject));
  }
  
  private void p()
  {
    q.setThreshold(ga.getSuggestThreshold());
    q.setImeOptions(ga.getImeOptions());
    int k = ga.getInputType();
    int j = 1;
    int i = k;
    if ((k & 0xF) == 1)
    {
      k &= 0xFFFEFFFF;
      i = k;
      if (ga.getSuggestAuthority() != null) {
        i = k | 0x10000 | 0x80000;
      }
    }
    q.setInputType(i);
    Object localObject = S;
    if (localObject != null) {
      ((android.support.v4.widget.d)localObject).a(null);
    }
    if (ga.getSuggestAuthority() != null)
    {
      S = new na(getContext(), this, ga, ka);
      q.setAdapter(S);
      localObject = (na)S;
      i = j;
      if (V) {
        i = 2;
      }
      ((na)localObject).a(i);
    }
  }
  
  private void q()
  {
    int i;
    if ((l()) && ((v.getVisibility() == 0) || (x.getVisibility() == 0))) {
      i = 0;
    } else {
      i = 8;
    }
    t.setVisibility(i);
  }
  
  private void setQuery(CharSequence paramCharSequence)
  {
    q.setText(paramCharSequence);
    SearchAutoComplete localSearchAutoComplete = q;
    int i;
    if (TextUtils.isEmpty(paramCharSequence)) {
      i = 0;
    } else {
      i = paramCharSequence.length();
    }
    localSearchAutoComplete.setSelection(i);
  }
  
  void a()
  {
    if (y.getWidth() > 1)
    {
      Resources localResources = getContext().getResources();
      int k = s.getPaddingLeft();
      Rect localRect = new Rect();
      boolean bool = Ha.a(this);
      int i;
      if (Q) {
        i = localResources.getDimensionPixelSize(a.a.d.a.d.abc_dropdownitem_icon_width) + localResources.getDimensionPixelSize(a.a.d.a.d.abc_dropdownitem_text_padding_left);
      } else {
        i = 0;
      }
      q.getDropDownBackground().getPadding(localRect);
      if (bool) {
        j = -left;
      } else {
        j = k - (left + i);
      }
      q.setDropDownHorizontalOffset(j);
      int j = y.getWidth();
      int m = left;
      int n = right;
      q.setDropDownWidth(j + m + n + i - k);
    }
  }
  
  void a(int paramInt, String paramString1, String paramString2)
  {
    paramString1 = a("android.intent.action.SEARCH", null, null, paramString2, paramInt, paramString1);
    getContext().startActivity(paramString1);
  }
  
  void a(CharSequence paramCharSequence)
  {
    setQuery(paramCharSequence);
  }
  
  public void a(CharSequence paramCharSequence, boolean paramBoolean)
  {
    q.setText(paramCharSequence);
    if (paramCharSequence != null)
    {
      SearchAutoComplete localSearchAutoComplete = q;
      localSearchAutoComplete.setSelection(localSearchAutoComplete.length());
      da = paramCharSequence;
    }
    if ((paramBoolean) && (!TextUtils.isEmpty(paramCharSequence))) {
      f();
    }
  }
  
  boolean a(int paramInt1, int paramInt2, String paramString)
  {
    paramString = O;
    if ((paramString != null) && (paramString.onSuggestionClick(paramInt1))) {
      return false;
    }
    b(paramInt1, 0, null);
    q.setImeVisibility(false);
    j();
    return true;
  }
  
  boolean a(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    if (ga == null) {
      return false;
    }
    if (S == null) {
      return false;
    }
    if ((paramKeyEvent.getAction() == 0) && (paramKeyEvent.hasNoModifiers())) {
      if ((paramInt != 66) && (paramInt != 84) && (paramInt != 61))
      {
        if ((paramInt != 21) && (paramInt != 22))
        {
          if ((paramInt == 19) && (q.getListSelection() == 0)) {
            return false;
          }
        }
        else
        {
          if (paramInt == 21) {
            paramInt = 0;
          } else {
            paramInt = q.length();
          }
          q.setSelection(paramInt);
          q.setListSelection(0);
          q.clearListSelection();
          p.a(q, true);
          return true;
        }
      }
      else {
        return a(q.getListSelection(), 0, null);
      }
    }
    return false;
  }
  
  void b()
  {
    p.b(q);
    p.a(q);
  }
  
  void b(CharSequence paramCharSequence)
  {
    Editable localEditable = q.getText();
    da = localEditable;
    boolean bool2 = TextUtils.isEmpty(localEditable);
    boolean bool1 = true;
    bool2 ^= true;
    a(bool2);
    if (bool2) {
      bool1 = false;
    }
    c(bool1);
    n();
    q();
    if ((L != null) && (!TextUtils.equals(paramCharSequence, ca))) {
      L.onQueryTextChange(paramCharSequence.toString());
    }
    ca = paramCharSequence.toString();
  }
  
  public boolean c()
  {
    return R;
  }
  
  public void clearFocus()
  {
    W = true;
    super.clearFocus();
    q.clearFocus();
    q.setImeVisibility(false);
    W = false;
  }
  
  void d()
  {
    if (TextUtils.isEmpty(q.getText()))
    {
      if (Q)
      {
        b localB = M;
        if ((localB == null) || (!localB.onClose()))
        {
          clearFocus();
          b(true);
        }
      }
    }
    else
    {
      q.setText("");
      q.requestFocus();
      q.setImeVisibility(true);
    }
  }
  
  boolean d(int paramInt)
  {
    d localD = O;
    if ((localD != null) && (localD.onSuggestionSelect(paramInt))) {
      return false;
    }
    e(paramInt);
    return true;
  }
  
  void e()
  {
    b(false);
    q.requestFocus();
    q.setImeVisibility(true);
    View.OnClickListener localOnClickListener = P;
    if (localOnClickListener != null) {
      localOnClickListener.onClick(this);
    }
  }
  
  void f()
  {
    Editable localEditable = q.getText();
    if ((localEditable != null) && (TextUtils.getTrimmedLength(localEditable) > 0))
    {
      c localC = L;
      if ((localC == null) || (!localC.onQueryTextSubmit(localEditable.toString())))
      {
        if (ga != null) {
          a(0, null, localEditable.toString());
        }
        q.setImeVisibility(false);
        j();
      }
    }
  }
  
  void g()
  {
    b(c());
    m();
    if (q.hasFocus()) {
      b();
    }
  }
  
  public int getImeOptions()
  {
    return q.getImeOptions();
  }
  
  public int getInputType()
  {
    return q.getInputType();
  }
  
  public int getMaxWidth()
  {
    return aa;
  }
  
  public CharSequence getQuery()
  {
    return q.getText();
  }
  
  public CharSequence getQueryHint()
  {
    Object localObject = U;
    if (localObject != null) {
      return localObject;
    }
    localObject = ga;
    if ((localObject != null) && (((SearchableInfo)localObject).getHintId() != 0)) {
      return getContext().getText(ga.getHintId());
    }
    return K;
  }
  
  int getSuggestionCommitIconResId()
  {
    return H;
  }
  
  int getSuggestionRowLayout()
  {
    return G;
  }
  
  public android.support.v4.widget.d getSuggestionsAdapter()
  {
    return S;
  }
  
  void h()
  {
    Object localObject = ga;
    if (localObject == null) {
      return;
    }
    try
    {
      if (((SearchableInfo)localObject).getVoiceSearchLaunchWebSearch()) {}
      for (localObject = b(I, (SearchableInfo)localObject);; localObject = a(J, (SearchableInfo)localObject))
      {
        getContext().startActivity((Intent)localObject);
        return;
        if (!((SearchableInfo)localObject).getVoiceSearchLaunchRecognizer()) {
          break;
        }
      }
    }
    catch (ActivityNotFoundException localActivityNotFoundException)
    {
      for (;;) {}
    }
    Log.w("SearchView", "Could not find voice search activity");
  }
  
  void i()
  {
    int[] arrayOfInt;
    if (q.hasFocus()) {
      arrayOfInt = ViewGroup.FOCUSED_STATE_SET;
    } else {
      arrayOfInt = ViewGroup.EMPTY_STATE_SET;
    }
    Drawable localDrawable = s.getBackground();
    if (localDrawable != null) {
      localDrawable.setState(arrayOfInt);
    }
    localDrawable = t.getBackground();
    if (localDrawable != null) {
      localDrawable.setState(arrayOfInt);
    }
    invalidate();
  }
  
  public void onActionViewCollapsed()
  {
    a("", false);
    clearFocus();
    b(true);
    q.setImeOptions(fa);
    ea = false;
  }
  
  public void onActionViewExpanded()
  {
    if (ea) {
      return;
    }
    ea = true;
    fa = q.getImeOptions();
    q.setImeOptions(fa | 0x2000000);
    q.setText("");
    setIconified(false);
  }
  
  protected void onDetachedFromWindow()
  {
    removeCallbacks(ia);
    post(ja);
    super.onDetachedFromWindow();
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    if (paramBoolean)
    {
      a(q, A);
      Object localObject = B;
      Rect localRect = A;
      ((Rect)localObject).set(left, 0, right, paramInt4 - paramInt2);
      localObject = z;
      if (localObject == null)
      {
        z = new f(B, A, q);
        setTouchDelegate(z);
        return;
      }
      ((f)localObject).a(B, A);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    if (c())
    {
      super.onMeasure(paramInt1, paramInt2);
      return;
    }
    int j = View.MeasureSpec.getMode(paramInt1);
    int i = View.MeasureSpec.getSize(paramInt1);
    if (j != Integer.MIN_VALUE)
    {
      if (j != 0)
      {
        if (j != 1073741824)
        {
          paramInt1 = i;
          break label113;
        }
        j = aa;
        paramInt1 = i;
        if (j <= 0) {
          break label113;
        }
        paramInt1 = j;
      }
      else
      {
        paramInt1 = aa;
        if (paramInt1 > 0) {
          break label113;
        }
        paramInt1 = getPreferredWidth();
        break label113;
      }
    }
    else
    {
      paramInt1 = aa;
      if (paramInt1 > 0) {
        break label107;
      }
    }
    paramInt1 = getPreferredWidth();
    label107:
    paramInt1 = Math.min(paramInt1, i);
    label113:
    i = View.MeasureSpec.getMode(paramInt2);
    paramInt2 = View.MeasureSpec.getSize(paramInt2);
    if (i != Integer.MIN_VALUE)
    {
      if (i == 0) {
        paramInt2 = getPreferredHeight();
      }
    }
    else {
      paramInt2 = Math.min(getPreferredHeight(), paramInt2);
    }
    super.onMeasure(View.MeasureSpec.makeMeasureSpec(paramInt1, 1073741824), View.MeasureSpec.makeMeasureSpec(paramInt2, 1073741824));
  }
  
  protected void onRestoreInstanceState(Parcelable paramParcelable)
  {
    if (!(paramParcelable instanceof e))
    {
      super.onRestoreInstanceState(paramParcelable);
      return;
    }
    paramParcelable = (e)paramParcelable;
    super.onRestoreInstanceState(paramParcelable.a());
    b(c);
    requestLayout();
  }
  
  protected Parcelable onSaveInstanceState()
  {
    e localE = new e(super.onSaveInstanceState());
    c = c();
    return localE;
  }
  
  public void onWindowFocusChanged(boolean paramBoolean)
  {
    super.onWindowFocusChanged(paramBoolean);
    m();
  }
  
  public boolean requestFocus(int paramInt, Rect paramRect)
  {
    if (W) {
      return false;
    }
    if (!isFocusable()) {
      return false;
    }
    if (!c())
    {
      boolean bool = q.requestFocus(paramInt, paramRect);
      if (bool) {
        b(false);
      }
      return bool;
    }
    return super.requestFocus(paramInt, paramRect);
  }
  
  public void setAppSearchData(Bundle paramBundle)
  {
    ha = paramBundle;
  }
  
  public void setIconified(boolean paramBoolean)
  {
    if (paramBoolean)
    {
      d();
      return;
    }
    e();
  }
  
  public void setIconifiedByDefault(boolean paramBoolean)
  {
    if (Q == paramBoolean) {
      return;
    }
    Q = paramBoolean;
    b(paramBoolean);
    o();
  }
  
  public void setImeOptions(int paramInt)
  {
    q.setImeOptions(paramInt);
  }
  
  public void setInputType(int paramInt)
  {
    q.setInputType(paramInt);
  }
  
  public void setMaxWidth(int paramInt)
  {
    aa = paramInt;
    requestLayout();
  }
  
  public void setOnCloseListener(b paramB)
  {
    M = paramB;
  }
  
  public void setOnQueryTextFocusChangeListener(View.OnFocusChangeListener paramOnFocusChangeListener)
  {
    N = paramOnFocusChangeListener;
  }
  
  public void setOnQueryTextListener(c paramC)
  {
    L = paramC;
  }
  
  public void setOnSearchClickListener(View.OnClickListener paramOnClickListener)
  {
    P = paramOnClickListener;
  }
  
  public void setOnSuggestionListener(d paramD)
  {
    O = paramD;
  }
  
  public void setQueryHint(CharSequence paramCharSequence)
  {
    U = paramCharSequence;
    o();
  }
  
  public void setQueryRefinementEnabled(boolean paramBoolean)
  {
    V = paramBoolean;
    Object localObject = S;
    if ((localObject instanceof na))
    {
      localObject = (na)localObject;
      int i;
      if (paramBoolean) {
        i = 2;
      } else {
        i = 1;
      }
      ((na)localObject).a(i);
    }
  }
  
  public void setSearchableInfo(SearchableInfo paramSearchableInfo)
  {
    ga = paramSearchableInfo;
    if (ga != null)
    {
      p();
      o();
    }
    ba = k();
    if (ba) {
      q.setPrivateImeOptions("nm");
    }
    b(c());
  }
  
  public void setSubmitButtonEnabled(boolean paramBoolean)
  {
    T = paramBoolean;
    b(c());
  }
  
  public void setSuggestionsAdapter(android.support.v4.widget.d paramD)
  {
    S = paramD;
    q.setAdapter(S);
  }
  
  public static class SearchAutoComplete
    extends i
  {
    private int d = getThreshold();
    private SearchView e;
    private boolean f;
    final Runnable g = new ma(this);
    
    public SearchAutoComplete(Context paramContext)
    {
      this(paramContext, null);
    }
    
    public SearchAutoComplete(Context paramContext, AttributeSet paramAttributeSet)
    {
      this(paramContext, paramAttributeSet, a.autoCompleteTextViewStyle);
    }
    
    public SearchAutoComplete(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
    {
      super(paramAttributeSet, paramInt);
    }
    
    private int getSearchViewTextMinWidthDp()
    {
      Configuration localConfiguration = getResources().getConfiguration();
      int i = screenWidthDp;
      int j = screenHeightDp;
      if ((i >= 960) && (j >= 720) && (orientation == 2)) {
        return 256;
      }
      if ((i < 600) && ((i < 640) || (j < 480))) {
        return 160;
      }
      return 192;
    }
    
    boolean a()
    {
      return TextUtils.getTrimmedLength(getText()) == 0;
    }
    
    void b()
    {
      if (f)
      {
        ((InputMethodManager)getContext().getSystemService("input_method")).showSoftInput(this, 0);
        f = false;
      }
    }
    
    public boolean enoughToFilter()
    {
      return (d <= 0) || (super.enoughToFilter());
    }
    
    public InputConnection onCreateInputConnection(EditorInfo paramEditorInfo)
    {
      paramEditorInfo = super.onCreateInputConnection(paramEditorInfo);
      if (f)
      {
        removeCallbacks(g);
        post(g);
      }
      return paramEditorInfo;
    }
    
    protected void onFinishInflate()
    {
      super.onFinishInflate();
      DisplayMetrics localDisplayMetrics = getResources().getDisplayMetrics();
      setMinWidth((int)TypedValue.applyDimension(1, getSearchViewTextMinWidthDp(), localDisplayMetrics));
    }
    
    protected void onFocusChanged(boolean paramBoolean, int paramInt, Rect paramRect)
    {
      super.onFocusChanged(paramBoolean, paramInt, paramRect);
      e.g();
    }
    
    public boolean onKeyPreIme(int paramInt, KeyEvent paramKeyEvent)
    {
      if (paramInt == 4)
      {
        KeyEvent.DispatcherState localDispatcherState;
        if ((paramKeyEvent.getAction() == 0) && (paramKeyEvent.getRepeatCount() == 0))
        {
          localDispatcherState = getKeyDispatcherState();
          if (localDispatcherState != null) {
            localDispatcherState.startTracking(paramKeyEvent, this);
          }
          return true;
        }
        if (paramKeyEvent.getAction() == 1)
        {
          localDispatcherState = getKeyDispatcherState();
          if (localDispatcherState != null) {
            localDispatcherState.handleUpEvent(paramKeyEvent);
          }
          if ((paramKeyEvent.isTracking()) && (!paramKeyEvent.isCanceled()))
          {
            e.clearFocus();
            setImeVisibility(false);
            return true;
          }
        }
      }
      return super.onKeyPreIme(paramInt, paramKeyEvent);
    }
    
    public void onWindowFocusChanged(boolean paramBoolean)
    {
      super.onWindowFocusChanged(paramBoolean);
      if ((paramBoolean) && (e.hasFocus()) && (getVisibility() == 0))
      {
        f = true;
        if (SearchView.a(getContext())) {
          SearchView.p.a(this, true);
        }
      }
    }
    
    public void performCompletion() {}
    
    protected void replaceText(CharSequence paramCharSequence) {}
    
    void setImeVisibility(boolean paramBoolean)
    {
      InputMethodManager localInputMethodManager = (InputMethodManager)getContext().getSystemService("input_method");
      if (!paramBoolean)
      {
        f = false;
        removeCallbacks(g);
        localInputMethodManager.hideSoftInputFromWindow(getWindowToken(), 0);
        return;
      }
      if (localInputMethodManager.isActive(this))
      {
        f = false;
        removeCallbacks(g);
        localInputMethodManager.showSoftInput(this, 0);
        return;
      }
      f = true;
    }
    
    void setSearchView(SearchView paramSearchView)
    {
      e = paramSearchView;
    }
    
    public void setThreshold(int paramInt)
    {
      super.setThreshold(paramInt);
      d = paramInt;
    }
  }
  
  private static class a
  {
    private Method a;
    private Method b;
    private Method c;
    
    a()
    {
      try
      {
        a = AutoCompleteTextView.class.getDeclaredMethod("doBeforeTextChanged", new Class[0]);
        a.setAccessible(true);
      }
      catch (NoSuchMethodException localNoSuchMethodException1)
      {
        try
        {
          for (;;)
          {
            b = AutoCompleteTextView.class.getDeclaredMethod("doAfterTextChanged", new Class[0]);
            b.setAccessible(true);
            try
            {
              c = AutoCompleteTextView.class.getMethod("ensureImeVisible", new Class[] { Boolean.TYPE });
              c.setAccessible(true);
              return;
            }
            catch (NoSuchMethodException localNoSuchMethodException3) {}
            localNoSuchMethodException1 = localNoSuchMethodException1;
          }
        }
        catch (NoSuchMethodException localNoSuchMethodException2)
        {
          for (;;) {}
        }
      }
    }
    
    void a(AutoCompleteTextView paramAutoCompleteTextView)
    {
      Method localMethod = b;
      if (localMethod != null) {}
      try
      {
        localMethod.invoke(paramAutoCompleteTextView, new Object[0]);
        return;
      }
      catch (Exception paramAutoCompleteTextView) {}
    }
    
    void a(AutoCompleteTextView paramAutoCompleteTextView, boolean paramBoolean)
    {
      Method localMethod = c;
      if (localMethod != null) {}
      try
      {
        localMethod.invoke(paramAutoCompleteTextView, new Object[] { Boolean.valueOf(paramBoolean) });
        return;
      }
      catch (Exception paramAutoCompleteTextView) {}
    }
    
    void b(AutoCompleteTextView paramAutoCompleteTextView)
    {
      Method localMethod = a;
      if (localMethod != null) {}
      try
      {
        localMethod.invoke(paramAutoCompleteTextView, new Object[0]);
        return;
      }
      catch (Exception paramAutoCompleteTextView) {}
    }
  }
  
  public static abstract interface b
  {
    public abstract boolean onClose();
  }
  
  public static abstract interface c
  {
    public abstract boolean onQueryTextChange(String paramString);
    
    public abstract boolean onQueryTextSubmit(String paramString);
  }
  
  public static abstract interface d
  {
    public abstract boolean onSuggestionClick(int paramInt);
    
    public abstract boolean onSuggestionSelect(int paramInt);
  }
  
  static class e
    extends a.a.c.g.c
  {
    public static final Parcelable.Creator<e> CREATOR = new la();
    boolean c;
    
    public e(Parcel paramParcel, ClassLoader paramClassLoader)
    {
      super(paramClassLoader);
      c = ((Boolean)paramParcel.readValue(null)).booleanValue();
    }
    
    e(Parcelable paramParcelable)
    {
      super();
    }
    
    public String toString()
    {
      StringBuilder localStringBuilder = new StringBuilder();
      localStringBuilder.append("SearchView.SavedState{");
      localStringBuilder.append(Integer.toHexString(System.identityHashCode(this)));
      localStringBuilder.append(" isIconified=");
      localStringBuilder.append(c);
      localStringBuilder.append("}");
      return localStringBuilder.toString();
    }
    
    public void writeToParcel(Parcel paramParcel, int paramInt)
    {
      super.writeToParcel(paramParcel, paramInt);
      paramParcel.writeValue(Boolean.valueOf(c));
    }
  }
  
  private static class f
    extends TouchDelegate
  {
    private final View a;
    private final Rect b;
    private final Rect c;
    private final Rect d;
    private final int e;
    private boolean f;
    
    public f(Rect paramRect1, Rect paramRect2, View paramView)
    {
      super(paramView);
      e = ViewConfiguration.get(paramView.getContext()).getScaledTouchSlop();
      b = new Rect();
      d = new Rect();
      c = new Rect();
      a(paramRect1, paramRect2);
      a = paramView;
    }
    
    public void a(Rect paramRect1, Rect paramRect2)
    {
      b.set(paramRect1);
      d.set(paramRect1);
      paramRect1 = d;
      int i = e;
      paramRect1.inset(-i, -i);
      c.set(paramRect2);
    }
    
    public boolean onTouchEvent(MotionEvent paramMotionEvent)
    {
      int k = (int)paramMotionEvent.getX();
      int m = (int)paramMotionEvent.getY();
      int i = paramMotionEvent.getAction();
      int j = 1;
      boolean bool2 = false;
      if (i != 0)
      {
        if ((i != 1) && (i != 2))
        {
          if (i == 3)
          {
            bool1 = f;
            f = false;
            i = j;
            break label146;
          }
        }
        else
        {
          boolean bool3 = f;
          bool1 = bool3;
          i = j;
          if (!bool3) {
            break label146;
          }
          bool1 = bool3;
          i = j;
          if (d.contains(k, m)) {
            break label146;
          }
          i = 0;
          bool1 = bool3;
          break label146;
        }
      }
      else if (b.contains(k, m))
      {
        f = true;
        bool1 = true;
        i = j;
        break label146;
      }
      boolean bool1 = false;
      i = j;
      label146:
      if (bool1)
      {
        float f1;
        if ((i != 0) && (!c.contains(k, m)))
        {
          f1 = a.getWidth() / 2;
          i = a.getHeight() / 2;
        }
        else
        {
          Rect localRect = c;
          f1 = k - left;
          i = m - top;
        }
        paramMotionEvent.setLocation(f1, i);
        bool2 = a.dispatchTouchEvent(paramMotionEvent);
      }
      return bool2;
    }
  }
}
