package android.support.v7.widget;

import a.a.c.g.u;
import a.a.d.a.f;
import a.a.d.a.j;
import a.a.d.d.b;
import android.content.Context;
import android.support.v7.view.menu.l;
import android.text.TextUtils;
import android.util.AttributeSet;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.MeasureSpec;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.view.ViewGroup.MarginLayoutParams;
import android.view.accessibility.AccessibilityEvent;
import android.widget.LinearLayout;
import android.widget.TextView;

public class ActionBarContextView
  extends a
{
  private CharSequence i;
  private CharSequence j;
  private View k;
  private View l;
  private LinearLayout m;
  private TextView n;
  private TextView o;
  private int p;
  private int q;
  private boolean r;
  private int s;
  
  public ActionBarContextView(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public ActionBarContextView(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, a.a.d.a.a.actionModeStyle);
  }
  
  public ActionBarContextView(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(paramContext, paramAttributeSet, paramInt);
    paramContext = ta.a(paramContext, paramAttributeSet, j.ActionMode, paramInt, 0);
    u.a(this, paramContext.b(j.ActionMode_background));
    p = paramContext.g(j.ActionMode_titleTextStyle, 0);
    q = paramContext.g(j.ActionMode_subtitleTextStyle, 0);
    e = paramContext.f(j.ActionMode_height, 0);
    s = paramContext.g(j.ActionMode_closeItemLayout, a.a.d.a.g.abc_action_mode_close_item_material);
    paramContext.a();
  }
  
  private void e()
  {
    if (m == null)
    {
      LayoutInflater.from(getContext()).inflate(a.a.d.a.g.abc_action_bar_title_item, this);
      m = ((LinearLayout)getChildAt(getChildCount() - 1));
      n = ((TextView)m.findViewById(f.action_bar_title));
      o = ((TextView)m.findViewById(f.action_bar_subtitle));
      if (p != 0) {
        n.setTextAppearance(getContext(), p);
      }
      if (q != 0) {
        o.setTextAppearance(getContext(), q);
      }
    }
    n.setText(i);
    o.setText(j);
    boolean bool2 = TextUtils.isEmpty(i);
    boolean bool1 = TextUtils.isEmpty(j) ^ true;
    Object localObject = o;
    int i2 = 0;
    if (bool1) {
      i1 = 0;
    } else {
      i1 = 8;
    }
    ((TextView)localObject).setVisibility(i1);
    localObject = m;
    int i1 = i2;
    if (!(bool2 ^ true)) {
      if (bool1) {
        i1 = i2;
      } else {
        i1 = 8;
      }
    }
    ((LinearLayout)localObject).setVisibility(i1);
    if (m.getParent() == null) {
      addView(m);
    }
  }
  
  public void a()
  {
    if (k == null) {
      c();
    }
  }
  
  public void a(b paramB)
  {
    Object localObject = k;
    if (localObject == null) {
      k = LayoutInflater.from(getContext()).inflate(s, this, false);
    }
    while (((View)localObject).getParent() == null)
    {
      addView(k);
      break;
    }
    k.findViewById(f.action_mode_close_button).setOnClickListener(new c(this, paramB));
    paramB = (l)paramB.c();
    localObject = d;
    if (localObject != null) {
      ((g)localObject).c();
    }
    d = new g(getContext());
    d.c(true);
    localObject = new ViewGroup.LayoutParams(-2, -1);
    paramB.a(d, b);
    c = ((ActionMenuView)d.b(this));
    u.a(c, null);
    addView(c, (ViewGroup.LayoutParams)localObject);
  }
  
  public boolean b()
  {
    return r;
  }
  
  public void c()
  {
    removeAllViews();
    l = null;
    c = null;
  }
  
  public boolean d()
  {
    g localG = d;
    if (localG != null) {
      return localG.i();
    }
    return false;
  }
  
  protected ViewGroup.LayoutParams generateDefaultLayoutParams()
  {
    return new ViewGroup.MarginLayoutParams(-1, -2);
  }
  
  public ViewGroup.LayoutParams generateLayoutParams(AttributeSet paramAttributeSet)
  {
    return new ViewGroup.MarginLayoutParams(getContext(), paramAttributeSet);
  }
  
  public CharSequence getSubtitle()
  {
    return j;
  }
  
  public CharSequence getTitle()
  {
    return i;
  }
  
  public void onDetachedFromWindow()
  {
    super.onDetachedFromWindow();
    g localG = d;
    if (localG != null)
    {
      localG.e();
      d.f();
    }
  }
  
  public void onInitializeAccessibilityEvent(AccessibilityEvent paramAccessibilityEvent)
  {
    if (paramAccessibilityEvent.getEventType() == 32)
    {
      paramAccessibilityEvent.setSource(this);
      paramAccessibilityEvent.setClassName(ActionBarContextView.class.getName());
      paramAccessibilityEvent.setPackageName(getContext().getPackageName());
      paramAccessibilityEvent.setContentDescription(i);
      return;
    }
    super.onInitializeAccessibilityEvent(paramAccessibilityEvent);
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    paramBoolean = Ha.a(this);
    int i1;
    if (paramBoolean) {
      i1 = paramInt3 - paramInt1 - getPaddingRight();
    } else {
      i1 = getPaddingLeft();
    }
    int i2 = getPaddingTop();
    int i3 = paramInt4 - paramInt2 - getPaddingTop() - getPaddingBottom();
    Object localObject = k;
    if ((localObject != null) && (((View)localObject).getVisibility() != 8))
    {
      localObject = (ViewGroup.MarginLayoutParams)k.getLayoutParams();
      if (paramBoolean) {
        paramInt2 = rightMargin;
      } else {
        paramInt2 = leftMargin;
      }
      if (paramBoolean) {
        paramInt4 = leftMargin;
      } else {
        paramInt4 = rightMargin;
      }
      paramInt2 = a.a(i1, paramInt2, paramBoolean);
      paramInt2 = a.a(paramInt2 + a(k, paramInt2, i2, i3, paramBoolean), paramInt4, paramBoolean);
    }
    else
    {
      paramInt2 = i1;
    }
    localObject = m;
    paramInt4 = paramInt2;
    if (localObject != null)
    {
      paramInt4 = paramInt2;
      if (l == null)
      {
        paramInt4 = paramInt2;
        if (((LinearLayout)localObject).getVisibility() != 8) {
          paramInt4 = paramInt2 + a(m, paramInt2, i2, i3, paramBoolean);
        }
      }
    }
    localObject = l;
    if (localObject != null) {
      a((View)localObject, paramInt4, i2, i3, paramBoolean);
    }
    if (paramBoolean) {
      paramInt1 = getPaddingLeft();
    } else {
      paramInt1 = paramInt3 - paramInt1 - getPaddingRight();
    }
    localObject = c;
    if (localObject != null) {
      a((View)localObject, paramInt1, i2, i3, paramBoolean ^ true);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    int i1 = View.MeasureSpec.getMode(paramInt1);
    int i3 = 1073741824;
    if (i1 == 1073741824)
    {
      if (View.MeasureSpec.getMode(paramInt2) != 0)
      {
        int i6 = View.MeasureSpec.getSize(paramInt1);
        i1 = e;
        if (i1 <= 0) {
          i1 = View.MeasureSpec.getSize(paramInt2);
        }
        int i7 = getPaddingTop() + getPaddingBottom();
        paramInt1 = i6 - getPaddingLeft() - getPaddingRight();
        int i5 = i1 - i7;
        int i2 = View.MeasureSpec.makeMeasureSpec(i5, Integer.MIN_VALUE);
        localObject = k;
        int i4 = 0;
        paramInt2 = paramInt1;
        if (localObject != null)
        {
          paramInt1 = a((View)localObject, paramInt1, i2, 0);
          localObject = (ViewGroup.MarginLayoutParams)k.getLayoutParams();
          paramInt2 = paramInt1 - (leftMargin + rightMargin);
        }
        localObject = c;
        paramInt1 = paramInt2;
        if (localObject != null)
        {
          paramInt1 = paramInt2;
          if (((ViewGroup)localObject).getParent() == this) {
            paramInt1 = a(c, paramInt2, i2, 0);
          }
        }
        localObject = m;
        paramInt2 = paramInt1;
        int i8;
        if (localObject != null)
        {
          paramInt2 = paramInt1;
          if (l == null) {
            if (r)
            {
              paramInt2 = View.MeasureSpec.makeMeasureSpec(0, 0);
              m.measure(paramInt2, i2);
              i8 = m.getMeasuredWidth();
              if (i8 <= paramInt1) {
                i2 = 1;
              } else {
                i2 = 0;
              }
              paramInt2 = paramInt1;
              if (i2 != 0) {
                paramInt2 = paramInt1 - i8;
              }
              localObject = m;
              if (i2 != 0) {
                paramInt1 = 0;
              } else {
                paramInt1 = 8;
              }
              ((LinearLayout)localObject).setVisibility(paramInt1);
            }
            else
            {
              paramInt2 = a((View)localObject, paramInt1, i2, 0);
            }
          }
        }
        localObject = l;
        if (localObject != null)
        {
          localObject = ((View)localObject).getLayoutParams();
          if (width != -2) {
            paramInt1 = 1073741824;
          } else {
            paramInt1 = Integer.MIN_VALUE;
          }
          i8 = width;
          i2 = paramInt2;
          if (i8 >= 0) {
            i2 = Math.min(i8, paramInt2);
          }
          if (height != -2) {
            paramInt2 = i3;
          } else {
            paramInt2 = Integer.MIN_VALUE;
          }
          i8 = height;
          i3 = i5;
          if (i8 >= 0) {
            i3 = Math.min(i8, i5);
          }
          l.measure(View.MeasureSpec.makeMeasureSpec(i2, paramInt1), View.MeasureSpec.makeMeasureSpec(i3, paramInt2));
        }
        if (e <= 0)
        {
          i3 = getChildCount();
          paramInt2 = 0;
          paramInt1 = i4;
          while (paramInt1 < i3)
          {
            i2 = getChildAt(paramInt1).getMeasuredHeight() + i7;
            i1 = paramInt2;
            if (i2 > paramInt2) {
              i1 = i2;
            }
            paramInt1 += 1;
            paramInt2 = i1;
          }
          setMeasuredDimension(i6, paramInt2);
          return;
        }
        setMeasuredDimension(i6, i1);
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append(ActionBarContextView.class.getSimpleName());
      ((StringBuilder)localObject).append(" can only be used ");
      ((StringBuilder)localObject).append("with android:layout_height=\"wrap_content\"");
      throw new IllegalStateException(((StringBuilder)localObject).toString());
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append(ActionBarContextView.class.getSimpleName());
    ((StringBuilder)localObject).append(" can only be used ");
    ((StringBuilder)localObject).append("with android:layout_width=\"match_parent\" (or fill_parent)");
    localObject = new IllegalStateException(((StringBuilder)localObject).toString());
    for (;;)
    {
      throw ((Throwable)localObject);
    }
  }
  
  public void setContentHeight(int paramInt)
  {
    e = paramInt;
  }
  
  public void setCustomView(View paramView)
  {
    Object localObject = l;
    if (localObject != null) {
      removeView((View)localObject);
    }
    l = paramView;
    if (paramView != null)
    {
      localObject = m;
      if (localObject != null)
      {
        removeView((View)localObject);
        m = null;
      }
    }
    if (paramView != null) {
      addView(paramView);
    }
    requestLayout();
  }
  
  public void setSubtitle(CharSequence paramCharSequence)
  {
    j = paramCharSequence;
    e();
  }
  
  public void setTitle(CharSequence paramCharSequence)
  {
    i = paramCharSequence;
    e();
  }
  
  public void setTitleOptional(boolean paramBoolean)
  {
    if (paramBoolean != r) {
      requestLayout();
    }
    r = paramBoolean;
  }
  
  public boolean shouldDelayChildPressedState()
  {
    return false;
  }
}
