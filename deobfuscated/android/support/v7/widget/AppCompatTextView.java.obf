package android.support.v7.widget;

import a.a.c.e.a;
import a.a.c.e.a.a;
import a.a.c.g.s;
import android.content.Context;
import android.content.res.ColorStateList;
import android.graphics.PorterDuff.Mode;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.support.v4.widget.b;
import android.support.v4.widget.m;
import android.util.AttributeSet;
import android.view.ActionMode.Callback;
import android.view.inputmethod.EditorInfo;
import android.view.inputmethod.InputConnection;
import android.widget.TextView;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.Future;

public class I
  extends TextView
  implements s, b
{
  private final j a = new j(this);
  private final H b;
  private Future<a> c;
  
  public I(Context paramContext)
  {
    this(paramContext, null);
  }
  
  public I(Context paramContext, AttributeSet paramAttributeSet)
  {
    this(paramContext, paramAttributeSet, 16842884);
  }
  
  public I(Context paramContext, AttributeSet paramAttributeSet, int paramInt)
  {
    super(qa.a(paramContext), paramAttributeSet, paramInt);
    a.a(paramAttributeSet, paramInt);
    b = new H(this);
    b.a(paramAttributeSet, paramInt);
    b.a();
  }
  
  private void d()
  {
    Future localFuture = c;
    if (localFuture != null) {}
    try
    {
      c = null;
      m.a(this, (a)localFuture.get());
      return;
    }
    catch (InterruptedException|ExecutionException localInterruptedException) {}
  }
  
  protected void drawableStateChanged()
  {
    super.drawableStateChanged();
    Object localObject = a;
    if (localObject != null) {
      ((j)localObject).a();
    }
    localObject = b;
    if (localObject != null) {
      ((H)localObject).a();
    }
  }
  
  public int getAutoSizeMaxTextSize()
  {
    if (b.a) {
      return super.getAutoSizeMaxTextSize();
    }
    H localH = b;
    if (localH != null) {
      return localH.c();
    }
    return -1;
  }
  
  public int getAutoSizeMinTextSize()
  {
    if (b.a) {
      return super.getAutoSizeMinTextSize();
    }
    H localH = b;
    if (localH != null) {
      return localH.d();
    }
    return -1;
  }
  
  public int getAutoSizeStepGranularity()
  {
    if (b.a) {
      return super.getAutoSizeStepGranularity();
    }
    H localH = b;
    if (localH != null) {
      return localH.e();
    }
    return -1;
  }
  
  public int[] getAutoSizeTextAvailableSizes()
  {
    if (b.a) {
      return super.getAutoSizeTextAvailableSizes();
    }
    H localH = b;
    if (localH != null) {
      return localH.f();
    }
    return new int[0];
  }
  
  public int getAutoSizeTextType()
  {
    boolean bool = b.a;
    int i = 0;
    if (bool)
    {
      if (super.getAutoSizeTextType() == 1) {
        i = 1;
      }
      return i;
    }
    H localH = b;
    if (localH != null) {
      return localH.g();
    }
    return 0;
  }
  
  public int getFirstBaselineToTopHeight()
  {
    return m.a(this);
  }
  
  public int getLastBaselineToBottomHeight()
  {
    return m.b(this);
  }
  
  public ColorStateList getSupportBackgroundTintList()
  {
    j localJ = a;
    if (localJ != null) {
      return localJ.b();
    }
    return null;
  }
  
  public PorterDuff.Mode getSupportBackgroundTintMode()
  {
    j localJ = a;
    if (localJ != null) {
      return localJ.c();
    }
    return null;
  }
  
  public CharSequence getText()
  {
    d();
    return super.getText();
  }
  
  public a.a getTextMetricsParamsCompat()
  {
    return m.c(this);
  }
  
  public InputConnection onCreateInputConnection(EditorInfo paramEditorInfo)
  {
    InputConnection localInputConnection = super.onCreateInputConnection(paramEditorInfo);
    q.a(localInputConnection, paramEditorInfo, this);
    return localInputConnection;
  }
  
  protected void onLayout(boolean paramBoolean, int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    super.onLayout(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    H localH = b;
    if (localH != null) {
      localH.a(paramBoolean, paramInt1, paramInt2, paramInt3, paramInt4);
    }
  }
  
  protected void onMeasure(int paramInt1, int paramInt2)
  {
    d();
    super.onMeasure(paramInt1, paramInt2);
  }
  
  protected void onTextChanged(CharSequence paramCharSequence, int paramInt1, int paramInt2, int paramInt3)
  {
    super.onTextChanged(paramCharSequence, paramInt1, paramInt2, paramInt3);
    paramCharSequence = b;
    if ((paramCharSequence != null) && (!b.a) && (paramCharSequence.h())) {
      b.b();
    }
  }
  
  public void setAutoSizeTextTypeUniformWithConfiguration(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (b.a)
    {
      super.setAutoSizeTextTypeUniformWithConfiguration(paramInt1, paramInt2, paramInt3, paramInt4);
      return;
    }
    H localH = b;
    if (localH != null) {
      localH.a(paramInt1, paramInt2, paramInt3, paramInt4);
    }
  }
  
  public void setAutoSizeTextTypeUniformWithPresetSizes(int[] paramArrayOfInt, int paramInt)
  {
    if (b.a)
    {
      super.setAutoSizeTextTypeUniformWithPresetSizes(paramArrayOfInt, paramInt);
      return;
    }
    H localH = b;
    if (localH != null) {
      localH.a(paramArrayOfInt, paramInt);
    }
  }
  
  public void setAutoSizeTextTypeWithDefaults(int paramInt)
  {
    if (b.a)
    {
      super.setAutoSizeTextTypeWithDefaults(paramInt);
      return;
    }
    H localH = b;
    if (localH != null) {
      localH.a(paramInt);
    }
  }
  
  public void setBackgroundDrawable(Drawable paramDrawable)
  {
    super.setBackgroundDrawable(paramDrawable);
    j localJ = a;
    if (localJ != null) {
      localJ.a(paramDrawable);
    }
  }
  
  public void setBackgroundResource(int paramInt)
  {
    super.setBackgroundResource(paramInt);
    j localJ = a;
    if (localJ != null) {
      localJ.a(paramInt);
    }
  }
  
  public void setCustomSelectionActionModeCallback(ActionMode.Callback paramCallback)
  {
    super.setCustomSelectionActionModeCallback(m.a(this, paramCallback));
  }
  
  public void setFirstBaselineToTopHeight(int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 28)
    {
      super.setFirstBaselineToTopHeight(paramInt);
      return;
    }
    m.a(this, paramInt);
  }
  
  public void setLastBaselineToBottomHeight(int paramInt)
  {
    if (Build.VERSION.SDK_INT >= 28)
    {
      super.setLastBaselineToBottomHeight(paramInt);
      return;
    }
    m.b(this, paramInt);
  }
  
  public void setLineHeight(int paramInt)
  {
    m.c(this, paramInt);
  }
  
  public void setPrecomputedText(a paramA)
  {
    m.a(this, paramA);
  }
  
  public void setSupportBackgroundTintList(ColorStateList paramColorStateList)
  {
    j localJ = a;
    if (localJ != null) {
      localJ.b(paramColorStateList);
    }
  }
  
  public void setSupportBackgroundTintMode(PorterDuff.Mode paramMode)
  {
    j localJ = a;
    if (localJ != null) {
      localJ.a(paramMode);
    }
  }
  
  public void setTextAppearance(Context paramContext, int paramInt)
  {
    super.setTextAppearance(paramContext, paramInt);
    H localH = b;
    if (localH != null) {
      localH.a(paramContext, paramInt);
    }
  }
  
  public void setTextFuture(Future<a> paramFuture)
  {
    c = paramFuture;
    requestLayout();
  }
  
  public void setTextMetricsParamsCompat(a.a paramA)
  {
    m.a(this, paramA);
  }
  
  public void setTextSize(int paramInt, float paramFloat)
  {
    if (b.a)
    {
      super.setTextSize(paramInt, paramFloat);
      return;
    }
    H localH = b;
    if (localH != null) {
      localH.a(paramInt, paramFloat);
    }
  }
}
