package android.support.v7.view.menu;

import a.a.d.a.d;
import a.a.d.a.g;
import android.content.Context;
import android.content.res.Resources;
import android.support.v7.widget.U;
import android.support.v7.widget.W;
import android.util.DisplayMetrics;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnAttachStateChangeListener;
import android.view.View.OnKeyListener;
import android.view.ViewGroup;
import android.view.ViewTreeObserver;
import android.view.ViewTreeObserver.OnGlobalLayoutListener;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.FrameLayout;
import android.widget.ListView;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.TextView;

final class C
  extends s
  implements PopupWindow.OnDismissListener, AdapterView.OnItemClickListener, v, View.OnKeyListener
{
  private static final int b = g.abc_popup_menu_item_layout;
  private final Context c;
  private final l d;
  private final k e;
  private final boolean f;
  private final int g;
  private final int h;
  private final int i;
  final W j;
  final ViewTreeObserver.OnGlobalLayoutListener k = new A(this);
  private final View.OnAttachStateChangeListener l = new B(this);
  private PopupWindow.OnDismissListener m;
  private View n;
  View o;
  private v.a p;
  ViewTreeObserver q;
  private boolean r;
  private boolean s;
  private int t;
  private int u = 0;
  private boolean v;
  
  public C(Context paramContext, l paramL, View paramView, int paramInt1, int paramInt2, boolean paramBoolean)
  {
    c = paramContext;
    d = paramL;
    f = paramBoolean;
    e = new k(paramL, LayoutInflater.from(paramContext), f, b);
    h = paramInt1;
    i = paramInt2;
    Resources localResources = paramContext.getResources();
    g = Math.max(getDisplayMetricswidthPixels / 2, localResources.getDimensionPixelSize(d.abc_config_prefDialogWidth));
    n = paramView;
    j = new W(c, null, h, i);
    paramL.a(this, paramContext);
  }
  
  private boolean g()
  {
    if (b()) {
      return true;
    }
    if (!r)
    {
      Object localObject = n;
      if (localObject == null) {
        return false;
      }
      o = ((View)localObject);
      j.a(this);
      j.a(this);
      j.a(true);
      localObject = o;
      int i1;
      if (q == null) {
        i1 = 1;
      } else {
        i1 = 0;
      }
      q = ((View)localObject).getViewTreeObserver();
      if (i1 != 0) {
        q.addOnGlobalLayoutListener(k);
      }
      ((View)localObject).addOnAttachStateChangeListener(l);
      j.a((View)localObject);
      j.c(u);
      if (!s)
      {
        t = s.a(e, null, c, g);
        s = true;
      }
      j.b(t);
      j.e(2);
      j.a(f());
      j.c();
      localObject = j.d();
      ((ListView)localObject).setOnKeyListener(this);
      if ((v) && (d.h() != null))
      {
        FrameLayout localFrameLayout = (FrameLayout)LayoutInflater.from(c).inflate(g.abc_popup_menu_header_item_layout, (ViewGroup)localObject, false);
        TextView localTextView = (TextView)localFrameLayout.findViewById(16908310);
        if (localTextView != null) {
          localTextView.setText(d.h());
        }
        localFrameLayout.setEnabled(false);
        ((ListView)localObject).addHeaderView(localFrameLayout, null, false);
      }
      j.a(e);
      j.c();
      return true;
    }
    return false;
  }
  
  public void a(int paramInt)
  {
    u = paramInt;
  }
  
  public void a(l paramL) {}
  
  public void a(l paramL, boolean paramBoolean)
  {
    if (paramL != d) {
      return;
    }
    dismiss();
    v.a localA = p;
    if (localA != null) {
      localA.a(paramL, paramBoolean);
    }
  }
  
  public void a(v.a paramA)
  {
    p = paramA;
  }
  
  public void a(View paramView)
  {
    n = paramView;
  }
  
  public void a(PopupWindow.OnDismissListener paramOnDismissListener)
  {
    m = paramOnDismissListener;
  }
  
  public void a(boolean paramBoolean)
  {
    s = false;
    k localK = e;
    if (localK != null) {
      localK.notifyDataSetChanged();
    }
  }
  
  public boolean a()
  {
    return false;
  }
  
  public boolean a(D paramD)
  {
    if (paramD.hasVisibleItems())
    {
      Object localObject = new u(c, paramD, o, f, h, i);
      ((u)localObject).a(p);
      ((u)localObject).a(s.b(paramD));
      ((u)localObject).a(m);
      m = null;
      d.a(false);
      int i2 = j.g();
      int i3 = j.h();
      int i1 = i2;
      if ((Gravity.getAbsoluteGravity(u, a.a.c.g.u.d(n)) & 0x7) == 5) {
        i1 = i2 + n.getWidth();
      }
      if (((u)localObject).a(i1, i3))
      {
        localObject = p;
        if (localObject != null) {
          ((v.a)localObject).a(paramD);
        }
        return true;
      }
    }
    return false;
  }
  
  public void b(int paramInt)
  {
    j.d(paramInt);
  }
  
  public void b(boolean paramBoolean)
  {
    e.a(paramBoolean);
  }
  
  public boolean b()
  {
    return (!r) && (j.b());
  }
  
  public void c()
  {
    if (g()) {
      return;
    }
    throw new IllegalStateException("StandardMenuPopup cannot be used without an anchor");
  }
  
  public void c(int paramInt)
  {
    j.h(paramInt);
  }
  
  public void c(boolean paramBoolean)
  {
    v = paramBoolean;
  }
  
  public ListView d()
  {
    return j.d();
  }
  
  public void dismiss()
  {
    if (b()) {
      j.dismiss();
    }
  }
  
  public void onDismiss()
  {
    r = true;
    d.close();
    Object localObject = q;
    if (localObject != null)
    {
      if (!((ViewTreeObserver)localObject).isAlive()) {
        q = o.getViewTreeObserver();
      }
      q.removeGlobalOnLayoutListener(k);
      q = null;
    }
    o.removeOnAttachStateChangeListener(l);
    localObject = m;
    if (localObject != null) {
      ((PopupWindow.OnDismissListener)localObject).onDismiss();
    }
  }
  
  public boolean onKey(View paramView, int paramInt, KeyEvent paramKeyEvent)
  {
    if ((paramKeyEvent.getAction() == 1) && (paramInt == 82))
    {
      dismiss();
      return true;
    }
    return false;
  }
}
