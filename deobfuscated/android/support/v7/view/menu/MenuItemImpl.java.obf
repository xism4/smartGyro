package android.support.v7.view.menu;

import a.a.c.c.a.b;
import a.a.c.g.e;
import a.a.d.a.h;
import android.content.ActivityNotFoundException;
import android.content.Context;
import android.content.Intent;
import android.content.res.ColorStateList;
import android.content.res.Resources;
import android.graphics.PorterDuff.Mode;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.util.Log;
import android.view.ActionProvider;
import android.view.ContextMenu.ContextMenuInfo;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.MenuItem.OnActionExpandListener;
import android.view.MenuItem.OnMenuItemClickListener;
import android.view.SubMenu;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewDebug.CapturedViewProperty;
import android.widget.LinearLayout;

public final class p
  implements b
{
  private View A;
  private e B;
  private MenuItem.OnActionExpandListener C;
  private boolean D = false;
  private ContextMenu.ContextMenuInfo E;
  private final int a;
  private final int b;
  private final int c;
  private final int d;
  private CharSequence e;
  private CharSequence f;
  private Intent g;
  private char h;
  private int i = 4096;
  private char j;
  private int k = 4096;
  private Drawable l;
  private int m = 0;
  l n;
  private D o;
  private Runnable p;
  private MenuItem.OnMenuItemClickListener q;
  private CharSequence r;
  private CharSequence s;
  private ColorStateList t = null;
  private PorterDuff.Mode u = null;
  private boolean v = false;
  private boolean w = false;
  private boolean x = false;
  private int y = 16;
  private int z = 0;
  
  p(l paramL, int paramInt1, int paramInt2, int paramInt3, int paramInt4, CharSequence paramCharSequence, int paramInt5)
  {
    n = paramL;
    a = paramInt2;
    b = paramInt1;
    c = paramInt3;
    d = paramInt4;
    e = paramCharSequence;
    z = paramInt5;
  }
  
  private Drawable a(Drawable paramDrawable)
  {
    Drawable localDrawable = paramDrawable;
    if (paramDrawable != null)
    {
      localDrawable = paramDrawable;
      if (x) {
        if (!v)
        {
          localDrawable = paramDrawable;
          if (!w) {}
        }
        else
        {
          localDrawable = android.support.v4.graphics.drawable.a.g(paramDrawable).mutate();
          if (v) {
            android.support.v4.graphics.drawable.a.a(localDrawable, t);
          }
          if (w) {
            android.support.v4.graphics.drawable.a.a(localDrawable, u);
          }
          x = false;
        }
      }
    }
    return localDrawable;
  }
  
  private static void a(StringBuilder paramStringBuilder, int paramInt1, int paramInt2, String paramString)
  {
    if ((paramInt1 & paramInt2) == paramInt2) {
      paramStringBuilder.append(paramString);
    }
  }
  
  public b a(e paramE)
  {
    e localE = B;
    if (localE != null) {
      localE.f();
    }
    A = null;
    B = paramE;
    n.b(true);
    paramE = B;
    if (paramE != null) {
      paramE.a(new o(this));
    }
    return this;
  }
  
  public e a()
  {
    return B;
  }
  
  CharSequence a(w.a paramA)
  {
    if ((paramA != null) && (paramA.c())) {
      return getTitleCondensed();
    }
    return getTitle();
  }
  
  public void a(D paramD)
  {
    o = paramD;
    paramD.setHeaderTitle(getTitle());
  }
  
  void a(ContextMenu.ContextMenuInfo paramContextMenuInfo)
  {
    E = paramContextMenuInfo;
  }
  
  public void a(boolean paramBoolean)
  {
    D = paramBoolean;
    n.b(false);
  }
  
  public void b()
  {
    n.c(this);
  }
  
  void b(boolean paramBoolean)
  {
    int i2 = y;
    int i1;
    if (paramBoolean) {
      i1 = 2;
    } else {
      i1 = 0;
    }
    y = (i1 | i2 & 0xFFFFFFFD);
    if (i2 != y) {
      n.b(false);
    }
  }
  
  public int c()
  {
    return d;
  }
  
  public void c(boolean paramBoolean)
  {
    int i2 = y;
    int i1;
    if (paramBoolean) {
      i1 = 4;
    } else {
      i1 = 0;
    }
    y = (i1 | i2 & 0xFFFFFFFB);
  }
  
  public boolean collapseActionView()
  {
    if ((z & 0x8) == 0) {
      return false;
    }
    if (A == null) {
      return true;
    }
    MenuItem.OnActionExpandListener localOnActionExpandListener = C;
    if ((localOnActionExpandListener != null) && (!localOnActionExpandListener.onMenuItemActionCollapse(this))) {
      return false;
    }
    return n.a(this);
  }
  
  char d()
  {
    if (n.p()) {
      return j;
    }
    return h;
  }
  
  public void d(boolean paramBoolean)
  {
    int i1;
    if (paramBoolean) {
      i1 = y | 0x20;
    } else {
      i1 = y & 0xFFFFFFDF;
    }
    y = i1;
  }
  
  String e()
  {
    char c1 = d();
    if (c1 == 0) {
      return "";
    }
    Resources localResources = n.e().getResources();
    StringBuilder localStringBuilder = new StringBuilder();
    if (ViewConfiguration.get(n.e()).hasPermanentMenuKey()) {
      localStringBuilder.append(localResources.getString(h.abc_prepend_shortcut_label));
    }
    int i1;
    if (n.p()) {
      i1 = k;
    } else {
      i1 = i;
    }
    a(localStringBuilder, i1, 65536, localResources.getString(h.abc_menu_meta_shortcut_label));
    a(localStringBuilder, i1, 4096, localResources.getString(h.abc_menu_ctrl_shortcut_label));
    a(localStringBuilder, i1, 2, localResources.getString(h.abc_menu_alt_shortcut_label));
    a(localStringBuilder, i1, 1, localResources.getString(h.abc_menu_shift_shortcut_label));
    a(localStringBuilder, i1, 4, localResources.getString(h.abc_menu_sym_shortcut_label));
    a(localStringBuilder, i1, 8, localResources.getString(h.abc_menu_function_shortcut_label));
    if (c1 != '\b')
    {
      if (c1 != '\n')
      {
        if (c1 != ' ')
        {
          localStringBuilder.append(c1);
          break label229;
        }
        i1 = h.abc_menu_space_shortcut_label;
      }
      else
      {
        i1 = h.abc_menu_enter_shortcut_label;
      }
    }
    else {
      i1 = h.abc_menu_delete_shortcut_label;
    }
    localStringBuilder.append(localResources.getString(i1));
    label229:
    return localStringBuilder.toString();
  }
  
  boolean e(boolean paramBoolean)
  {
    int i2 = y;
    boolean bool = false;
    int i1;
    if (paramBoolean) {
      i1 = 0;
    } else {
      i1 = 8;
    }
    y = (i1 | i2 & 0xFFFFFFF7);
    paramBoolean = bool;
    if (i2 != y) {
      paramBoolean = true;
    }
    return paramBoolean;
  }
  
  public boolean expandActionView()
  {
    if (!f()) {
      return false;
    }
    MenuItem.OnActionExpandListener localOnActionExpandListener = C;
    if ((localOnActionExpandListener != null) && (!localOnActionExpandListener.onMenuItemActionExpand(this))) {
      return false;
    }
    return n.b(this);
  }
  
  public boolean f()
  {
    int i1 = z;
    boolean bool2 = false;
    boolean bool1 = bool2;
    if ((i1 & 0x8) != 0)
    {
      if (A == null)
      {
        e localE = B;
        if (localE != null) {
          A = localE.a(this);
        }
      }
      bool1 = bool2;
      if (A != null) {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public boolean g()
  {
    Object localObject = q;
    if ((localObject != null) && (((MenuItem.OnMenuItemClickListener)localObject).onMenuItemClick(this))) {
      return true;
    }
    localObject = n;
    if (((l)localObject).a((l)localObject, this)) {
      return true;
    }
    localObject = p;
    if (localObject != null)
    {
      ((Runnable)localObject).run();
      return true;
    }
    if (g != null) {
      try
      {
        n.e().startActivity(g);
        return true;
      }
      catch (ActivityNotFoundException localActivityNotFoundException)
      {
        Log.e("MenuItemImpl", "Can't find activity to handle intent; ignoring", localActivityNotFoundException);
      }
    }
    e localE = B;
    return (localE != null) && (localE.d());
  }
  
  public ActionProvider getActionProvider()
  {
    throw new UnsupportedOperationException("This is not supported, use MenuItemCompat.getActionProvider()");
  }
  
  public View getActionView()
  {
    Object localObject = A;
    if (localObject != null) {
      return localObject;
    }
    localObject = B;
    if (localObject != null)
    {
      A = ((e)localObject).a(this);
      return A;
    }
    return null;
  }
  
  public int getAlphabeticModifiers()
  {
    return k;
  }
  
  public char getAlphabeticShortcut()
  {
    return j;
  }
  
  public CharSequence getContentDescription()
  {
    return r;
  }
  
  public int getGroupId()
  {
    return b;
  }
  
  public Drawable getIcon()
  {
    Drawable localDrawable = l;
    if (localDrawable != null) {
      return a(localDrawable);
    }
    if (m != 0)
    {
      localDrawable = a.a.d.b.a.a.b(n.e(), m);
      m = 0;
      l = localDrawable;
      return a(localDrawable);
    }
    return null;
  }
  
  public ColorStateList getIconTintList()
  {
    return t;
  }
  
  public PorterDuff.Mode getIconTintMode()
  {
    return u;
  }
  
  public Intent getIntent()
  {
    return g;
  }
  
  @ViewDebug.CapturedViewProperty
  public int getItemId()
  {
    return a;
  }
  
  public ContextMenu.ContextMenuInfo getMenuInfo()
  {
    return E;
  }
  
  public int getNumericModifiers()
  {
    return i;
  }
  
  public char getNumericShortcut()
  {
    return h;
  }
  
  public int getOrder()
  {
    return c;
  }
  
  public SubMenu getSubMenu()
  {
    return o;
  }
  
  @ViewDebug.CapturedViewProperty
  public CharSequence getTitle()
  {
    return e;
  }
  
  public CharSequence getTitleCondensed()
  {
    CharSequence localCharSequence = f;
    if (localCharSequence == null) {
      localCharSequence = e;
    }
    Object localObject = localCharSequence;
    if (Build.VERSION.SDK_INT < 18)
    {
      localObject = localCharSequence;
      if (localCharSequence != null)
      {
        localObject = localCharSequence;
        if (!(localCharSequence instanceof String)) {
          localObject = localCharSequence.toString();
        }
      }
    }
    return localObject;
  }
  
  public CharSequence getTooltipText()
  {
    return s;
  }
  
  public boolean h()
  {
    return (y & 0x20) == 32;
  }
  
  public boolean hasSubMenu()
  {
    return o != null;
  }
  
  public boolean i()
  {
    return (y & 0x4) != 0;
  }
  
  public boolean isActionViewExpanded()
  {
    return D;
  }
  
  public boolean isCheckable()
  {
    return (y & 0x1) == 1;
  }
  
  public boolean isChecked()
  {
    return (y & 0x2) == 2;
  }
  
  public boolean isEnabled()
  {
    return (y & 0x10) != 0;
  }
  
  public boolean isVisible()
  {
    e localE = B;
    if ((localE != null) && (localE.e())) {
      return ((y & 0x8) == 0) && (B.b());
    }
    return (y & 0x8) == 0;
  }
  
  public boolean j()
  {
    return (z & 0x1) == 1;
  }
  
  public boolean k()
  {
    return (z & 0x2) == 2;
  }
  
  public boolean l()
  {
    return n.k();
  }
  
  boolean m()
  {
    return (n.q()) && (d() != 0);
  }
  
  public boolean n()
  {
    return (z & 0x4) == 4;
  }
  
  public MenuItem setActionProvider(ActionProvider paramActionProvider)
  {
    throw new UnsupportedOperationException("This is not supported, use MenuItemCompat.setActionProvider()");
  }
  
  public b setActionView(int paramInt)
  {
    Context localContext = n.e();
    setActionView(LayoutInflater.from(localContext).inflate(paramInt, new LinearLayout(localContext), false));
    return this;
  }
  
  public b setActionView(View paramView)
  {
    A = paramView;
    B = null;
    if ((paramView != null) && (paramView.getId() == -1))
    {
      int i1 = a;
      if (i1 > 0) {
        paramView.setId(i1);
      }
    }
    n.c(this);
    return this;
  }
  
  public MenuItem setAlphabeticShortcut(char paramChar)
  {
    if (j == paramChar) {
      return this;
    }
    j = Character.toLowerCase(paramChar);
    n.b(false);
    return this;
  }
  
  public MenuItem setAlphabeticShortcut(char paramChar, int paramInt)
  {
    if ((j == paramChar) && (k == paramInt)) {
      return this;
    }
    j = Character.toLowerCase(paramChar);
    k = KeyEvent.normalizeMetaState(paramInt);
    n.b(false);
    return this;
  }
  
  public MenuItem setCheckable(boolean paramBoolean)
  {
    int i1 = y;
    y = (paramBoolean | i1 & 0xFFFFFFFE);
    if (i1 != y) {
      n.b(false);
    }
    return this;
  }
  
  public MenuItem setChecked(boolean paramBoolean)
  {
    if ((y & 0x4) != 0)
    {
      n.a(this);
      return this;
    }
    b(paramBoolean);
    return this;
  }
  
  public b setContentDescription(CharSequence paramCharSequence)
  {
    r = paramCharSequence;
    n.b(false);
    return this;
  }
  
  public MenuItem setEnabled(boolean paramBoolean)
  {
    int i1;
    if (paramBoolean) {
      i1 = y | 0x10;
    } else {
      i1 = y & 0xFFFFFFEF;
    }
    y = i1;
    n.b(false);
    return this;
  }
  
  public MenuItem setIcon(int paramInt)
  {
    l = null;
    m = paramInt;
    x = true;
    n.b(false);
    return this;
  }
  
  public MenuItem setIcon(Drawable paramDrawable)
  {
    m = 0;
    l = paramDrawable;
    x = true;
    n.b(false);
    return this;
  }
  
  public MenuItem setIconTintList(ColorStateList paramColorStateList)
  {
    t = paramColorStateList;
    v = true;
    x = true;
    n.b(false);
    return this;
  }
  
  public MenuItem setIconTintMode(PorterDuff.Mode paramMode)
  {
    u = paramMode;
    w = true;
    x = true;
    n.b(false);
    return this;
  }
  
  public MenuItem setIntent(Intent paramIntent)
  {
    g = paramIntent;
    return this;
  }
  
  public MenuItem setNumericShortcut(char paramChar)
  {
    if (h == paramChar) {
      return this;
    }
    h = paramChar;
    n.b(false);
    return this;
  }
  
  public MenuItem setNumericShortcut(char paramChar, int paramInt)
  {
    if ((h == paramChar) && (i == paramInt)) {
      return this;
    }
    h = paramChar;
    i = KeyEvent.normalizeMetaState(paramInt);
    n.b(false);
    return this;
  }
  
  public MenuItem setOnActionExpandListener(MenuItem.OnActionExpandListener paramOnActionExpandListener)
  {
    C = paramOnActionExpandListener;
    return this;
  }
  
  public MenuItem setOnMenuItemClickListener(MenuItem.OnMenuItemClickListener paramOnMenuItemClickListener)
  {
    q = paramOnMenuItemClickListener;
    return this;
  }
  
  public MenuItem setShortcut(char paramChar1, char paramChar2)
  {
    h = paramChar1;
    j = Character.toLowerCase(paramChar2);
    n.b(false);
    return this;
  }
  
  public MenuItem setShortcut(char paramChar1, char paramChar2, int paramInt1, int paramInt2)
  {
    h = paramChar1;
    i = KeyEvent.normalizeMetaState(paramInt1);
    j = Character.toLowerCase(paramChar2);
    k = KeyEvent.normalizeMetaState(paramInt2);
    n.b(false);
    return this;
  }
  
  public void setShowAsAction(int paramInt)
  {
    int i1 = paramInt & 0x3;
    if ((i1 != 0) && (i1 != 1) && (i1 != 2)) {
      throw new IllegalArgumentException("SHOW_AS_ACTION_ALWAYS, SHOW_AS_ACTION_IF_ROOM, and SHOW_AS_ACTION_NEVER are mutually exclusive.");
    }
    z = paramInt;
    n.c(this);
  }
  
  public b setShowAsActionFlags(int paramInt)
  {
    setShowAsAction(paramInt);
    return this;
  }
  
  public MenuItem setTitle(int paramInt)
  {
    setTitle(n.e().getString(paramInt));
    return this;
  }
  
  public MenuItem setTitle(CharSequence paramCharSequence)
  {
    e = paramCharSequence;
    n.b(false);
    D localD = o;
    if (localD != null) {
      localD.setHeaderTitle(paramCharSequence);
    }
    return this;
  }
  
  public MenuItem setTitleCondensed(CharSequence paramCharSequence)
  {
    f = paramCharSequence;
    if (paramCharSequence == null) {
      paramCharSequence = e;
    }
    n.b(false);
    return this;
  }
  
  public b setTooltipText(CharSequence paramCharSequence)
  {
    s = paramCharSequence;
    n.b(false);
    return this;
  }
  
  public MenuItem setVisible(boolean paramBoolean)
  {
    if (e(paramBoolean)) {
      n.d(this);
    }
    return this;
  }
  
  public String toString()
  {
    CharSequence localCharSequence = e;
    if (localCharSequence != null) {
      return localCharSequence.toString();
    }
    return null;
  }
}
