package a.a.c.d;

import android.os.Handler;
import android.os.Handler.Callback;
import android.os.HandlerThread;
import java.util.concurrent.Callable;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicReference;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.ReentrantLock;

public class k
{
  private final Object a = new Object();
  private HandlerThread b;
  private Handler c;
  private int d;
  private Handler.Callback e = new g(this);
  private final int f;
  private final int g;
  private final String h;
  
  public k(String paramString, int paramInt1, int paramInt2)
  {
    h = paramString;
    g = paramInt1;
    f = paramInt2;
    d = 0;
  }
  
  private void b(Runnable paramRunnable)
  {
    synchronized (a)
    {
      if (b == null)
      {
        b = new HandlerThread(h, g);
        b.start();
        c = new Handler(b.getLooper(), e);
        d += 1;
      }
      c.removeMessages(0);
      c.sendMessage(c.obtainMessage(1, paramRunnable));
      return;
    }
  }
  
  public <T> T a(Callable<T> paramCallable, int paramInt)
  {
    localReentrantLock = new ReentrantLock();
    Condition localCondition = localReentrantLock.newCondition();
    AtomicReference localAtomicReference = new AtomicReference();
    AtomicBoolean localAtomicBoolean = new AtomicBoolean(true);
    b(new j(this, localAtomicReference, paramCallable, localReentrantLock, localAtomicBoolean, localCondition));
    localReentrantLock.lock();
    label104:
    do
    {
      try
      {
        if (!localAtomicBoolean.get())
        {
          paramCallable = localAtomicReference.get();
          localReentrantLock.unlock();
          return paramCallable;
        }
        l1 = TimeUnit.MILLISECONDS.toNanos(paramInt);
      }
      finally
      {
        long l1;
        long l2;
        localReentrantLock.unlock();
        for (;;)
        {
          throw paramCallable;
        }
      }
      try
      {
        l2 = localCondition.awaitNanos(l1);
        l1 = l2;
      }
      catch (InterruptedException paramCallable)
      {
        break label104;
      }
      if (!localAtomicBoolean.get())
      {
        paramCallable = localAtomicReference.get();
        localReentrantLock.unlock();
        return paramCallable;
      }
    } while (l1 > 0L);
    throw new InterruptedException("timeout");
  }
  
  void a()
  {
    synchronized (a)
    {
      if (c.hasMessages(1)) {
        return;
      }
      b.quit();
      b = null;
      c = null;
      return;
    }
  }
  
  void a(Runnable arg1)
  {
    ???.run();
    synchronized (a)
    {
      c.removeMessages(0);
      c.sendMessageDelayed(c.obtainMessage(0), f);
      return;
    }
  }
  
  public <T> void a(Callable<T> paramCallable, a<T> paramA)
  {
    b(new i(this, paramCallable, new Handler(), paramA));
  }
  
  public static abstract interface a<T>
  {
    public abstract void a(T paramT);
  }
}
