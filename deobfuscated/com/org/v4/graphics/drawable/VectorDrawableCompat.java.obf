package a.a.d.c.a;

import a.a.b.a.k;
import a.a.c.a.a.i;
import a.a.d.b.a.a;
import android.animation.ObjectAnimator;
import android.animation.TimeInterpolator;
import android.content.Context;
import android.content.res.Resources;
import android.content.res.Resources.Theme;
import android.content.res.TypedArray;
import android.graphics.drawable.Animatable;
import android.graphics.drawable.AnimationDrawable;
import android.graphics.drawable.Drawable;
import android.os.Build.VERSION;
import android.util.AttributeSet;
import android.util.StateSet;
import org.xmlpull.v1.XmlPullParser;
import org.xmlpull.v1.XmlPullParserException;

public class b
  extends f
{
  private b p;
  private f q;
  private int r = -1;
  private int s = -1;
  private boolean t;
  
  public b()
  {
    this(null, null);
  }
  
  b(b paramB, Resources paramResources)
  {
    super(null);
    a(new b(paramB, this, paramResources));
    onStateChange(getState());
    jumpToCurrentState();
  }
  
  public static b a(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    Object localObject = paramXmlPullParser.getName();
    if (((String)localObject).equals("animated-selector"))
    {
      localObject = new b();
      ((b)localObject).b(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
      return localObject;
    }
    paramContext = new StringBuilder();
    paramContext.append(paramXmlPullParser.getPositionDescription());
    paramContext.append(": invalid animated-selector tag ");
    paramContext.append((String)localObject);
    throw new XmlPullParserException(paramContext.toString());
  }
  
  private void a(TypedArray paramTypedArray)
  {
    b localB = p;
    if (Build.VERSION.SDK_INT >= 21) {
      d |= paramTypedArray.getChangingConfigurations();
    }
    localB.b(paramTypedArray.getBoolean(a.a.d.a.j.AnimatedStateListDrawableCompat_android_variablePadding, i));
    localB.a(paramTypedArray.getBoolean(a.a.d.a.j.AnimatedStateListDrawableCompat_android_constantSize, l));
    localB.b(paramTypedArray.getInt(a.a.d.a.j.AnimatedStateListDrawableCompat_android_enterFadeDuration, A));
    localB.c(paramTypedArray.getInt(a.a.d.a.j.AnimatedStateListDrawableCompat_android_exitFadeDuration, B));
    setDither(paramTypedArray.getBoolean(a.a.d.a.j.AnimatedStateListDrawableCompat_android_dither, x));
  }
  
  private boolean b(int paramInt)
  {
    Object localObject = q;
    int i;
    if (localObject != null)
    {
      if (paramInt == r) {
        return true;
      }
      if ((paramInt == s) && (((f)localObject).a()))
      {
        ((f)localObject).b();
        r = s;
        s = paramInt;
        return true;
      }
      i = r;
      ((f)localObject).d();
    }
    else
    {
      i = b();
    }
    q = null;
    s = -1;
    r = -1;
    localObject = p;
    int j = ((b)localObject).d(i);
    int k = ((b)localObject).d(paramInt);
    if (k != 0)
    {
      if (j == 0) {
        return false;
      }
      int m = ((b)localObject).c(j, k);
      if (m < 0) {
        return false;
      }
      boolean bool1 = ((b)localObject).e(j, k);
      a(m);
      Drawable localDrawable = getCurrent();
      if ((localDrawable instanceof AnimationDrawable))
      {
        boolean bool2 = ((b)localObject).d(j, k);
        localObject = new d((AnimationDrawable)localDrawable, bool2, bool1);
      }
      else if ((localDrawable instanceof a.a.b.a.d))
      {
        localObject = new c((a.a.b.a.d)localDrawable);
      }
      else
      {
        if (!(localDrawable instanceof Animatable)) {
          break label271;
        }
        localObject = new a((Animatable)localDrawable);
      }
      ((f)localObject).c();
      q = ((f)localObject);
      s = i;
      r = paramInt;
      return true;
    }
    label271:
    return false;
  }
  
  private void c(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    int i = paramXmlPullParser.getDepth() + 1;
    for (;;)
    {
      int j = paramXmlPullParser.next();
      if (j == 1) {
        break;
      }
      int k = paramXmlPullParser.getDepth();
      if ((k < i) && (j == 3)) {
        break;
      }
      if ((j == 2) && (k <= i)) {
        if (paramXmlPullParser.getName().equals("item")) {
          d(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else if (paramXmlPullParser.getName().equals("transition")) {
          e(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        }
      }
    }
  }
  
  private int d(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    Object localObject = i.a(paramResources, paramTheme, paramAttributeSet, a.a.d.a.j.AnimatedStateListDrawableItem);
    int i = ((TypedArray)localObject).getResourceId(a.a.d.a.j.AnimatedStateListDrawableItem_android_id, 0);
    int j = ((TypedArray)localObject).getResourceId(a.a.d.a.j.AnimatedStateListDrawableItem_android_drawable, -1);
    Drawable localDrawable;
    if (j > 0) {
      localDrawable = a.b(paramContext, j);
    } else {
      localDrawable = null;
    }
    ((TypedArray)localObject).recycle();
    localObject = a(paramAttributeSet);
    paramContext = localDrawable;
    if (localDrawable == null)
    {
      do
      {
        j = paramXmlPullParser.next();
      } while (j == 4);
      if (j == 2)
      {
        if (paramXmlPullParser.getName().equals("vector")) {
          paramContext = k.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else if (Build.VERSION.SDK_INT >= 21) {
          paramContext = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else {
          paramContext = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet);
        }
      }
      else
      {
        paramContext = new StringBuilder();
        paramContext.append(paramXmlPullParser.getPositionDescription());
        paramContext.append(": <item> tag requires a 'drawable' attribute or child tag defining a drawable");
        throw new XmlPullParserException(paramContext.toString());
      }
    }
    if (paramContext != null) {
      return p.a((int[])localObject, paramContext, i);
    }
    paramContext = new StringBuilder();
    paramContext.append(paramXmlPullParser.getPositionDescription());
    paramContext.append(": <item> tag requires a 'drawable' attribute or child tag defining a drawable");
    paramContext = new XmlPullParserException(paramContext.toString());
    for (;;)
    {
      throw paramContext;
    }
  }
  
  private void d()
  {
    onStateChange(getState());
  }
  
  private int e(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    Object localObject = i.a(paramResources, paramTheme, paramAttributeSet, a.a.d.a.j.AnimatedStateListDrawableTransition);
    int i = ((TypedArray)localObject).getResourceId(a.a.d.a.j.AnimatedStateListDrawableTransition_android_fromId, -1);
    int j = ((TypedArray)localObject).getResourceId(a.a.d.a.j.AnimatedStateListDrawableTransition_android_toId, -1);
    int k = ((TypedArray)localObject).getResourceId(a.a.d.a.j.AnimatedStateListDrawableTransition_android_drawable, -1);
    Drawable localDrawable;
    if (k > 0) {
      localDrawable = a.b(paramContext, k);
    } else {
      localDrawable = null;
    }
    boolean bool = ((TypedArray)localObject).getBoolean(a.a.d.a.j.AnimatedStateListDrawableTransition_android_reversible, false);
    ((TypedArray)localObject).recycle();
    localObject = localDrawable;
    if (localDrawable == null)
    {
      do
      {
        k = paramXmlPullParser.next();
      } while (k == 4);
      if (k == 2)
      {
        if (paramXmlPullParser.getName().equals("animated-vector")) {
          localObject = a.a.b.a.d.a(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else if (Build.VERSION.SDK_INT >= 21) {
          localObject = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
        } else {
          localObject = Drawable.createFromXmlInner(paramResources, paramXmlPullParser, paramAttributeSet);
        }
      }
      else
      {
        paramContext = new StringBuilder();
        paramContext.append(paramXmlPullParser.getPositionDescription());
        paramContext.append(": <transition> tag requires a 'drawable' attribute or child tag defining a drawable");
        throw new XmlPullParserException(paramContext.toString());
      }
    }
    if (localObject != null)
    {
      if ((i != -1) && (j != -1)) {
        return p.a(i, j, (Drawable)localObject, bool);
      }
      paramContext = new StringBuilder();
      paramContext.append(paramXmlPullParser.getPositionDescription());
      paramContext.append(": <transition> tag requires 'fromId' & 'toId' attributes");
      throw new XmlPullParserException(paramContext.toString());
    }
    paramContext = new StringBuilder();
    paramContext.append(paramXmlPullParser.getPositionDescription());
    paramContext.append(": <transition> tag requires a 'drawable' attribute or child tag defining a drawable");
    paramContext = new XmlPullParserException(paramContext.toString());
    for (;;)
    {
      throw paramContext;
    }
  }
  
  b a()
  {
    return new b(p, this, null);
  }
  
  protected void a(d.b paramB)
  {
    super.a(paramB);
    if ((paramB instanceof b)) {
      p = ((b)paramB);
    }
  }
  
  public void b(Context paramContext, Resources paramResources, XmlPullParser paramXmlPullParser, AttributeSet paramAttributeSet, Resources.Theme paramTheme)
  {
    TypedArray localTypedArray = i.a(paramResources, paramTheme, paramAttributeSet, a.a.d.a.j.AnimatedStateListDrawableCompat);
    setVisible(localTypedArray.getBoolean(a.a.d.a.j.AnimatedStateListDrawableCompat_android_visible, true), true);
    a(localTypedArray);
    a(paramResources);
    localTypedArray.recycle();
    c(paramContext, paramResources, paramXmlPullParser, paramAttributeSet, paramTheme);
    d();
  }
  
  public boolean isStateful()
  {
    return true;
  }
  
  public void jumpToCurrentState()
  {
    super.jumpToCurrentState();
    f localF = q;
    if (localF != null)
    {
      localF.d();
      q = null;
      a(r);
      r = -1;
      s = -1;
    }
  }
  
  public Drawable mutate()
  {
    if (!t)
    {
      super.mutate();
      p.m();
      t = true;
    }
    return this;
  }
  
  protected boolean onStateChange(int[] paramArrayOfInt)
  {
    int i = p.b(paramArrayOfInt);
    boolean bool1;
    if ((i != b()) && ((b(i)) || (a(i)))) {
      bool1 = true;
    } else {
      bool1 = false;
    }
    Drawable localDrawable = getCurrent();
    boolean bool2 = bool1;
    if (localDrawable != null) {
      bool2 = bool1 | localDrawable.setState(paramArrayOfInt);
    }
    return bool2;
  }
  
  public boolean setVisible(boolean paramBoolean1, boolean paramBoolean2)
  {
    boolean bool = super.setVisible(paramBoolean1, paramBoolean2);
    if ((q != null) && ((bool) || (paramBoolean2)))
    {
      if (paramBoolean1)
      {
        q.c();
        return bool;
      }
      jumpToCurrentState();
    }
    return bool;
  }
  
  private static class a
    extends b.f
  {
    private final Animatable a;
    
    a(Animatable paramAnimatable)
    {
      super();
      a = paramAnimatable;
    }
    
    public void c()
    {
      a.start();
    }
    
    public void d()
    {
      a.stop();
    }
  }
  
  static class b
    extends f.a
  {
    a.a.c.f.d<Long> K;
    a.a.c.f.j<Integer> L;
    
    b(b paramB, b paramB1, Resources paramResources)
    {
      super(paramB1, paramResources);
      if (paramB != null)
      {
        K = K;
        paramB = L;
      }
      else
      {
        K = new a.a.c.f.d();
        paramB = new a.a.c.f.j();
      }
      L = paramB;
    }
    
    private static long f(int paramInt1, int paramInt2)
    {
      long l = paramInt1;
      return paramInt2 | l << 32;
    }
    
    int a(int paramInt1, int paramInt2, Drawable paramDrawable, boolean paramBoolean)
    {
      int i = super.a(paramDrawable);
      long l2 = f(paramInt1, paramInt2);
      long l1;
      if (paramBoolean) {
        l1 = 8589934592L;
      } else {
        l1 = 0L;
      }
      paramDrawable = K;
      long l3 = i;
      paramDrawable.a(l2, Long.valueOf(l3 | l1));
      if (paramBoolean)
      {
        l2 = f(paramInt2, paramInt1);
        K.a(l2, Long.valueOf(0x100000000 | l3 | l1));
      }
      return i;
    }
    
    int a(int[] paramArrayOfInt, Drawable paramDrawable, int paramInt)
    {
      int i = super.a(paramArrayOfInt, paramDrawable);
      L.c(i, Integer.valueOf(paramInt));
      return i;
    }
    
    int b(int[] paramArrayOfInt)
    {
      int i = super.a(paramArrayOfInt);
      if (i >= 0) {
        return i;
      }
      return super.a(StateSet.WILD_CARD);
    }
    
    int c(int paramInt1, int paramInt2)
    {
      long l = f(paramInt1, paramInt2);
      return (int)((Long)K.b(l, Long.valueOf(-1L))).longValue();
    }
    
    int d(int paramInt)
    {
      if (paramInt < 0) {
        return 0;
      }
      return ((Integer)L.b(paramInt, Integer.valueOf(0))).intValue();
    }
    
    boolean d(int paramInt1, int paramInt2)
    {
      long l = f(paramInt1, paramInt2);
      return (((Long)K.b(l, Long.valueOf(-1L))).longValue() & 0x100000000) != 0L;
    }
    
    boolean e(int paramInt1, int paramInt2)
    {
      long l = f(paramInt1, paramInt2);
      return (((Long)K.b(l, Long.valueOf(-1L))).longValue() & 0x200000000) != 0L;
    }
    
    void m()
    {
      K = K.clone();
      L = L.clone();
    }
    
    public Drawable newDrawable()
    {
      return new b(this, null);
    }
    
    public Drawable newDrawable(Resources paramResources)
    {
      return new b(this, paramResources);
    }
  }
  
  private static class c
    extends b.f
  {
    private final a.a.b.a.d a;
    
    c(a.a.b.a.d paramD)
    {
      super();
      a = paramD;
    }
    
    public void c()
    {
      a.start();
    }
    
    public void d()
    {
      a.stop();
    }
  }
  
  private static class d
    extends b.f
  {
    private final ObjectAnimator a;
    private final boolean b;
    
    d(AnimationDrawable paramAnimationDrawable, boolean paramBoolean1, boolean paramBoolean2)
    {
      super();
      int j = paramAnimationDrawable.getNumberOfFrames();
      int i;
      if (paramBoolean1) {
        i = j - 1;
      } else {
        i = 0;
      }
      if (paramBoolean1) {
        j = 0;
      } else {
        j -= 1;
      }
      b.e localE = new b.e(paramAnimationDrawable, paramBoolean1);
      paramAnimationDrawable = ObjectAnimator.ofInt(paramAnimationDrawable, "currentIndex", new int[] { i, j });
      if (Build.VERSION.SDK_INT >= 18) {
        paramAnimationDrawable.setAutoCancel(true);
      }
      paramAnimationDrawable.setDuration(localE.a());
      paramAnimationDrawable.setInterpolator(localE);
      b = paramBoolean2;
      a = paramAnimationDrawable;
    }
    
    public boolean a()
    {
      return b;
    }
    
    public void b()
    {
      a.reverse();
    }
    
    public void c()
    {
      a.start();
    }
    
    public void d()
    {
      a.cancel();
    }
  }
  
  private static class e
    implements TimeInterpolator
  {
    private int[] a;
    private int b;
    private int c;
    
    e(AnimationDrawable paramAnimationDrawable, boolean paramBoolean)
    {
      a(paramAnimationDrawable, paramBoolean);
    }
    
    int a()
    {
      return c;
    }
    
    int a(AnimationDrawable paramAnimationDrawable, boolean paramBoolean)
    {
      int m = paramAnimationDrawable.getNumberOfFrames();
      b = m;
      int[] arrayOfInt = a;
      if ((arrayOfInt == null) || (arrayOfInt.length < m)) {
        a = new int[m];
      }
      arrayOfInt = a;
      int i = 0;
      int j = 0;
      while (i < m)
      {
        if (paramBoolean) {
          k = m - i - 1;
        } else {
          k = i;
        }
        int k = paramAnimationDrawable.getDuration(k);
        arrayOfInt[i] = k;
        j += k;
        i += 1;
      }
      c = j;
      return j;
    }
    
    public float getInterpolation(float paramFloat)
    {
      int j = (int)(paramFloat * c + 0.5F);
      int k = b;
      int[] arrayOfInt = a;
      int i = 0;
      while ((i < k) && (j >= arrayOfInt[i]))
      {
        j -= arrayOfInt[i];
        i += 1;
      }
      if (i < k) {
        paramFloat = j / c;
      } else {
        paramFloat = 0.0F;
      }
      return i / k + paramFloat;
    }
  }
  
  private static abstract class f
  {
    private f() {}
    
    public boolean a()
    {
      return false;
    }
    
    public void b() {}
    
    public abstract void c();
    
    public abstract void d();
  }
}
