package c.a.a.a.m;

import java.util.concurrent.TimeUnit;

public abstract class a<T, C>
{
  private final String a;
  private final T b;
  private final C c;
  private final long d;
  private final long e;
  private long f;
  private long g;
  private volatile Object h;
  
  public a(String paramString, T paramT, C paramC, long paramLong, TimeUnit paramTimeUnit)
  {
    c.a.a.a.p.a.a(paramT, "Route");
    c.a.a.a.p.a.a(paramC, "Connection");
    c.a.a.a.p.a.a(paramTimeUnit, "Time unit");
    a = paramString;
    b = paramT;
    c = paramC;
    d = System.currentTimeMillis();
    if (paramLong > 0L) {
      paramLong = d + paramTimeUnit.toMillis(paramLong);
    } else {
      paramLong = Long.MAX_VALUE;
    }
    e = paramLong;
    g = e;
  }
  
  public C a()
  {
    return c;
  }
  
  public void a(long paramLong, TimeUnit paramTimeUnit)
  {
    for (;;)
    {
      try
      {
        c.a.a.a.p.a.a(paramTimeUnit, "Time unit");
        f = System.currentTimeMillis();
        if (paramLong > 0L)
        {
          paramLong = f + paramTimeUnit.toMillis(paramLong);
          g = Math.min(paramLong, e);
          return;
        }
      }
      finally {}
      paramLong = Long.MAX_VALUE;
    }
  }
  
  public void a(Object paramObject)
  {
    h = paramObject;
  }
  
  public boolean a(long paramLong)
  {
    try
    {
      long l = g;
      boolean bool;
      if (paramLong >= l) {
        bool = true;
      } else {
        bool = false;
      }
      return bool;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public long b()
  {
    try
    {
      long l = g;
      return l;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  public T c()
  {
    return b;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("[id:");
    localStringBuilder.append(a);
    localStringBuilder.append("][route:");
    localStringBuilder.append(b);
    localStringBuilder.append("][state:");
    localStringBuilder.append(h);
    localStringBuilder.append("]");
    return localStringBuilder.toString();
  }
}
