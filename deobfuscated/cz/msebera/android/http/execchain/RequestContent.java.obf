package c.a.a.a.n;

import c.a.a.a.C;
import c.a.a.a.D;
import c.a.a.a.F;
import c.a.a.a.m;
import c.a.a.a.p.a;
import c.a.a.a.q;
import c.a.a.a.r;
import c.a.a.a.s;
import c.a.a.a.w;

public class l
  implements s
{
  private final boolean a;
  
  public l()
  {
    this(false);
  }
  
  public l(boolean paramBoolean)
  {
    a = paramBoolean;
  }
  
  public void a(r paramR, e paramE)
  {
    a.a(paramR, "HTTP request");
    if ((paramR instanceof m))
    {
      if (a)
      {
        paramR.removeHeaders("Transfer-Encoding");
        paramR.removeHeaders("Content-Length");
      }
      else
      {
        if (paramR.containsHeader("Transfer-Encoding")) {
          break label270;
        }
        if (paramR.containsHeader("Content-Length")) {
          break label260;
        }
      }
      paramE = paramR.getRequestLine().getProtocolVersion();
      c.a.a.a.l localL = ((m)paramR).getEntity();
      if (localL == null)
      {
        paramR.addHeader("Content-Length", "0");
        return;
      }
      if ((!localL.isChunked()) && (localL.getContentLength() >= 0L))
      {
        paramR.addHeader("Content-Length", Long.toString(localL.getContentLength()));
      }
      else
      {
        if (paramE.c(w.e)) {
          break label227;
        }
        paramR.addHeader("Transfer-Encoding", "chunked");
      }
      if ((localL.getContentType() != null) && (!paramR.containsHeader("Content-Type"))) {
        paramR.a(localL.getContentType());
      }
      if ((localL.getContentEncoding() != null) && (!paramR.containsHeader("Content-Encoding")))
      {
        paramR.a(localL.getContentEncoding());
        return;
        label227:
        paramR = new StringBuilder();
        paramR.append("Chunked transfer encoding not allowed for ");
        paramR.append(paramE);
        throw new C(paramR.toString());
        label260:
        throw new C("Content-Length header already present");
        label270:
        throw new C("Transfer-encoding header already present");
      }
    }
  }
}
