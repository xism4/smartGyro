package c.a.a.a.k;

import c.a.a.a.e;
import c.a.a.a.h;
import c.a.a.a.p.a;
import c.a.a.a.p.b;
import java.util.List;
import java.util.NoSuchElementException;

public class l
  implements h
{
  protected final List<e> a;
  protected int b;
  protected int c;
  protected String d;
  
  public l(List<e> paramList, String paramString)
  {
    a.a(paramList, "Header list");
    a = ((List)paramList);
    d = paramString;
    b = b(-1);
    c = -1;
  }
  
  protected boolean a(int paramInt)
  {
    if (d == null) {
      return true;
    }
    String str = ((e)a.get(paramInt)).getName();
    return d.equalsIgnoreCase(str);
  }
  
  protected int b(int paramInt)
  {
    if (paramInt < -1) {
      return -1;
    }
    int i = a.size();
    for (boolean bool = false; (!bool) && (paramInt < i - 1); bool = a(paramInt)) {
      paramInt += 1;
    }
    if (bool) {
      return paramInt;
    }
    return -1;
  }
  
  public boolean hasNext()
  {
    return b >= 0;
  }
  
  public final Object next()
  {
    return nextHeader();
  }
  
  public e nextHeader()
  {
    int i = b;
    if (i >= 0)
    {
      c = i;
      b = b(i);
      return (e)a.get(i);
    }
    throw new NoSuchElementException("Iteration already finished.");
  }
  
  public void remove()
  {
    boolean bool;
    if (c >= 0) {
      bool = true;
    } else {
      bool = false;
    }
    b.a(bool, "No header to remove");
    a.remove(c);
    c = -1;
    b -= 1;
  }
}
