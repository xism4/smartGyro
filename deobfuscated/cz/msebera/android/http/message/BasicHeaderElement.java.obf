package c.a.a.a.k;

import c.a.a.a.f;
import c.a.a.a.p.a;
import c.a.a.a.p.h;
import c.a.a.a.z;

public class c
  implements f, Cloneable
{
  private final String a;
  private final String b;
  private final z[] c;
  
  public c(String paramString1, String paramString2)
  {
    this(paramString1, paramString2, null);
  }
  
  public c(String paramString1, String paramString2, z[] paramArrayOfZ)
  {
    a.a(paramString1, "Name");
    a = ((String)paramString1);
    b = paramString2;
    if (paramArrayOfZ != null)
    {
      c = paramArrayOfZ;
      return;
    }
    c = new z[0];
  }
  
  public Object clone()
  {
    return super.clone();
  }
  
  public boolean equals(Object paramObject)
  {
    if (this == paramObject) {
      return true;
    }
    if ((paramObject instanceof f))
    {
      paramObject = (c)paramObject;
      return (a.equals(a)) && (h.a(b, b)) && (h.a(c, c));
    }
    return false;
  }
  
  public String getName()
  {
    return a;
  }
  
  public z getParameter(int paramInt)
  {
    return c[paramInt];
  }
  
  public z getParameterByName(String paramString)
  {
    a.a(paramString, "Name");
    z[] arrayOfZ = c;
    int j = arrayOfZ.length;
    int i = 0;
    while (i < j)
    {
      z localZ = arrayOfZ[i];
      if (localZ.getName().equalsIgnoreCase(paramString)) {
        return localZ;
      }
      i += 1;
    }
    return null;
  }
  
  public int getParameterCount()
  {
    return c.length;
  }
  
  public z[] getParameters()
  {
    return (z[])c.clone();
  }
  
  public String getValue()
  {
    return b;
  }
  
  public int hashCode()
  {
    int j = h.a(h.a(17, a), b);
    z[] arrayOfZ = c;
    int k = arrayOfZ.length;
    int i = 0;
    while (i < k)
    {
      j = h.a(j, arrayOfZ[i]);
      i += 1;
    }
    return j;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append(a);
    if (b != null)
    {
      localStringBuilder.append("=");
      localStringBuilder.append(b);
    }
    z[] arrayOfZ = c;
    int j = arrayOfZ.length;
    int i = 0;
    while (i < j)
    {
      z localZ = arrayOfZ[i];
      localStringBuilder.append("; ");
      localStringBuilder.append(localZ);
      i += 1;
    }
    return localStringBuilder.toString();
  }
}
