package c.a.a.a.k;

import c.a.a.a.p.a;
import c.a.a.a.p.d;
import c.a.a.a.z;

public class f
  implements s
{
  @Deprecated
  public static final f a = new f();
  public static final f b = new f();
  
  public f() {}
  
  protected int a(c.a.a.a.f paramF)
  {
    int k = 0;
    if (paramF == null) {
      return 0;
    }
    int j = paramF.getName().length();
    String str = paramF.getValue();
    int i = j;
    if (str != null) {
      i = j + (str.length() + 3);
    }
    int m = paramF.getParameterCount();
    j = i;
    if (m > 0) {
      for (;;)
      {
        j = i;
        if (k >= m) {
          break;
        }
        i += a(paramF.getParameter(k)) + 2;
        k += 1;
      }
    }
    return j;
  }
  
  protected int a(z paramZ)
  {
    if (paramZ == null) {
      return 0;
    }
    int j = paramZ.getName().length();
    paramZ = paramZ.getValue();
    int i = j;
    if (paramZ != null) {
      i = j + (paramZ.length() + 3);
    }
    return i;
  }
  
  protected int a(z[] paramArrayOfZ)
  {
    int i = 0;
    if (paramArrayOfZ != null)
    {
      if (paramArrayOfZ.length < 1) {
        return 0;
      }
      int j = (paramArrayOfZ.length - 1) * 2;
      int k = paramArrayOfZ.length;
      while (i < k)
      {
        j += a(paramArrayOfZ[i]);
        i += 1;
      }
      return j;
    }
    return 0;
  }
  
  public d a(d paramD, c.a.a.a.f paramF, boolean paramBoolean)
  {
    a.a(paramF, "Header element");
    int i = a(paramF);
    if (paramD == null) {
      paramD = new d(i);
    } else {
      paramD.a(i);
    }
    paramD.a(paramF.getName());
    String str = paramF.getValue();
    if (str != null)
    {
      paramD.append('=');
      a(paramD, str, paramBoolean);
    }
    int j = paramF.getParameterCount();
    if (j > 0)
    {
      i = 0;
      while (i < j)
      {
        paramD.a("; ");
        a(paramD, paramF.getParameter(i), paramBoolean);
        i += 1;
      }
    }
    return paramD;
  }
  
  public d a(d paramD, z paramZ, boolean paramBoolean)
  {
    a.a(paramZ, "Name / value pair");
    int i = a(paramZ);
    if (paramD == null) {
      paramD = new d(i);
    } else {
      paramD.a(i);
    }
    paramD.a(paramZ.getName());
    paramZ = paramZ.getValue();
    if (paramZ != null)
    {
      paramD.append('=');
      a(paramD, paramZ, paramBoolean);
    }
    return paramD;
  }
  
  public d a(d paramD, z[] paramArrayOfZ, boolean paramBoolean)
  {
    a.a(paramArrayOfZ, "Header parameter array");
    int i = a(paramArrayOfZ);
    if (paramD == null) {
      paramD = new d(i);
    } else {
      paramD.a(i);
    }
    i = 0;
    while (i < paramArrayOfZ.length)
    {
      if (i > 0) {
        paramD.a("; ");
      }
      a(paramD, paramArrayOfZ[i], paramBoolean);
      i += 1;
    }
    return paramD;
  }
  
  protected void a(d paramD, String paramString, boolean paramBoolean)
  {
    int j = 0;
    boolean bool = paramBoolean;
    if (!paramBoolean)
    {
      i = 0;
      while ((i < paramString.length()) && (!paramBoolean))
      {
        paramBoolean = a(paramString.charAt(i));
        i += 1;
      }
      bool = paramBoolean;
    }
    int i = j;
    if (bool)
    {
      paramD.append('"');
      i = j;
    }
    while (i < paramString.length())
    {
      char c = paramString.charAt(i);
      if (b(c)) {
        paramD.append('\\');
      }
      paramD.append(c);
      i += 1;
    }
    if (bool) {
      paramD.append('"');
    }
  }
  
  protected boolean a(char paramChar)
  {
    return " ;,:@()<>\\\"/[]?={}\t".indexOf(paramChar) >= 0;
  }
  
  protected boolean b(char paramChar)
  {
    return "\"\\".indexOf(paramChar) >= 0;
  }
}
