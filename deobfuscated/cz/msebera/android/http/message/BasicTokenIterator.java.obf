package c.a.a.a.k;

import c.a.a.a.B;
import c.a.a.a.H;
import c.a.a.a.e;
import c.a.a.a.h;
import c.a.a.a.p.a;
import java.util.NoSuchElementException;

public class p
  implements H
{
  protected final h a;
  protected String b;
  protected String c;
  protected int d;
  
  public p(h paramH)
  {
    a.a(paramH, "Header iterator");
    a = ((h)paramH);
    d = a(-1);
  }
  
  protected int a(int paramInt)
  {
    int i = -1;
    if (paramInt < 0)
    {
      if (!a.hasNext()) {
        return -1;
      }
      b = a.nextHeader().getValue();
      paramInt = 0;
    }
    else
    {
      paramInt = c(paramInt);
    }
    int j = d(paramInt);
    String str;
    if (j < 0)
    {
      str = null;
      paramInt = i;
    }
    for (;;)
    {
      c = str;
      return paramInt;
      paramInt = b(j);
      str = a(b, j, paramInt);
    }
  }
  
  protected String a(String paramString, int paramInt1, int paramInt2)
  {
    return paramString.substring(paramInt1, paramInt2);
  }
  
  protected boolean a(char paramChar)
  {
    return " ,;=()<>@:\\\"/[]?{}\t".indexOf(paramChar) >= 0;
  }
  
  protected int b(int paramInt)
  {
    a.a(paramInt, "Search position");
    int i = b.length();
    do
    {
      paramInt += 1;
    } while ((paramInt < i) && (b(b.charAt(paramInt))));
    return paramInt;
  }
  
  protected boolean b(char paramChar)
  {
    if (Character.isLetterOrDigit(paramChar)) {
      return true;
    }
    if (Character.isISOControl(paramChar)) {
      return false;
    }
    return !a(paramChar);
  }
  
  protected int c(int paramInt)
  {
    a.a(paramInt, "Search position");
    int j = b.length();
    int i = 0;
    while ((i == 0) && (paramInt < j))
    {
      char c1 = b.charAt(paramInt);
      if (c(c1))
      {
        i = 1;
      }
      else if (d(c1))
      {
        paramInt += 1;
      }
      else
      {
        if (b(c1))
        {
          localStringBuilder = new StringBuilder();
          localStringBuilder.append("Tokens without separator (pos ");
          localStringBuilder.append(paramInt);
          localStringBuilder.append("): ");
          localStringBuilder.append(b);
          throw new B(localStringBuilder.toString());
        }
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Invalid character after token (pos ");
        localStringBuilder.append(paramInt);
        localStringBuilder.append("): ");
        localStringBuilder.append(b);
        throw new B(localStringBuilder.toString());
      }
    }
    return paramInt;
  }
  
  protected boolean c(char paramChar)
  {
    return paramChar == ',';
  }
  
  protected int d(int paramInt)
  {
    a.a(paramInt, "Search position");
    int j = 0;
    while (j == 0)
    {
      Object localObject = b;
      if (localObject == null) {
        break;
      }
      int m = ((String)localObject).length();
      int i = j;
      int k = paramInt;
      while ((i == 0) && (k < m))
      {
        char c1 = b.charAt(k);
        if ((!c(c1)) && (!d(c1)))
        {
          if (b(b.charAt(k)))
          {
            i = 1;
          }
          else
          {
            localObject = new StringBuilder();
            ((StringBuilder)localObject).append("Invalid character before token (pos ");
            ((StringBuilder)localObject).append(k);
            ((StringBuilder)localObject).append("): ");
            ((StringBuilder)localObject).append(b);
            throw new B(((StringBuilder)localObject).toString());
          }
        }
        else {
          k += 1;
        }
      }
      paramInt = k;
      j = i;
      if (i == 0) {
        if (a.hasNext())
        {
          b = a.nextHeader().getValue();
          paramInt = 0;
          j = i;
        }
        else
        {
          b = null;
          paramInt = k;
          j = i;
        }
      }
    }
    if (j != 0) {
      return paramInt;
    }
    return -1;
  }
  
  protected boolean d(char paramChar)
  {
    return (paramChar == '\t') || (Character.isSpaceChar(paramChar));
  }
  
  public boolean hasNext()
  {
    return c != null;
  }
  
  public final Object next()
  {
    return nextToken();
  }
  
  public String nextToken()
  {
    String str = c;
    if (str != null)
    {
      d = a(d);
      return str;
    }
    throw new NoSuchElementException("Iteration already finished.");
  }
  
  public final void remove()
  {
    throw new UnsupportedOperationException("Removing tokens is not supported.");
  }
}
