package c.a.a.a.k;

import c.a.a.a.B;
import c.a.a.a.D;
import c.a.a.a.G;
import c.a.a.a.e;
import c.a.a.a.p.a;

public class k
  implements v
{
  @Deprecated
  public static final k a = new k();
  public static final k b = new k();
  protected final D c;
  
  public k()
  {
    this(null);
  }
  
  public k(D paramD)
  {
    if (paramD == null) {
      paramD = c.a.a.a.w.f;
    }
    c = paramD;
  }
  
  protected D a(int paramInt1, int paramInt2)
  {
    return c.a(paramInt1, paramInt2);
  }
  
  protected G a(D paramD, int paramInt, String paramString)
  {
    return new o(paramD, paramInt, paramString);
  }
  
  public G a(c.a.a.a.p.d paramD, w paramW)
  {
    a.a(paramD, "Char array buffer");
    a.a(paramW, "Parser cursor");
    int m = paramW.b();
    int k = paramW.c();
    for (;;)
    {
      try
      {
        localD = c(paramD, paramW);
        d(paramD, paramW);
        int n = paramW.b();
        j = paramD.a(32, n, k);
        i = j;
        if (j < 0) {
          i = k;
        }
        paramW = paramD.b(n, i);
        j = 0;
        n = paramW.length();
        if (j < n)
        {
          if (Character.isDigit(paramW.charAt(j)))
          {
            j += 1;
            continue;
          }
          paramW = new StringBuilder();
          paramW.append("Status line contains invalid status code: ");
          paramW.append(paramD.a(m, k));
          throw new B(paramW.toString());
        }
      }
      catch (IndexOutOfBoundsException paramW)
      {
        D localD;
        int j;
        int i;
        continue;
      }
      try
      {
        j = Integer.parseInt(paramW);
        if (i >= k) {
          break label283;
        }
        paramW = paramD.b(i, k);
      }
      catch (NumberFormatException paramW)
      {
        continue;
        paramW = "";
      }
    }
    return a(localD, j, paramW);
    paramW = new StringBuilder();
    paramW.append("Status line contains invalid status code: ");
    paramW.append(paramD.a(m, k));
    throw new B(paramW.toString());
    paramW = new StringBuilder();
    paramW.append("Invalid status line: ");
    paramW.append(paramD.a(m, k));
    paramD = new B(paramW.toString());
    for (;;)
    {
      throw paramD;
    }
  }
  
  public e a(c.a.a.a.p.d paramD)
  {
    return new q(paramD);
  }
  
  public boolean b(c.a.a.a.p.d paramD, w paramW)
  {
    a.a(paramD, "Char array buffer");
    a.a(paramW, "Parser cursor");
    int j = paramW.b();
    paramW = c.c();
    int k = paramW.length();
    if (paramD.length() < k + 4) {
      return false;
    }
    int i;
    if (j < 0)
    {
      i = paramD.length() - 4 - k;
    }
    else
    {
      i = j;
      if (j == 0) {
        for (;;)
        {
          i = j;
          if (j >= paramD.length()) {
            break;
          }
          i = j;
          if (!c.a.a.a.n.d.a(paramD.charAt(j))) {
            break;
          }
          j += 1;
        }
      }
    }
    int m = i + k;
    if (m + 4 > paramD.length()) {
      return false;
    }
    boolean bool1 = true;
    j = 0;
    while ((bool1) && (j < k))
    {
      if (paramD.charAt(i + j) == paramW.charAt(j)) {
        bool1 = true;
      } else {
        bool1 = false;
      }
      j += 1;
    }
    boolean bool2 = bool1;
    if (bool1)
    {
      if (paramD.charAt(m) == '/') {
        return true;
      }
      bool2 = false;
    }
    return bool2;
  }
  
  public D c(c.a.a.a.p.d paramD, w paramW)
  {
    a.a(paramD, "Char array buffer");
    a.a(paramW, "Parser cursor");
    String str = c.c();
    int n = str.length();
    int m = paramW.b();
    int k = paramW.c();
    d(paramD, paramW);
    int i1 = paramW.b();
    int i2 = i1 + n;
    int i;
    int j;
    if (i2 + 4 <= k)
    {
      i = 1;
      j = 0;
      while ((i != 0) && (j < n))
      {
        if (paramD.charAt(i1 + j) == str.charAt(j)) {
          i = 1;
        } else {
          i = 0;
        }
        j += 1;
      }
      j = i;
      if (i != 0) {
        if (paramD.charAt(i2) == '/') {
          j = 1;
        } else {
          j = 0;
        }
      }
      if (j != 0)
      {
        j = i1 + (n + 1);
        i = paramD.a(46, j, k);
        if (i == -1) {}
      }
    }
    try
    {
      n = Integer.parseInt(paramD.b(j, i));
      i1 = i + 1;
      j = paramD.a(32, i1, k);
      i = j;
      if (j == -1) {
        i = k;
      }
    }
    catch (NumberFormatException paramW)
    {
      label245:
      for (;;) {}
    }
    try
    {
      j = Integer.parseInt(paramD.b(i1, i));
      paramW.a(i);
      return a(n, j);
    }
    catch (NumberFormatException paramW)
    {
      break label245;
    }
    paramW = new StringBuilder();
    paramW.append("Invalid protocol minor version number: ");
    paramW.append(paramD.a(m, k));
    throw new B(paramW.toString());
    paramW = new StringBuilder();
    paramW.append("Invalid protocol major version number: ");
    paramW.append(paramD.a(m, k));
    throw new B(paramW.toString());
    paramW = new StringBuilder();
    paramW.append("Invalid protocol version number: ");
    paramW.append(paramD.a(m, k));
    throw new B(paramW.toString());
    paramW = new StringBuilder();
    paramW.append("Not a valid protocol version: ");
    paramW.append(paramD.a(m, k));
    throw new B(paramW.toString());
    paramW = new StringBuilder();
    paramW.append("Not a valid protocol version: ");
    paramW.append(paramD.a(m, k));
    paramD = new B(paramW.toString());
    for (;;)
    {
      throw paramD;
    }
  }
  
  protected void d(c.a.a.a.p.d paramD, w paramW)
  {
    int i = paramW.b();
    int j = paramW.c();
    while ((i < j) && (c.a.a.a.n.d.a(paramD.charAt(i)))) {
      i += 1;
    }
    paramW.a(i);
  }
}
