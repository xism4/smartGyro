package c.a.a.a.g;

import c.a.a.a.c;
import c.a.a.a.l;
import c.a.a.a.p.a;
import c.a.a.a.p.d;
import c.a.a.a.p.i;
import c.a.a.a.z;
import java.io.Serializable;
import java.nio.charset.Charset;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Locale;

public final class e
  implements Serializable
{
  public static final e a = a("application/atom+xml", c.c);
  public static final e b = a("application/x-www-form-urlencoded", c.c);
  public static final e c = a("application/json", c.a);
  public static final e d = a("application/octet-stream", null);
  public static final e e = a("application/svg+xml", c.c);
  public static final e f = a("application/xhtml+xml", c.c);
  public static final e g = a("application/xml", c.c);
  public static final e h = a("multipart/form-data", c.c);
  public static final e i = a("text/html", c.c);
  public static final e j = a("text/plain", c.c);
  public static final e k = a("text/xml", c.c);
  public static final e l = a("*/*", null);
  public static final e m = j;
  public static final e n = d;
  private final String o;
  private final Charset p;
  private final z[] q;
  
  e(String paramString, Charset paramCharset)
  {
    o = paramString;
    p = paramCharset;
    q = null;
  }
  
  e(String paramString, Charset paramCharset, z[] paramArrayOfZ)
  {
    o = paramString;
    p = paramCharset;
    q = paramArrayOfZ;
  }
  
  private static e a(c.a.a.a.f paramF, boolean paramBoolean)
  {
    return a(paramF.getName(), paramF.getParameters(), paramBoolean);
  }
  
  public static e a(l paramL)
  {
    if (paramL == null) {
      return null;
    }
    paramL = paramL.getContentType();
    if (paramL != null)
    {
      paramL = paramL.getElements();
      if (paramL.length > 0) {
        return a(paramL[0], true);
      }
    }
    return null;
  }
  
  public static e a(String paramString, Charset paramCharset)
  {
    a.b(paramString, "MIME type");
    paramString = ((String)paramString).toLowerCase(Locale.ROOT);
    a.a(a(paramString), "MIME type may not contain reserved characters");
    return new e(paramString, paramCharset);
  }
  
  private static e a(String paramString, z[] paramArrayOfZ, boolean paramBoolean)
  {
    int i2 = paramArrayOfZ.length;
    int i1 = 0;
    while (i1 < i2)
    {
      Object localObject = paramArrayOfZ[i1];
      if (((z)localObject).getName().equalsIgnoreCase("charset"))
      {
        localObject = ((z)localObject).getValue();
        if (i.b((CharSequence)localObject)) {
          break;
        }
        try
        {
          localObject = Charset.forName((String)localObject);
        }
        catch (UnsupportedCharsetException localUnsupportedCharsetException)
        {
          if (paramBoolean) {
            break label68;
          }
        }
        break;
        label68:
        throw localUnsupportedCharsetException;
      }
      i1 += 1;
    }
    Charset localCharset = null;
    if ((paramArrayOfZ == null) || (paramArrayOfZ.length <= 0)) {
      paramArrayOfZ = null;
    }
    return new e(paramString, localCharset, paramArrayOfZ);
  }
  
  private static boolean a(String paramString)
  {
    int i1 = 0;
    while (i1 < paramString.length())
    {
      int i2 = paramString.charAt(i1);
      if ((i2 != 34) && (i2 != 44))
      {
        if (i2 == 59) {
          return false;
        }
        i1 += 1;
      }
      else
      {
        return false;
      }
    }
    return true;
  }
  
  public Charset a()
  {
    return p;
  }
  
  public String b()
  {
    return o;
  }
  
  public String toString()
  {
    d localD = new d(64);
    localD.a(o);
    if (q != null)
    {
      localD.a("; ");
      c.a.a.a.k.f.b.a(localD, q, false);
    }
    else if (p != null)
    {
      localD.a("; charset=");
      localD.a(p.name());
    }
    return localD.toString();
  }
}
