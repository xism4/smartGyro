package c.a.a.a.g;

import c.a.a.a.l;
import c.a.a.a.p.a;
import c.a.a.a.p.g;
import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.OutputStream;

public class c
  extends f
{
  private final byte[] b;
  
  public c(l paramL)
  {
    super(paramL);
    if ((paramL.isRepeatable()) && (paramL.getContentLength() >= 0L))
    {
      b = null;
      return;
    }
    b = g.b(paramL);
  }
  
  public InputStream getContent()
  {
    byte[] arrayOfByte = b;
    if (arrayOfByte != null) {
      return new ByteArrayInputStream(arrayOfByte);
    }
    return super.getContent();
  }
  
  public long getContentLength()
  {
    byte[] arrayOfByte = b;
    if (arrayOfByte != null) {
      return arrayOfByte.length;
    }
    return super.getContentLength();
  }
  
  public boolean isChunked()
  {
    return (b == null) && (super.isChunked());
  }
  
  public boolean isRepeatable()
  {
    return true;
  }
  
  public boolean isStreaming()
  {
    return (b == null) && (super.isStreaming());
  }
  
  public void writeTo(OutputStream paramOutputStream)
  {
    a.a(paramOutputStream, "Output stream");
    byte[] arrayOfByte = b;
    if (arrayOfByte != null)
    {
      paramOutputStream.write(arrayOfByte);
      return;
    }
    super.writeTo(paramOutputStream);
  }
}
