package c.a.a.a.p;

import java.io.Serializable;
import java.nio.CharBuffer;

public final class d
  implements CharSequence, Serializable
{
  private char[] a;
  private int b;
  
  public d(int paramInt)
  {
    a.a(paramInt, "Buffer capacity");
    a = new char[paramInt];
  }
  
  private void c(int paramInt)
  {
    char[] arrayOfChar = new char[Math.max(a.length << 1, paramInt)];
    System.arraycopy(a, 0, arrayOfChar, 0, b);
    a = arrayOfChar;
  }
  
  public int a(int paramInt1, int paramInt2, int paramInt3)
  {
    int i = paramInt2;
    if (paramInt2 < 0) {
      i = 0;
    }
    int j = b;
    paramInt2 = paramInt3;
    if (paramInt3 > j) {
      paramInt2 = j;
    }
    paramInt3 = i;
    if (i > paramInt2) {
      return -1;
    }
    while (paramInt3 < paramInt2)
    {
      if (a[paramInt3] == paramInt1) {
        return paramInt3;
      }
      paramInt3 += 1;
    }
    return -1;
  }
  
  public String a(int paramInt1, int paramInt2)
  {
    if (paramInt1 >= 0)
    {
      if (paramInt2 <= b)
      {
        if (paramInt1 <= paramInt2) {
          return new String(a, paramInt1, paramInt2 - paramInt1);
        }
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("beginIndex: ");
        localStringBuilder.append(paramInt1);
        localStringBuilder.append(" > endIndex: ");
        localStringBuilder.append(paramInt2);
        throw new IndexOutOfBoundsException(localStringBuilder.toString());
      }
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("endIndex: ");
      localStringBuilder.append(paramInt2);
      localStringBuilder.append(" > length: ");
      localStringBuilder.append(b);
      throw new IndexOutOfBoundsException(localStringBuilder.toString());
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Negative beginIndex: ");
    localStringBuilder.append(paramInt1);
    throw new IndexOutOfBoundsException(localStringBuilder.toString());
  }
  
  public void a(int paramInt)
  {
    if (paramInt <= 0) {
      return;
    }
    int i = a.length;
    int j = b;
    if (paramInt > i - j) {
      c(j + paramInt);
    }
  }
  
  public void a(c paramC, int paramInt1, int paramInt2)
  {
    if (paramC == null) {
      return;
    }
    a(paramC.a(), paramInt1, paramInt2);
  }
  
  public void a(d paramD, int paramInt1, int paramInt2)
  {
    if (paramD == null) {
      return;
    }
    a(a, paramInt1, paramInt2);
  }
  
  public void a(String paramString)
  {
    if (paramString == null) {
      paramString = "null";
    }
    int i = paramString.length();
    int j = b + i;
    if (j > a.length) {
      c(j);
    }
    paramString.getChars(0, i, a, b);
    b = j;
  }
  
  public void a(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (paramArrayOfByte == null) {
      return;
    }
    if ((paramInt1 >= 0) && (paramInt1 <= paramArrayOfByte.length) && (paramInt2 >= 0))
    {
      int i = paramInt1 + paramInt2;
      if ((i >= 0) && (i <= paramArrayOfByte.length))
      {
        if (paramInt2 == 0) {
          return;
        }
        int j = b;
        int k = paramInt2 + j;
        paramInt2 = j;
        i = paramInt1;
        if (k > a.length)
        {
          c(k);
          i = paramInt1;
          paramInt2 = j;
        }
        while (paramInt2 < k)
        {
          a[paramInt2] = ((char)(paramArrayOfByte[i] & 0xFF));
          i += 1;
          paramInt2 += 1;
        }
        b = k;
        return;
      }
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("off: ");
    localStringBuilder.append(paramInt1);
    localStringBuilder.append(" len: ");
    localStringBuilder.append(paramInt2);
    localStringBuilder.append(" b.length: ");
    localStringBuilder.append(paramArrayOfByte.length);
    paramArrayOfByte = new IndexOutOfBoundsException(localStringBuilder.toString());
    for (;;)
    {
      throw paramArrayOfByte;
    }
  }
  
  public void a(char[] paramArrayOfChar, int paramInt1, int paramInt2)
  {
    if (paramArrayOfChar == null) {
      return;
    }
    if ((paramInt1 >= 0) && (paramInt1 <= paramArrayOfChar.length) && (paramInt2 >= 0))
    {
      int i = paramInt1 + paramInt2;
      if ((i >= 0) && (i <= paramArrayOfChar.length))
      {
        if (paramInt2 == 0) {
          return;
        }
        i = b + paramInt2;
        if (i > a.length) {
          c(i);
        }
        System.arraycopy(paramArrayOfChar, paramInt1, a, b, paramInt2);
        b = i;
        return;
      }
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("off: ");
    localStringBuilder.append(paramInt1);
    localStringBuilder.append(" len: ");
    localStringBuilder.append(paramInt2);
    localStringBuilder.append(" b.length: ");
    localStringBuilder.append(paramArrayOfChar.length);
    throw new IndexOutOfBoundsException(localStringBuilder.toString());
  }
  
  public char[] a()
  {
    return a;
  }
  
  public void append(char paramChar)
  {
    int i = b + 1;
    if (i > a.length) {
      c(i);
    }
    a[b] = paramChar;
    b = i;
  }
  
  public int b(int paramInt)
  {
    return a(paramInt, 0, b);
  }
  
  public String b(int paramInt1, int paramInt2)
  {
    if (paramInt1 >= 0)
    {
      if (paramInt2 <= b)
      {
        if (paramInt1 <= paramInt2)
        {
          int i;
          for (;;)
          {
            i = paramInt2;
            if (paramInt1 >= paramInt2) {
              break;
            }
            i = paramInt2;
            if (!c.a.a.a.n.d.a(a[paramInt1])) {
              break;
            }
            paramInt1 += 1;
          }
          while ((i > paramInt1) && (c.a.a.a.n.d.a(a[(i - 1)]))) {
            i -= 1;
          }
          return new String(a, paramInt1, i - paramInt1);
        }
        localObject = new StringBuilder();
        ((StringBuilder)localObject).append("beginIndex: ");
        ((StringBuilder)localObject).append(paramInt1);
        ((StringBuilder)localObject).append(" > endIndex: ");
        ((StringBuilder)localObject).append(paramInt2);
        throw new IndexOutOfBoundsException(((StringBuilder)localObject).toString());
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("endIndex: ");
      ((StringBuilder)localObject).append(paramInt2);
      ((StringBuilder)localObject).append(" > length: ");
      ((StringBuilder)localObject).append(b);
      throw new IndexOutOfBoundsException(((StringBuilder)localObject).toString());
    }
    Object localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Negative beginIndex: ");
    ((StringBuilder)localObject).append(paramInt1);
    localObject = new IndexOutOfBoundsException(((StringBuilder)localObject).toString());
    for (;;)
    {
      throw ((Throwable)localObject);
    }
  }
  
  public boolean b()
  {
    return b == 0;
  }
  
  public char charAt(int paramInt)
  {
    return a[paramInt];
  }
  
  public void clear()
  {
    b = 0;
  }
  
  public int length()
  {
    return b;
  }
  
  public CharSequence subSequence(int paramInt1, int paramInt2)
  {
    if (paramInt1 >= 0)
    {
      if (paramInt2 <= b)
      {
        if (paramInt1 <= paramInt2) {
          return CharBuffer.wrap(a, paramInt1, paramInt2);
        }
        localStringBuilder = new StringBuilder();
        localStringBuilder.append("beginIndex: ");
        localStringBuilder.append(paramInt1);
        localStringBuilder.append(" > endIndex: ");
        localStringBuilder.append(paramInt2);
        throw new IndexOutOfBoundsException(localStringBuilder.toString());
      }
      localStringBuilder = new StringBuilder();
      localStringBuilder.append("endIndex: ");
      localStringBuilder.append(paramInt2);
      localStringBuilder.append(" > length: ");
      localStringBuilder.append(b);
      throw new IndexOutOfBoundsException(localStringBuilder.toString());
    }
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("Negative beginIndex: ");
    localStringBuilder.append(paramInt1);
    throw new IndexOutOfBoundsException(localStringBuilder.toString());
  }
  
  public String toString()
  {
    return new String(a, 0, b);
  }
}
