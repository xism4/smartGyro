package c.a.a.a.e;

import c.a.a.a.g.f;
import c.a.a.a.j;
import c.a.a.a.p.g;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.SocketException;

@Deprecated
public class a
  extends f
  implements i, l
{
  protected o b;
  protected final boolean c;
  
  public a(c.a.a.a.l paramL, o paramO, boolean paramBoolean)
  {
    super(paramL);
    c.a.a.a.p.a.a(paramO, "Connection");
    b = paramO;
    c = paramBoolean;
  }
  
  private void b()
  {
    o localO = b;
    if (localO == null) {
      return;
    }
    try
    {
      if (c)
      {
        g.a(a);
        b.markReusable();
      }
      else
      {
        localO.unmarkReusable();
      }
      return;
    }
    finally
    {
      a();
    }
  }
  
  protected void a()
  {
    o localO = b;
    if (localO != null) {
      try
      {
        localO.releaseConnection();
        return;
      }
      finally
      {
        b = null;
      }
    }
  }
  
  public void abortConnection()
  {
    o localO = b;
    if (localO != null) {
      try
      {
        localO.abortConnection();
        return;
      }
      finally
      {
        b = null;
      }
    }
  }
  
  @Deprecated
  public void consumeContent()
  {
    b();
  }
  
  public boolean eofDetected(InputStream paramInputStream)
  {
    try
    {
      if (b != null) {
        if (c)
        {
          paramInputStream.close();
          b.markReusable();
        }
        else
        {
          b.unmarkReusable();
        }
      }
      return false;
    }
    finally
    {
      a();
    }
  }
  
  public InputStream getContent()
  {
    return new k(a.getContent(), this);
  }
  
  public boolean isRepeatable()
  {
    return false;
  }
  
  public boolean streamAbort(InputStream paramInputStream)
  {
    paramInputStream = b;
    if (paramInputStream != null) {
      paramInputStream.abortConnection();
    }
    return false;
  }
  
  public boolean streamClosed(InputStream paramInputStream)
  {
    try
    {
      if (b != null) {
        if (c)
        {
          boolean bool = b.isOpen();
          try
          {
            paramInputStream.close();
            b.markReusable();
          }
          catch (SocketException paramInputStream)
          {
            if (bool) {
              break label48;
            }
          }
          break label59;
          label48:
          throw paramInputStream;
        }
        else
        {
          b.unmarkReusable();
        }
      }
      label59:
      return false;
    }
    finally
    {
      a();
    }
  }
  
  public void writeTo(OutputStream paramOutputStream)
  {
    super.writeTo(paramOutputStream);
    b();
  }
}
