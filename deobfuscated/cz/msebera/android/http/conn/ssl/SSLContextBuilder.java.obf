package c.a.a.a.e.e;

import c.a.a.a.o.a;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.security.cert.X509Certificate;
import java.util.LinkedHashSet;
import java.util.Set;
import javax.net.ssl.KeyManager;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.net.ssl.X509TrustManager;

@Deprecated
public class f
{
  private String a;
  private Set<KeyManager> b = new LinkedHashSet();
  private Set<TrustManager> c = new LinkedHashSet();
  private SecureRandom d;
  
  public f() {}
  
  public f a(KeyStore paramKeyStore)
  {
    a(paramKeyStore, null);
    return this;
  }
  
  public f a(KeyStore paramKeyStore, k paramK)
  {
    TrustManagerFactory localTrustManagerFactory = TrustManagerFactory.getInstance(TrustManagerFactory.getDefaultAlgorithm());
    localTrustManagerFactory.init(paramKeyStore);
    paramKeyStore = localTrustManagerFactory.getTrustManagers();
    if (paramKeyStore != null)
    {
      int j = 0;
      if (paramK != null)
      {
        i = 0;
        while (i < paramKeyStore.length)
        {
          localTrustManagerFactory = paramKeyStore[i];
          if ((localTrustManagerFactory instanceof X509TrustManager)) {
            paramKeyStore[i] = new a((X509TrustManager)localTrustManagerFactory, paramK);
          }
          i += 1;
        }
      }
      int k = paramKeyStore.length;
      int i = j;
      while (i < k)
      {
        paramK = paramKeyStore[i];
        c.add(paramK);
        i += 1;
      }
    }
    return this;
  }
  
  public SSLContext a()
  {
    Object localObject1 = a;
    if (localObject1 == null) {
      localObject1 = "TLS";
    }
    SSLContext localSSLContext = SSLContext.getInstance((String)localObject1);
    boolean bool = b.isEmpty();
    Object localObject2 = null;
    if (!bool)
    {
      localObject1 = b;
      localObject1 = (KeyManager[])((Set)localObject1).toArray(new KeyManager[((Set)localObject1).size()]);
    }
    else
    {
      localObject1 = null;
    }
    if (!c.isEmpty())
    {
      localObject2 = c;
      localObject2 = (TrustManager[])((Set)localObject2).toArray(new TrustManager[((Set)localObject2).size()]);
    }
    localSSLContext.init((KeyManager[])localObject1, (TrustManager[])localObject2, d);
    return localSSLContext;
  }
  
  static class a
    implements X509TrustManager
  {
    private final X509TrustManager a;
    private final k b;
    
    a(X509TrustManager paramX509TrustManager, k paramK)
    {
      a = paramX509TrustManager;
      b = paramK;
    }
    
    public void checkClientTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString)
    {
      a.checkClientTrusted(paramArrayOfX509Certificate, paramString);
    }
    
    public void checkServerTrusted(X509Certificate[] paramArrayOfX509Certificate, String paramString)
    {
      if (!b.a(paramArrayOfX509Certificate, paramString)) {
        a.checkServerTrusted(paramArrayOfX509Certificate, paramString);
      }
    }
    
    public X509Certificate[] getAcceptedIssuers()
    {
      return a.getAcceptedIssuers();
    }
  }
}
