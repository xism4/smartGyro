package c.a.a.a.e.b;

import c.a.a.a.o;
import java.net.InetAddress;

public class a
  implements c
{
  public a() {}
  
  protected int a(e paramE)
  {
    int j = paramE.getHopCount();
    int i = 1;
    if (j > 1) {
      i = 2;
    }
    return i;
  }
  
  public int a(e paramE1, e paramE2)
  {
    c.a.a.a.p.a.a(paramE1, "Planned route");
    if ((paramE2 != null) && (paramE2.getHopCount() >= 1))
    {
      if (paramE1.getHopCount() > 1) {
        return c(paramE1, paramE2);
      }
      return b(paramE1, paramE2);
    }
    return a(paramE1);
  }
  
  protected int b(e paramE1, e paramE2)
  {
    if (paramE2.getHopCount() > 1) {
      return -1;
    }
    if (!paramE1.getTargetHost().equals(paramE2.getTargetHost())) {
      return -1;
    }
    if (paramE1.isSecure() != paramE2.isSecure()) {
      return -1;
    }
    if ((paramE1.getLocalAddress() != null) && (!paramE1.getLocalAddress().equals(paramE2.getLocalAddress()))) {
      return -1;
    }
    return 0;
  }
  
  protected int c(e paramE1, e paramE2)
  {
    if (paramE2.getHopCount() <= 1) {
      return -1;
    }
    if (!paramE1.getTargetHost().equals(paramE2.getTargetHost())) {
      return -1;
    }
    int j = paramE1.getHopCount();
    int k = paramE2.getHopCount();
    if (j < k) {
      return -1;
    }
    int i = 0;
    while (i < k - 1)
    {
      if (!paramE1.getHopTarget(i).equals(paramE2.getHopTarget(i))) {
        return -1;
      }
      i += 1;
    }
    if (j > k) {
      return 4;
    }
    if (((paramE2.isTunnelled()) && (!paramE1.isTunnelled())) || ((paramE2.isLayered()) && (!paramE1.isLayered()))) {
      return -1;
    }
    if ((paramE1.isTunnelled()) && (!paramE2.isTunnelled())) {
      return 3;
    }
    if ((paramE1.isLayered()) && (!paramE2.isLayered())) {
      return 5;
    }
    if (paramE1.isSecure() != paramE2.isSecure()) {
      return -1;
    }
    return 0;
  }
}
