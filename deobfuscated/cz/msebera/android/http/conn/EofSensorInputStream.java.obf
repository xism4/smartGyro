package c.a.a.a.e;

import c.a.a.a.p.a;
import java.io.IOException;
import java.io.InputStream;

public class k
  extends InputStream
  implements i
{
  protected InputStream a;
  private boolean b;
  private final l c;
  
  public k(InputStream paramInputStream, l paramL)
  {
    a.a(paramInputStream, "Wrapped stream");
    a = paramInputStream;
    b = false;
    c = paramL;
  }
  
  protected void a()
  {
    InputStream localInputStream = a;
    if (localInputStream != null)
    {
      boolean bool = true;
      try
      {
        if (c != null) {
          bool = c.streamAbort(localInputStream);
        }
        if (bool) {
          a.close();
        }
        return;
      }
      finally
      {
        a = null;
      }
    }
  }
  
  protected void a(int paramInt)
  {
    InputStream localInputStream = a;
    if ((localInputStream != null) && (paramInt < 0))
    {
      boolean bool = true;
      try
      {
        if (c != null) {
          bool = c.eofDetected(localInputStream);
        }
        if (bool) {
          a.close();
        }
        return;
      }
      finally
      {
        a = null;
      }
    }
  }
  
  public void abortConnection()
  {
    b = true;
    a();
  }
  
  public int available()
  {
    if (c()) {
      try
      {
        int i = a.available();
        return i;
      }
      catch (IOException localIOException)
      {
        a();
        throw localIOException;
      }
    }
    return 0;
  }
  
  protected void b()
  {
    InputStream localInputStream = a;
    if (localInputStream != null)
    {
      boolean bool = true;
      try
      {
        if (c != null) {
          bool = c.streamClosed(localInputStream);
        }
        if (bool) {
          a.close();
        }
        return;
      }
      finally
      {
        a = null;
      }
    }
  }
  
  protected boolean c()
  {
    if (!b) {
      return a != null;
    }
    throw new IOException("Attempted read on closed stream.");
  }
  
  public void close()
  {
    b = true;
    b();
  }
  
  public int read()
  {
    if (c()) {
      try
      {
        int i = a.read();
        a(i);
        return i;
      }
      catch (IOException localIOException)
      {
        a();
        throw localIOException;
      }
    }
    return -1;
  }
  
  public int read(byte[] paramArrayOfByte)
  {
    return read(paramArrayOfByte, 0, paramArrayOfByte.length);
  }
  
  public int read(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (c()) {
      try
      {
        paramInt1 = a.read(paramArrayOfByte, paramInt1, paramInt2);
        a(paramInt1);
        return paramInt1;
      }
      catch (IOException paramArrayOfByte)
      {
        a();
        throw paramArrayOfByte;
      }
    }
    return -1;
  }
}
