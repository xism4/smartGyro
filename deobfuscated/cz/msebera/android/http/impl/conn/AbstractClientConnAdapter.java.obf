package c.a.a.a.i.c;

import c.a.a.a.e.b;
import c.a.a.a.e.o;
import c.a.a.a.e.q;
import c.a.a.a.i;
import c.a.a.a.j;
import c.a.a.a.m;
import c.a.a.a.n.e;
import c.a.a.a.p;
import c.a.a.a.r;
import c.a.a.a.t;
import java.net.InetAddress;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;

@Deprecated
public abstract class a
  implements o, e
{
  private final b a;
  private volatile q b;
  private volatile boolean c;
  private volatile boolean d;
  private volatile long e;
  
  protected a(b paramB, q paramQ)
  {
    a = paramB;
    b = paramQ;
    c = false;
    d = false;
    e = Long.MAX_VALUE;
  }
  
  protected void a()
  {
    try
    {
      b = null;
      e = Long.MAX_VALUE;
      return;
    }
    finally
    {
      localObject = finally;
      throw localObject;
    }
  }
  
  protected final void a(q paramQ)
  {
    if ((!e()) && (paramQ != null)) {
      return;
    }
    throw new f();
  }
  
  public void a(m paramM)
  {
    q localQ = c();
    a(localQ);
    unmarkReusable();
    localQ.a(paramM);
  }
  
  public void a(r paramR)
  {
    q localQ = c();
    a(localQ);
    unmarkReusable();
    localQ.a(paramR);
  }
  
  public void a(t paramT)
  {
    q localQ = c();
    a(localQ);
    unmarkReusable();
    localQ.a(paramT);
  }
  
  /* Error */
  public void abortConnection()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 31	c/a/a/a/i/c/a:d	Z
    //   6: istore_1
    //   7: iload_1
    //   8: ifeq +6 -> 14
    //   11: aload_0
    //   12: monitorexit
    //   13: return
    //   14: aload_0
    //   15: iconst_1
    //   16: putfield 31	c/a/a/a/i/c/a:d	Z
    //   19: aload_0
    //   20: invokevirtual 52	c/a/a/a/i/c/a:unmarkReusable	()V
    //   23: aload_0
    //   24: invokeinterface 70 1 0
    //   29: aload_0
    //   30: getfield 25	c/a/a/a/i/c/a:a	Lc/a/a/a/e/b;
    //   33: aload_0
    //   34: aload_0
    //   35: getfield 35	c/a/a/a/i/c/a:e	J
    //   38: getstatic 76	java/util/concurrent/TimeUnit:MILLISECONDS	Ljava/util/concurrent/TimeUnit;
    //   41: invokeinterface 81 5 0
    //   46: aload_0
    //   47: monitorexit
    //   48: return
    //   49: astore_2
    //   50: aload_0
    //   51: monitorexit
    //   52: aload_2
    //   53: athrow
    //   54: astore_2
    //   55: goto -26 -> 29
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	58	0	this	a
    //   6	2	1	bool	boolean
    //   49	4	2	localObject	Object
    //   54	1	2	localIOException	java.io.IOException
    // Exception table:
    //   from	to	target	type
    //   2	7	49	finally
    //   14	23	49	finally
    //   23	29	49	finally
    //   29	46	49	finally
    //   23	29	54	java/io/IOException
  }
  
  protected b b()
  {
    return a;
  }
  
  protected q c()
  {
    return b;
  }
  
  public boolean d()
  {
    return c;
  }
  
  protected boolean e()
  {
    return d;
  }
  
  public void flush()
  {
    q localQ = c();
    a(localQ);
    localQ.flush();
  }
  
  public Object getAttribute(String paramString)
  {
    q localQ = c();
    a(localQ);
    if ((localQ instanceof e)) {
      return ((e)localQ).getAttribute(paramString);
    }
    return null;
  }
  
  public InetAddress getRemoteAddress()
  {
    q localQ = c();
    a(localQ);
    return localQ.getRemoteAddress();
  }
  
  public int getRemotePort()
  {
    q localQ = c();
    a(localQ);
    return localQ.getRemotePort();
  }
  
  public SSLSession getSSLSession()
  {
    Object localObject = c();
    a((q)localObject);
    boolean bool = isOpen();
    SSLSession localSSLSession = null;
    if (!bool) {
      return null;
    }
    localObject = ((q)localObject).getSocket();
    if ((localObject instanceof SSLSocket)) {
      localSSLSession = ((SSLSocket)localObject).getSession();
    }
    return localSSLSession;
  }
  
  public boolean isOpen()
  {
    q localQ = c();
    if (localQ == null) {
      return false;
    }
    return localQ.isOpen();
  }
  
  public boolean isResponseAvailable(int paramInt)
  {
    q localQ = c();
    a(localQ);
    return localQ.isResponseAvailable(paramInt);
  }
  
  public boolean isStale()
  {
    if (e()) {
      return true;
    }
    q localQ = c();
    if (localQ == null) {
      return true;
    }
    return localQ.isStale();
  }
  
  public void markReusable()
  {
    c = true;
  }
  
  public t receiveResponseHeader()
  {
    q localQ = c();
    a(localQ);
    unmarkReusable();
    return localQ.receiveResponseHeader();
  }
  
  public void releaseConnection()
  {
    try
    {
      boolean bool = d;
      if (bool) {
        return;
      }
      d = true;
      a.a(this, e, TimeUnit.MILLISECONDS);
      return;
    }
    finally {}
  }
  
  public void setAttribute(String paramString, Object paramObject)
  {
    q localQ = c();
    a(localQ);
    if ((localQ instanceof e)) {
      ((e)localQ).setAttribute(paramString, paramObject);
    }
  }
  
  public void setIdleDuration(long paramLong, TimeUnit paramTimeUnit)
  {
    if (paramLong > 0L) {
      paramLong = paramTimeUnit.toMillis(paramLong);
    } else {
      paramLong = -1L;
    }
    e = paramLong;
  }
  
  public void setSocketTimeout(int paramInt)
  {
    q localQ = c();
    a(localQ);
    localQ.setSocketTimeout(paramInt);
  }
  
  public void unmarkReusable()
  {
    c = false;
  }
}
