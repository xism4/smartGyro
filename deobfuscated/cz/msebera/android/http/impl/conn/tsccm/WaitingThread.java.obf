package c.a.a.a.i.c.a;

import c.a.a.a.p.a;
import java.util.Date;
import java.util.concurrent.locks.Condition;

@Deprecated
public class j
{
  private final Condition a;
  private final g b;
  private Thread c;
  private boolean d;
  
  public j(Condition paramCondition, g paramG)
  {
    a.a(paramCondition, "Condition");
    a = paramCondition;
    b = paramG;
  }
  
  public void a()
  {
    d = true;
    a.signalAll();
  }
  
  public boolean a(Date paramDate)
  {
    if (c == null)
    {
      if (!d)
      {
        c = Thread.currentThread();
        if (paramDate != null) {}
        try
        {
          boolean bool1 = a.awaitUntil(paramDate);
          break label50;
          a.await();
          bool1 = true;
          label50:
          boolean bool2 = d;
          if (!bool2) {
            return bool1;
          }
          throw new InterruptedException("Operation interrupted");
        }
        finally
        {
          c = null;
        }
      }
      throw new InterruptedException("Operation interrupted");
    }
    paramDate = new StringBuilder();
    paramDate.append("A thread is already waiting on this object.\ncaller: ");
    paramDate.append(Thread.currentThread());
    paramDate.append("\nwaiter: ");
    paramDate.append(c);
    throw new IllegalStateException(paramDate.toString());
  }
  
  public void b()
  {
    if (c != null)
    {
      a.signalAll();
      return;
    }
    throw new IllegalStateException("Nobody waiting on this object.");
  }
}
