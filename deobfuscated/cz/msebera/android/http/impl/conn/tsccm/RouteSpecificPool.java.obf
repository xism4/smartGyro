package c.a.a.a.i.c.a;

import c.a.a.a.e.a.d;
import c.a.a.a.p.a;
import c.a.a.a.p.h;
import java.io.IOException;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Queue;

@Deprecated
public class g
{
  public c.a.a.a.h.b a = new c.a.a.a.h.b(g.class);
  protected final c.a.a.a.e.b.b b;
  protected final int c;
  protected final d d;
  protected final LinkedList<b> e;
  protected final Queue<j> f;
  protected int g;
  
  public g(c.a.a.a.e.b.b paramB, d paramD)
  {
    b = paramB;
    d = paramD;
    c = paramD.a(paramB);
    e = new LinkedList();
    f = new LinkedList();
    g = 0;
  }
  
  public b a(Object paramObject)
  {
    Object localObject;
    if (!e.isEmpty())
    {
      localObject = e;
      localObject = ((LinkedList)localObject).listIterator(((LinkedList)localObject).size());
      while (((ListIterator)localObject).hasPrevious())
      {
        b localB = (b)((ListIterator)localObject).previous();
        if ((localB.a() == null) || (h.a(paramObject, localB.a())))
        {
          ((ListIterator)localObject).remove();
          return localB;
        }
      }
    }
    if ((b() == 0) && (!e.isEmpty()))
    {
      paramObject = (b)e.remove();
      paramObject.b();
      localObject = paramObject.c();
      try
      {
        ((c.a.a.a.j)localObject).close();
        return paramObject;
      }
      catch (IOException localIOException)
      {
        a.a("I/O error closing connection", localIOException);
        return paramObject;
      }
    }
    return null;
  }
  
  public void a()
  {
    boolean bool;
    if (g > 0) {
      bool = true;
    } else {
      bool = false;
    }
    c.a.a.a.p.b.a(bool, "There is no entry that could be dropped");
    g -= 1;
  }
  
  public void a(b paramB)
  {
    a.a(b.equals(paramB.d()), "Entry not planned for this pool");
    g += 1;
  }
  
  public void a(j paramJ)
  {
    a.a(paramJ, "Waiting thread");
    f.add(paramJ);
  }
  
  public int b()
  {
    return d.a(b) - g;
  }
  
  public void b(j paramJ)
  {
    if (paramJ == null) {
      return;
    }
    f.remove(paramJ);
  }
  
  public boolean b(b paramB)
  {
    boolean bool = e.remove(paramB);
    if (bool) {
      g -= 1;
    }
    return bool;
  }
  
  public final int c()
  {
    return c;
  }
  
  public void c(b paramB)
  {
    int i = g;
    if (i >= 1)
    {
      if (i > e.size())
      {
        e.add(paramB);
        return;
      }
      paramB = new StringBuilder();
      paramB.append("No entry allocated from this pool. ");
      paramB.append(b);
      throw new IllegalStateException(paramB.toString());
    }
    paramB = new StringBuilder();
    paramB.append("No entry created for this pool. ");
    paramB.append(b);
    throw new IllegalStateException(paramB.toString());
  }
  
  public final c.a.a.a.e.b.b d()
  {
    return b;
  }
  
  public boolean e()
  {
    return f.isEmpty() ^ true;
  }
  
  public boolean f()
  {
    return (g < 1) && (f.isEmpty());
  }
  
  public j g()
  {
    return (j)f.peek();
  }
}
