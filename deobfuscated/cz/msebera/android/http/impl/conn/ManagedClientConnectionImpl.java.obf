package c.a.a.a.i.c;

import c.a.a.a.e.d;
import c.a.a.a.e.q;
import c.a.a.a.i;
import c.a.a.a.j;
import c.a.a.a.l.g;
import c.a.a.a.m;
import c.a.a.a.n.e;
import c.a.a.a.r;
import c.a.a.a.t;
import java.io.InterruptedIOException;
import java.net.InetAddress;
import java.net.Socket;
import java.util.concurrent.TimeUnit;
import javax.net.ssl.SSLSession;
import javax.net.ssl.SSLSocket;

@Deprecated
class p
  implements c.a.a.a.e.o
{
  private final c.a.a.a.e.b a;
  private final d b;
  private volatile l c;
  private volatile boolean d;
  private volatile long e;
  
  p(c.a.a.a.e.b paramB, d paramD, l paramL)
  {
    c.a.a.a.p.a.a(paramB, "Connection manager");
    c.a.a.a.p.a.a(paramD, "Connection operator");
    c.a.a.a.p.a.a(paramL, "HTTP pool entry");
    a = paramB;
    b = paramD;
    c = paramL;
    d = false;
    e = Long.MAX_VALUE;
  }
  
  private q e()
  {
    l localL = c;
    if (localL != null) {
      return (q)localL.a();
    }
    throw new f();
  }
  
  private l f()
  {
    l localL = c;
    if (localL != null) {
      return localL;
    }
    throw new f();
  }
  
  private q g()
  {
    l localL = c;
    if (localL == null) {
      return null;
    }
    return (q)localL.a();
  }
  
  l a()
  {
    l localL = c;
    c = null;
    return localL;
  }
  
  public void a(c.a.a.a.e.b.b paramB, e paramE, g paramG)
  {
    c.a.a.a.p.a.a(paramB, "Route");
    c.a.a.a.p.a.a(paramG, "HTTP parameters");
    for (;;)
    {
      try
      {
        if (c != null)
        {
          Object localObject = c.g();
          c.a.a.a.p.b.a(localObject, "Route tracker");
          if (!((c.a.a.a.e.b.f)localObject).a())
          {
            bool = true;
            c.a.a.a.p.b.a(bool, "Connection already open");
            q localQ = (q)c.a();
            c.a.a.a.o localO = paramB.getProxyHost();
            d localD = b;
            if (localO != null) {
              localObject = localO;
            } else {
              localObject = paramB.getTargetHost();
            }
            localD.a(localQ, (c.a.a.a.o)localObject, paramB.getLocalAddress(), paramE, paramG);
            try
            {
              if (c != null)
              {
                paramB = c.g();
                if (localO == null) {
                  paramB.a(localQ.isSecure());
                } else {
                  paramB.a(localO, localQ.isSecure());
                }
                return;
              }
              throw new InterruptedIOException();
            }
            finally {}
          }
        }
        else
        {
          throw new f();
        }
      }
      finally {}
      boolean bool = false;
    }
  }
  
  public void a(m paramM)
  {
    e().a(paramM);
  }
  
  public void a(e paramE, g paramG)
  {
    c.a.a.a.p.a.a(paramG, "HTTP parameters");
    for (;;)
    {
      try
      {
        if (c != null)
        {
          Object localObject = c.g();
          c.a.a.a.p.b.a(localObject, "Route tracker");
          c.a.a.a.p.b.a(((c.a.a.a.e.b.f)localObject).a(), "Connection not open");
          c.a.a.a.p.b.a(((c.a.a.a.e.b.f)localObject).isTunnelled(), "Protocol layering without a tunnel not supported");
          if (!((c.a.a.a.e.b.f)localObject).isLayered())
          {
            bool = true;
            c.a.a.a.p.b.a(bool, "Multiple protocol layering not supported");
            localObject = ((c.a.a.a.e.b.f)localObject).getTargetHost();
            q localQ = (q)c.a();
            b.a(localQ, (c.a.a.a.o)localObject, paramE, paramG);
            try
            {
              if (c != null)
              {
                c.g().b(localQ.isSecure());
                return;
              }
              throw new InterruptedIOException();
            }
            finally {}
          }
        }
        else
        {
          throw new f();
        }
      }
      finally {}
      boolean bool = false;
    }
  }
  
  public void a(r paramR)
  {
    e().a(paramR);
  }
  
  public void a(t paramT)
  {
    e().a(paramT);
  }
  
  public void a(boolean paramBoolean, g paramG)
  {
    c.a.a.a.p.a.a(paramG, "HTTP parameters");
    for (;;)
    {
      try
      {
        if (c != null)
        {
          Object localObject = c.g();
          c.a.a.a.p.b.a(localObject, "Route tracker");
          c.a.a.a.p.b.a(((c.a.a.a.e.b.f)localObject).a(), "Connection not open");
          if (!((c.a.a.a.e.b.f)localObject).isTunnelled())
          {
            bool = true;
            c.a.a.a.p.b.a(bool, "Connection is already tunnelled");
            localObject = ((c.a.a.a.e.b.f)localObject).getTargetHost();
            q localQ = (q)c.a();
            localQ.a(null, (c.a.a.a.o)localObject, paramBoolean, paramG);
            try
            {
              if (c != null)
              {
                c.g().c(paramBoolean);
                return;
              }
              throw new InterruptedIOException();
            }
            finally {}
          }
        }
        else
        {
          throw new f();
        }
      }
      finally {}
      boolean bool = false;
    }
  }
  
  /* Error */
  public void abortConnection()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: getfield 39	c/a/a/a/i/c/p:c	Lc/a/a/a/i/c/l;
    //   6: ifnonnull +6 -> 12
    //   9: aload_0
    //   10: monitorexit
    //   11: return
    //   12: aload_0
    //   13: iconst_0
    //   14: putfield 41	c/a/a/a/i/c/p:d	Z
    //   17: aload_0
    //   18: getfield 39	c/a/a/a/i/c/p:c	Lc/a/a/a/i/c/l;
    //   21: invokevirtual 52	c/a/a/a/m/a:a	()Ljava/lang/Object;
    //   24: checkcast 54	c/a/a/a/e/q
    //   27: astore_1
    //   28: aload_1
    //   29: invokeinterface 165 1 0
    //   34: aload_0
    //   35: getfield 35	c/a/a/a/i/c/p:a	Lc/a/a/a/e/b;
    //   38: aload_0
    //   39: aload_0
    //   40: getfield 45	c/a/a/a/i/c/p:e	J
    //   43: getstatic 171	java/util/concurrent/TimeUnit:MILLISECONDS	Ljava/util/concurrent/TimeUnit;
    //   46: invokeinterface 176 5 0
    //   51: aload_0
    //   52: aconst_null
    //   53: putfield 39	c/a/a/a/i/c/p:c	Lc/a/a/a/i/c/l;
    //   56: aload_0
    //   57: monitorexit
    //   58: return
    //   59: astore_1
    //   60: aload_0
    //   61: monitorexit
    //   62: aload_1
    //   63: athrow
    //   64: astore_1
    //   65: goto -31 -> 34
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	68	0	this	p
    //   27	2	1	localQ	q
    //   59	4	1	localObject	Object
    //   64	1	1	localIOException	java.io.IOException
    // Exception table:
    //   from	to	target	type
    //   2	11	59	finally
    //   12	28	59	finally
    //   28	34	59	finally
    //   34	58	59	finally
    //   60	62	59	finally
    //   28	34	64	java/io/IOException
  }
  
  public c.a.a.a.e.b b()
  {
    return a;
  }
  
  l c()
  {
    return c;
  }
  
  public void close()
  {
    l localL = c;
    if (localL != null)
    {
      q localQ = (q)localL.a();
      localL.g().b();
      localQ.close();
    }
  }
  
  public boolean d()
  {
    return d;
  }
  
  public void flush()
  {
    e().flush();
  }
  
  public InetAddress getRemoteAddress()
  {
    return e().getRemoteAddress();
  }
  
  public int getRemotePort()
  {
    return e().getRemotePort();
  }
  
  public c.a.a.a.e.b.b getRoute()
  {
    return f().e();
  }
  
  public SSLSession getSSLSession()
  {
    Socket localSocket = e().getSocket();
    if ((localSocket instanceof SSLSocket)) {
      return ((SSLSocket)localSocket).getSession();
    }
    return null;
  }
  
  public boolean isOpen()
  {
    q localQ = g();
    if (localQ != null) {
      return localQ.isOpen();
    }
    return false;
  }
  
  public boolean isResponseAvailable(int paramInt)
  {
    return e().isResponseAvailable(paramInt);
  }
  
  public boolean isStale()
  {
    q localQ = g();
    if (localQ != null) {
      return localQ.isStale();
    }
    return true;
  }
  
  public void markReusable()
  {
    d = true;
  }
  
  public t receiveResponseHeader()
  {
    return e().receiveResponseHeader();
  }
  
  public void releaseConnection()
  {
    try
    {
      if (c == null) {
        return;
      }
      a.a(this, e, TimeUnit.MILLISECONDS);
      c = null;
      return;
    }
    finally {}
  }
  
  public void setIdleDuration(long paramLong, TimeUnit paramTimeUnit)
  {
    if (paramLong > 0L) {
      paramLong = paramTimeUnit.toMillis(paramLong);
    } else {
      paramLong = -1L;
    }
    e = paramLong;
  }
  
  public void setSocketTimeout(int paramInt)
  {
    e().setSocketTimeout(paramInt);
  }
  
  public void setState(Object paramObject)
  {
    f().a(paramObject);
  }
  
  public void shutdown()
  {
    l localL = c;
    if (localL != null)
    {
      q localQ = (q)localL.a();
      localL.g().b();
      localQ.shutdown();
    }
  }
  
  public void unmarkReusable()
  {
    d = false;
  }
}
