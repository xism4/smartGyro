package c.a.a.a.i.c;

import c.a.a.a.e.c.i;
import c.a.a.a.e.d;
import c.a.a.a.e.m;
import c.a.a.a.e.q;
import c.a.a.a.o;
import c.a.a.a.p.a;
import java.net.ConnectException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;

@Deprecated
public class h
  implements d
{
  public c.a.a.a.h.b a = new c.a.a.a.h.b(h.class);
  protected final i b;
  protected final c.a.a.a.e.j c;
  
  public h(i paramI)
  {
    a.a(paramI, "Scheme registry");
    b = paramI;
    c = new r();
  }
  
  private i a(c.a.a.a.n.e paramE)
  {
    i localI = (i)paramE.getAttribute("http.scheme-registry");
    paramE = localI;
    if (localI == null) {
      paramE = b;
    }
    return paramE;
  }
  
  public void a(q paramQ, o paramO, c.a.a.a.n.e paramE, c.a.a.a.l.g paramG)
  {
    a.a(paramQ, "Connection");
    a.a(paramO, "Target host");
    a.a(paramG, "Parameters");
    c.a.a.a.p.b.a(paramQ.isOpen(), "Connection must be open");
    Object localObject = a(paramE).b(paramO.d());
    c.a.a.a.p.b.a(((c.a.a.a.e.c.e)localObject).c() instanceof c.a.a.a.e.c.f, "Socket factory must implement SchemeLayeredSocketFactory");
    c.a.a.a.e.c.f localF = (c.a.a.a.e.c.f)((c.a.a.a.e.c.e)localObject).c();
    localObject = localF.a(paramQ.getSocket(), paramO.b(), ((c.a.a.a.e.c.e)localObject).a(paramO.c()), paramG);
    a((Socket)localObject, paramE, paramG);
    paramQ.a((Socket)localObject, paramO, localF.isSecure((Socket)localObject), paramG);
  }
  
  public void a(q paramQ, o paramO, InetAddress paramInetAddress, c.a.a.a.n.e paramE, c.a.a.a.l.g paramG)
  {
    a.a(paramQ, "Connection");
    a.a(paramO, "Target host");
    a.a(paramG, "HTTP parameters");
    boolean bool;
    if (!paramQ.isOpen()) {
      bool = true;
    } else {
      bool = false;
    }
    c.a.a.a.p.b.a(bool, "Connection must not be open");
    Object localObject1 = a(paramE).b(paramO.d());
    c.a.a.a.e.c.j localJ = ((c.a.a.a.e.c.e)localObject1).c();
    InetAddress[] arrayOfInetAddress = a(paramO.b());
    int k = ((c.a.a.a.e.c.e)localObject1).a(paramO.c());
    int i = 0;
    for (;;)
    {
      Object localObject3 = paramInetAddress;
      if (i < arrayOfInetAddress.length)
      {
        localObject1 = arrayOfInetAddress[i];
        int j;
        if (i == arrayOfInetAddress.length - 1) {
          j = 1;
        } else {
          j = 0;
        }
        Object localObject2 = localJ.a(paramG);
        paramQ.a((Socket)localObject2, paramO);
        m localM = new m(paramO, (InetAddress)localObject1, k);
        localObject1 = null;
        if (localObject3 != null) {
          localObject1 = new InetSocketAddress((InetAddress)localObject3, 0);
        }
        if (a.a())
        {
          localObject3 = a;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Connecting to ");
          localStringBuilder.append(localM);
          ((c.a.a.a.h.b)localObject3).a(localStringBuilder.toString());
        }
        try
        {
          localObject3 = localJ.a((Socket)localObject2, localM, (InetSocketAddress)localObject1, paramG);
          localObject1 = localObject2;
          if (localObject2 != localObject3)
          {
            paramQ.a((Socket)localObject3, paramO);
            localObject1 = localObject3;
          }
          a((Socket)localObject1, paramE, paramG);
          paramQ.b(localJ.isSecure((Socket)localObject1), paramG);
          return;
        }
        catch (c.a.a.a.e.f localF)
        {
          if (j != 0) {
            throw localF;
          }
        }
        catch (ConnectException localConnectException)
        {
          c.a.a.a.h.b localB;
          if (j == 0)
          {
            if (a.a())
            {
              localB = a;
              localObject2 = new StringBuilder();
              ((StringBuilder)localObject2).append("Connect to ");
              ((StringBuilder)localObject2).append(localM);
              ((StringBuilder)localObject2).append(" timed out. ");
              ((StringBuilder)localObject2).append("Connection will be retried using another IP address");
              localB.a(((StringBuilder)localObject2).toString());
            }
            i += 1;
          }
          else
          {
            throw localB;
          }
        }
      }
    }
  }
  
  protected void a(Socket paramSocket, c.a.a.a.n.e paramE, c.a.a.a.l.g paramG)
  {
    paramSocket.setTcpNoDelay(c.a.a.a.l.e.e(paramG));
    paramSocket.setSoTimeout(c.a.a.a.l.e.d(paramG));
    int i = c.a.a.a.l.e.b(paramG);
    if (i >= 0)
    {
      boolean bool;
      if (i > 0) {
        bool = true;
      } else {
        bool = false;
      }
      paramSocket.setSoLinger(bool, i);
    }
  }
  
  protected InetAddress[] a(String paramString)
  {
    return c.resolve(paramString);
  }
  
  public q createConnection()
  {
    return new g();
  }
}
