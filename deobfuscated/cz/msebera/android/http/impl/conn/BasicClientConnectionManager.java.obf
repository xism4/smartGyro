package c.a.a.a.i.c;

import c.a.a.a.e.b.f;
import c.a.a.a.e.o;
import c.a.a.a.e.q;
import c.a.a.a.j;
import java.io.IOException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicLong;

@Deprecated
public class e
  implements c.a.a.a.e.b
{
  private static final AtomicLong a = new AtomicLong();
  public c.a.a.a.h.b b = new c.a.a.a.h.b(e.class);
  private final c.a.a.a.e.c.i c;
  private final c.a.a.a.e.d d;
  private l e;
  private p f;
  private volatile boolean g;
  
  public e(c.a.a.a.e.c.i paramI)
  {
    c.a.a.a.p.a.a(paramI, "Scheme registry");
    c = paramI;
    d = a(paramI);
  }
  
  private void a()
  {
    c.a.a.a.p.b.a(g ^ true, "Connection manager has been shut down");
  }
  
  private void a(c.a.a.a.i paramI)
  {
    try
    {
      paramI.shutdown();
      return;
    }
    catch (IOException paramI)
    {
      if (b.a()) {
        b.a("I/O exception shutting down connection", paramI);
      }
    }
  }
  
  protected c.a.a.a.e.d a(c.a.a.a.e.c.i paramI)
  {
    return new h(paramI);
  }
  
  public final c.a.a.a.e.e a(c.a.a.a.e.b.b paramB, Object paramObject)
  {
    return new d(this, paramB, paramObject);
  }
  
  public void a(o paramO, long paramLong, TimeUnit paramTimeUnit)
  {
    c.a.a.a.p.a.a(paramO instanceof p, "Connection class mismatch, connection not obtained from this manager");
    for (;;)
    {
      synchronized ((p)paramO)
      {
        Object localObject;
        if (b.a())
        {
          localObject = b;
          StringBuilder localStringBuilder = new StringBuilder();
          localStringBuilder.append("Releasing connection ");
          localStringBuilder.append(paramO);
          ((c.a.a.a.h.b)localObject).a(localStringBuilder.toString());
        }
        if (???.c() == null) {
          return;
        }
        if (???.b() == this)
        {
          bool = true;
          c.a.a.a.p.b.a(bool, "Connection not obtained from this manager");
          try
          {
            if (g)
            {
              a(???);
              return;
            }
            try
            {
              if ((???.isOpen()) && (!???.d())) {
                a(???);
              }
              if (???.d())
              {
                localObject = e;
                if (paramTimeUnit != null) {
                  paramO = paramTimeUnit;
                } else {
                  paramO = TimeUnit.MILLISECONDS;
                }
                ((c.a.a.a.m.a)localObject).a(paramLong, paramO);
                if (b.a())
                {
                  if (paramLong <= 0L) {
                    break label358;
                  }
                  paramO = new StringBuilder();
                  paramO.append("for ");
                  paramO.append(paramLong);
                  paramO.append(" ");
                  paramO.append(paramTimeUnit);
                  paramO = paramO.toString();
                  paramTimeUnit = b;
                  localObject = new StringBuilder();
                  ((StringBuilder)localObject).append("Connection can be kept alive ");
                  ((StringBuilder)localObject).append(paramO);
                  paramTimeUnit.a(((StringBuilder)localObject).toString());
                }
              }
              ???.a();
              f = null;
              if (e.h()) {
                e = null;
              }
              return;
            }
            finally
            {
              ???.a();
              f = null;
              if (e.h()) {
                e = null;
              }
            }
            paramO = finally;
          }
          finally {}
        }
      }
      boolean bool = false;
      continue;
      label358:
      paramO = "indefinitely";
    }
  }
  
  o b(c.a.a.a.e.b.b paramB, Object paramObject)
  {
    c.a.a.a.p.a.a(paramB, "Route");
    for (;;)
    {
      try
      {
        a();
        Object localObject;
        if (b.a())
        {
          paramObject = b;
          localObject = new StringBuilder();
          ((StringBuilder)localObject).append("Get connection for route ");
          ((StringBuilder)localObject).append(paramB);
          paramObject.a(((StringBuilder)localObject).toString());
        }
        if (f == null)
        {
          bool = true;
          c.a.a.a.p.b.a(bool, "Invalid use of BasicClientConnManager: connection still allocated.\nMake sure to release the connection before allocating another one.");
          if ((e != null) && (!e.f().equals(paramB)))
          {
            e.d();
            e = null;
          }
          if (e == null)
          {
            paramObject = Long.toString(a.getAndIncrement());
            localObject = d.createConnection();
            e = new l(b, paramObject, paramB, (q)localObject, 0L, TimeUnit.MILLISECONDS);
          }
          long l = System.currentTimeMillis();
          if (e.a(l))
          {
            e.d();
            e.g().b();
          }
          f = new p(this, d, e);
          paramB = f;
          return paramB;
        }
      }
      finally {}
      boolean bool = false;
    }
  }
  
  protected void finalize()
  {
    try
    {
      shutdown();
      return;
    }
    finally
    {
      super.finalize();
    }
  }
  
  public c.a.a.a.e.c.i getSchemeRegistry()
  {
    return c;
  }
  
  /* Error */
  public void shutdown()
  {
    // Byte code:
    //   0: aload_0
    //   1: monitorenter
    //   2: aload_0
    //   3: iconst_1
    //   4: putfield 58	c/a/a/a/i/c/e:g	Z
    //   7: aload_0
    //   8: getfield 130	c/a/a/a/i/c/e:e	Lc/a/a/a/i/c/l;
    //   11: ifnull +10 -> 21
    //   14: aload_0
    //   15: getfield 130	c/a/a/a/i/c/e:e	Lc/a/a/a/i/c/l;
    //   18: invokevirtual 181	c/a/a/a/i/c/l:d	()V
    //   21: aload_0
    //   22: aconst_null
    //   23: putfield 130	c/a/a/a/i/c/e:e	Lc/a/a/a/i/c/l;
    //   26: aload_0
    //   27: aconst_null
    //   28: putfield 154	c/a/a/a/i/c/e:f	Lc/a/a/a/i/c/p;
    //   31: aload_0
    //   32: monitorexit
    //   33: return
    //   34: astore_1
    //   35: aload_0
    //   36: aconst_null
    //   37: putfield 130	c/a/a/a/i/c/e:e	Lc/a/a/a/i/c/l;
    //   40: aload_0
    //   41: aconst_null
    //   42: putfield 154	c/a/a/a/i/c/e:f	Lc/a/a/a/i/c/p;
    //   45: aload_1
    //   46: athrow
    //   47: astore_1
    //   48: aload_0
    //   49: monitorexit
    //   50: aload_1
    //   51: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	52	0	this	e
    //   34	12	1	localObject1	Object
    //   47	4	1	localObject2	Object
    // Exception table:
    //   from	to	target	type
    //   7	21	34	finally
    //   2	7	47	finally
    //   21	33	47	finally
    //   35	47	47	finally
    //   48	50	47	finally
  }
}
