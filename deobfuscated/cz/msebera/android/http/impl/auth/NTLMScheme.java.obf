package c.a.a.a.i.a;

import c.a.a.a.a.n;
import c.a.a.a.a.o;
import c.a.a.a.a.p;
import c.a.a.a.a.q;
import c.a.a.a.e;
import c.a.a.a.p.d;
import c.a.a.a.r;

public class k
  extends a
{
  private final i b;
  private a c;
  private String d;
  
  public k()
  {
    this(new j());
  }
  
  public k(i paramI)
  {
    c.a.a.a.p.a.a(paramI, "NTLM engine");
    b = paramI;
    c = a.a;
    d = null;
  }
  
  public e a(n paramN, r paramR)
  {
    try
    {
      paramR = (q)paramN;
      paramN = c;
      if (paramN != a.f)
      {
        if (paramN != a.b)
        {
          if (paramN == a.d)
          {
            paramN = b;
            paramR.b();
            throw null;
          }
          paramN = new StringBuilder();
          paramN.append("Unexpected state: ");
          paramN.append(c);
          throw new c.a.a.a.a.j(paramN.toString());
        }
        paramN = b;
        paramR.a();
        throw null;
      }
      throw new c.a.a.a.a.j("NTLM authentication failed");
    }
    catch (ClassCastException paramR)
    {
      for (;;) {}
    }
    paramR = new StringBuilder();
    paramR.append("Credentials cannot be used for NTLM authentication: ");
    paramR.append(paramN.getClass().getName());
    throw new o(paramR.toString());
  }
  
  protected void a(d paramD, int paramInt1, int paramInt2)
  {
    d = paramD.b(paramInt1, paramInt2);
    if (d.isEmpty()) {
      if (c == a.a) {
        paramD = a.b;
      }
    }
    for (paramD = a.f;; paramD = a.d)
    {
      c = paramD;
      return;
      if (c.compareTo(a.c) < 0) {
        break label78;
      }
      if (c != a.c) {
        break;
      }
    }
    return;
    label78:
    c = a.f;
    paramD = new p("Out of sequence NTLM response message");
    for (;;)
    {
      throw paramD;
    }
  }
  
  public String getRealm()
  {
    return null;
  }
  
  public String getSchemeName()
  {
    return "ntlm";
  }
  
  public boolean isComplete()
  {
    a localA = c;
    return (localA == a.e) || (localA == a.f);
  }
  
  public boolean isConnectionBased()
  {
    return true;
  }
  
  static enum a
  {
    private a() {}
  }
}
