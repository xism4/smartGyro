package c.a.a.a.i.a;

import c.a.a.a.a.c;
import c.a.a.a.a.l;
import c.a.a.a.a.m;
import c.a.a.a.a.n;
import c.a.a.a.a.p;
import c.a.a.a.r;
import java.util.Locale;

public abstract class a
  implements m
{
  private l a;
  
  public a() {}
  
  public c.a.a.a.e a(n paramN, r paramR, c.a.a.a.n.e paramE)
  {
    return a(paramN, paramR);
  }
  
  public void a(c.a.a.a.e paramE)
  {
    c.a.a.a.p.a.a(paramE, "Header");
    Object localObject = paramE.getName();
    if (((String)localObject).equalsIgnoreCase("WWW-Authenticate")) {}
    for (localObject = l.a;; localObject = l.b)
    {
      a = ((l)localObject);
      break;
      if (!((String)localObject).equalsIgnoreCase("Proxy-Authenticate")) {
        break label254;
      }
    }
    int i;
    if ((paramE instanceof c.a.a.a.d))
    {
      localObject = (c.a.a.a.d)paramE;
      paramE = ((c.a.a.a.d)localObject).getBuffer();
      i = ((c.a.a.a.d)localObject).getValuePos();
    }
    else
    {
      localObject = paramE.getValue();
      if (localObject == null) {
        break label244;
      }
      paramE = new c.a.a.a.p.d(((String)localObject).length());
      paramE.a((String)localObject);
      i = 0;
    }
    while ((i < paramE.length()) && (c.a.a.a.n.d.a(paramE.charAt(i)))) {
      i += 1;
    }
    int j = i;
    while ((j < paramE.length()) && (!c.a.a.a.n.d.a(paramE.charAt(j)))) {
      j += 1;
    }
    localObject = paramE.a(i, j);
    if (((String)localObject).equalsIgnoreCase(getSchemeName()))
    {
      a(paramE, j, paramE.length());
      return;
    }
    paramE = new StringBuilder();
    paramE.append("Invalid scheme identifier: ");
    paramE.append((String)localObject);
    throw new p(paramE.toString());
    label244:
    throw new p("Header value is null");
    label254:
    paramE = new StringBuilder();
    paramE.append("Unexpected header name: ");
    paramE.append((String)localObject);
    paramE = new p(paramE.toString());
    for (;;)
    {
      throw paramE;
    }
  }
  
  protected abstract void a(c.a.a.a.p.d paramD, int paramInt1, int paramInt2);
  
  public boolean a()
  {
    l localL = a;
    return (localL != null) && (localL == l.b);
  }
  
  public String toString()
  {
    String str = getSchemeName();
    if (str != null) {
      return str.toUpperCase(Locale.ROOT);
    }
    return super.toString();
  }
}
