package c.a.a.a.i.a;

import c.a.a.a.F;
import c.a.a.a.a.j;
import c.a.a.a.a.p;
import c.a.a.a.c;
import c.a.a.a.k.q;
import c.a.a.a.l;
import c.a.a.a.r;
import java.io.IOException;
import java.nio.charset.Charset;
import java.security.MessageDigest;
import java.security.Principal;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Formatter;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.StringTokenizer;

public class d
  extends m
{
  private static final char[] d = { 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102 };
  private boolean e = false;
  private String f;
  private long g;
  private String h;
  private String i;
  private String j;
  
  public d()
  {
    this(c.b);
  }
  
  public d(Charset paramCharset)
  {
    super(paramCharset);
  }
  
  static String a(byte[] paramArrayOfByte)
  {
    int m = paramArrayOfByte.length;
    char[] arrayOfChar1 = new char[m * 2];
    int k = 0;
    while (k < m)
    {
      int n = paramArrayOfByte[k];
      int i1 = paramArrayOfByte[k];
      int i2 = k * 2;
      char[] arrayOfChar2 = d;
      arrayOfChar1[i2] = arrayOfChar2[((i1 & 0xF0) >> 4)];
      arrayOfChar1[(i2 + 1)] = arrayOfChar2[(n & 0xF)];
      k += 1;
    }
    return new String(arrayOfChar1);
  }
  
  private c.a.a.a.e b(c.a.a.a.a.n paramN, r paramR)
  {
    String str2 = a("uri");
    Object localObject4 = a("realm");
    String str3 = a("nonce");
    String str1 = a("opaque");
    Object localObject5 = a("methodname");
    Object localObject2 = a("algorithm");
    Object localObject1 = localObject2;
    if (localObject2 == null) {
      localObject1 = "MD5";
    }
    HashSet localHashSet = new HashSet(8);
    Object localObject3 = a("qop");
    int k;
    if (localObject3 != null)
    {
      localObject2 = new StringTokenizer((String)localObject3, ",");
      while (((StringTokenizer)localObject2).hasMoreTokens()) {
        localHashSet.add(((StringTokenizer)localObject2).nextToken().trim().toLowerCase(Locale.ROOT));
      }
      if (((paramR instanceof c.a.a.a.m)) && (localHashSet.contains("auth-int"))) {
        k = 1;
      } else if (localHashSet.contains("auth")) {
        k = 2;
      } else {
        k = -1;
      }
    }
    else
    {
      k = 0;
    }
    if (k != -1)
    {
      localObject3 = a("charset");
      localObject2 = localObject3;
      if (localObject3 == null) {
        localObject2 = "ISO-8859-1";
      }
      if (((String)localObject1).equalsIgnoreCase("MD5-sess")) {
        localObject3 = "MD5";
      } else {
        localObject3 = localObject1;
      }
    }
    try
    {
      Object localObject6 = b((String)localObject3);
      String str4 = paramN.getUserPrincipal().getName();
      paramN = paramN.getPassword();
      if (str3.equals(f))
      {
        g += 1L;
      }
      else
      {
        g = 1L;
        h = null;
        f = str3;
      }
      localObject3 = localObject4;
      StringBuilder localStringBuilder = new StringBuilder(256);
      localObject4 = new Formatter(localStringBuilder, Locale.US);
      ((Formatter)localObject4).format("%08x", new Object[] { Long.valueOf(g) });
      ((Formatter)localObject4).close();
      localObject4 = localStringBuilder.toString();
      if (h == null) {
        h = d();
      }
      i = null;
      j = null;
      if (((String)localObject1).equalsIgnoreCase("MD5-sess"))
      {
        localStringBuilder.setLength(0);
        localStringBuilder.append(str4);
        localStringBuilder.append(':');
        localStringBuilder.append((String)localObject3);
        localStringBuilder.append(':');
        localStringBuilder.append(paramN);
        paramN = a(((MessageDigest)localObject6).digest(c.a.a.a.p.f.a(localStringBuilder.toString(), (String)localObject2)));
        localStringBuilder.setLength(0);
        localStringBuilder.append(paramN);
        localStringBuilder.append(':');
        localStringBuilder.append(str3);
        localStringBuilder.append(':');
        paramN = h;
      }
      else
      {
        localStringBuilder.setLength(0);
        localStringBuilder.append(str4);
        localStringBuilder.append(':');
        localStringBuilder.append((String)localObject3);
        localStringBuilder.append(':');
      }
      localStringBuilder.append(paramN);
      i = localStringBuilder.toString();
      String str5 = a(((MessageDigest)localObject6).digest(c.a.a.a.p.f.a(i, (String)localObject2)));
      if (k == 2)
      {
        paramN = new StringBuilder();
        paramN.append((String)localObject5);
        paramN.append(':');
        paramN.append(str2);
        j = paramN.toString();
      }
      else
      {
        if (k == 1)
        {
          if ((paramR instanceof c.a.a.a.m)) {
            paramN = ((c.a.a.a.m)paramR).getEntity();
          } else {
            paramN = null;
          }
          if ((paramN != null) && (!paramN.isRepeatable()))
          {
            if (localHashSet.contains("auth"))
            {
              paramN = new StringBuilder();
              paramN.append((String)localObject5);
              paramN.append(':');
              paramN.append(str2);
              j = paramN.toString();
              k = 2;
              break label852;
            }
            throw new j("Qop auth-int cannot be used with a non-repeatable entity");
          }
          paramR = new h((MessageDigest)localObject6);
          if (paramN == null) {}
        }
        for (;;)
        {
          try
          {
            paramN.writeTo(paramR);
            paramR.close();
            paramN = new StringBuilder();
            paramN.append((String)localObject5);
            paramN.append(':');
            paramN.append(str2);
            paramN.append(':');
            paramN.append(a(paramR.a()));
            j = paramN.toString();
          }
          catch (IOException paramN)
          {
            throw new j("I/O error reading entity content", paramN);
          }
          paramN = new StringBuilder();
          paramN.append((String)localObject5);
          paramN.append(':');
          paramN.append(str2);
        }
      }
      label852:
      paramR = "auth";
      localObject2 = a(((MessageDigest)localObject6).digest(c.a.a.a.p.f.a(j, (String)localObject2)));
      if (k == 0)
      {
        localStringBuilder.setLength(0);
        localStringBuilder.append(str5);
        localStringBuilder.append(':');
        localStringBuilder.append(str3);
      }
      for (;;)
      {
        localStringBuilder.append(':');
        localStringBuilder.append((String)localObject2);
        paramN = localStringBuilder.toString();
        break;
        localStringBuilder.setLength(0);
        localStringBuilder.append(str5);
        localStringBuilder.append(':');
        localStringBuilder.append(str3);
        localStringBuilder.append(':');
        localStringBuilder.append((String)localObject4);
        localStringBuilder.append(':');
        localStringBuilder.append(h);
        localStringBuilder.append(':');
        if (k == 1) {
          paramN = "auth-int";
        } else {
          paramN = "auth";
        }
        localStringBuilder.append(paramN);
      }
      localObject6 = a(((MessageDigest)localObject6).digest(c.a.a.a.p.f.a(paramN)));
      localObject2 = new c.a.a.a.p.d(128);
      if (a()) {
        paramN = "Proxy-Authorization";
      } else {
        paramN = "Authorization";
      }
      ((c.a.a.a.p.d)localObject2).a(paramN);
      ((c.a.a.a.p.d)localObject2).a(": Digest ");
      localObject5 = new ArrayList(20);
      ((List)localObject5).add(new c.a.a.a.k.m("username", str4));
      ((List)localObject5).add(new c.a.a.a.k.m("realm", (String)localObject3));
      ((List)localObject5).add(new c.a.a.a.k.m("nonce", str3));
      ((List)localObject5).add(new c.a.a.a.k.m("uri", str2));
      ((List)localObject5).add(new c.a.a.a.k.m("response", (String)localObject6));
      if (k != 0)
      {
        paramN = paramR;
        if (k == 1) {
          paramN = "auth-int";
        }
        ((List)localObject5).add(new c.a.a.a.k.m("qop", paramN));
        ((List)localObject5).add(new c.a.a.a.k.m("nc", (String)localObject4));
        ((List)localObject5).add(new c.a.a.a.k.m("cnonce", h));
      }
      ((List)localObject5).add(new c.a.a.a.k.m("algorithm", (String)localObject1));
      if (str1 != null) {
        ((List)localObject5).add(new c.a.a.a.k.m("opaque", str1));
      }
      k = 0;
      while (k < ((List)localObject5).size())
      {
        paramN = (c.a.a.a.k.m)((List)localObject5).get(k);
        if (k > 0) {
          ((c.a.a.a.p.d)localObject2).a(", ");
        }
        paramR = paramN.getName();
        int m;
        if ((!"nc".equals(paramR)) && (!"qop".equals(paramR)) && (!"algorithm".equals(paramR))) {
          m = 0;
        } else {
          m = 1;
        }
        c.a.a.a.k.f.b.a((c.a.a.a.p.d)localObject2, paramN, m ^ 0x1);
        k += 1;
      }
      return new q((c.a.a.a.p.d)localObject2);
    }
    catch (n paramN)
    {
      for (;;) {}
    }
    paramN = new StringBuilder();
    paramN.append("Unsuppported digest algorithm: ");
    paramN.append((String)localObject3);
    throw new j(paramN.toString());
    paramN = new StringBuilder();
    paramN.append("None of the qop methods is supported: ");
    paramN.append((String)localObject3);
    paramN = new j(paramN.toString());
    for (;;)
    {
      throw paramN;
    }
  }
  
  private static MessageDigest b(String paramString)
  {
    try
    {
      localObject = MessageDigest.getInstance(paramString);
      return localObject;
    }
    catch (Exception localException)
    {
      Object localObject;
      for (;;) {}
    }
    localObject = new StringBuilder();
    ((StringBuilder)localObject).append("Unsupported algorithm in HTTP Digest authentication: ");
    ((StringBuilder)localObject).append(paramString);
    throw new n(((StringBuilder)localObject).toString());
  }
  
  public static String d()
  {
    SecureRandom localSecureRandom = new SecureRandom();
    byte[] arrayOfByte = new byte[8];
    localSecureRandom.nextBytes(arrayOfByte);
    return a(arrayOfByte);
  }
  
  @Deprecated
  public c.a.a.a.e a(c.a.a.a.a.n paramN, r paramR)
  {
    return a(paramN, paramR, new c.a.a.a.n.a());
  }
  
  public c.a.a.a.e a(c.a.a.a.a.n paramN, r paramR, c.a.a.a.n.e paramE)
  {
    c.a.a.a.p.a.a(paramN, "Credentials");
    c.a.a.a.p.a.a(paramR, "HTTP request");
    if (a("realm") != null)
    {
      if (a("nonce") != null)
      {
        c().put("methodname", paramR.getRequestLine().getMethod());
        c().put("uri", paramR.getRequestLine().getUri());
        if (a("charset") == null) {
          c().put("charset", a(paramR));
        }
        return b(paramN, paramR);
      }
      throw new j("missing nonce in challenge");
    }
    throw new j("missing realm in challenge");
  }
  
  public void a(c.a.a.a.e paramE)
  {
    super.a(paramE);
    e = true;
    if (!c().isEmpty()) {
      return;
    }
    throw new p("Authentication challenge is empty");
  }
  
  public String getSchemeName()
  {
    return "digest";
  }
  
  public boolean isComplete()
  {
    if ("true".equalsIgnoreCase(a("stale"))) {
      return false;
    }
    return e;
  }
  
  public boolean isConnectionBased()
  {
    return false;
  }
  
  public String toString()
  {
    StringBuilder localStringBuilder = new StringBuilder();
    localStringBuilder.append("DIGEST [complete=");
    localStringBuilder.append(e);
    localStringBuilder.append(", nonce=");
    localStringBuilder.append(f);
    localStringBuilder.append(", nc=");
    localStringBuilder.append(g);
    localStringBuilder.append("]");
    return localStringBuilder.toString();
  }
}
