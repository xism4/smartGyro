package c.a.a.a.i.e;

import c.a.a.a.B;
import c.a.a.a.C;
import c.a.a.a.e;
import c.a.a.a.f;
import c.a.a.a.g.d;
import c.a.a.a.p.a;
import c.a.a.a.q;

public class c
  implements d
{
  public static final c a = new c();
  private final int b;
  
  public c()
  {
    this(-1);
  }
  
  public c(int paramInt)
  {
    b = paramInt;
  }
  
  public long a(q paramQ)
  {
    a.a(paramQ, "HTTP message");
    e localE = paramQ.getFirstHeader("Transfer-Encoding");
    int i;
    if (localE != null) {
      try
      {
        paramQ = localE.getElements();
        i = paramQ.length;
        if ("identity".equalsIgnoreCase(localE.getValue())) {
          return -1L;
        }
        if ((i > 0) && ("chunked".equalsIgnoreCase(paramQ[(i - 1)].getName()))) {
          return -2L;
        }
        return -1L;
      }
      catch (B paramQ)
      {
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Invalid Transfer-Encoding header value: ");
        localStringBuilder.append(localE);
        throw new C(localStringBuilder.toString(), paramQ);
      }
    }
    if (paramQ.getFirstHeader("Content-Length") != null)
    {
      paramQ = paramQ.getHeaders("Content-Length");
      i = paramQ.length - 1;
      while (i >= 0)
      {
        localE = paramQ[i];
        try
        {
          l = Long.parseLong(localE.getValue());
        }
        catch (NumberFormatException localNumberFormatException)
        {
          long l;
          for (;;) {}
        }
        i -= 1;
      }
      l = -1L;
      if (l >= 0L) {
        return l;
      }
      return -1L;
    }
    return b;
  }
}
