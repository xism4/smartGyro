package c.a.a.a.i.d;

import c.a.a.a.f.b;
import c.a.a.a.f.c;
import c.a.a.a.f.f;
import c.a.a.a.f.h;
import c.a.a.a.f.n;
import c.a.a.a.f.p;
import java.util.Locale;

public class E
  implements b
{
  public E() {}
  
  public String a()
  {
    return "domain";
  }
  
  public void a(c paramC, f paramF)
  {
    c.a.a.a.p.a.a(paramC, "Cookie");
    c.a.a.a.p.a.a(paramF, "Cookie origin");
    paramF = paramF.a().toLowerCase(Locale.ROOT);
    if (paramC.getDomain() != null)
    {
      Object localObject = paramC.getDomain().toLowerCase(Locale.ROOT);
      if (((paramC instanceof c.a.a.a.f.a)) && (((c.a.a.a.f.a)paramC).containsAttribute("domain")))
      {
        if (((String)localObject).startsWith("."))
        {
          int i = ((String)localObject).indexOf('.', 1);
          if (((i >= 0) && (i != ((String)localObject).length() - 1)) || (((String)localObject).equals(".local")))
          {
            if (a(paramF, (String)localObject))
            {
              if (paramF.substring(0, paramF.length() - ((String)localObject).length()).indexOf('.') == -1) {
                return;
              }
              paramF = new StringBuilder();
              paramF.append("Domain attribute \"");
              paramF.append(paramC.getDomain());
              paramF.append("\" violates RFC 2965: ");
              paramF.append("effective host minus domain may not contain any dots");
              throw new h(paramF.toString());
            }
            paramF = new StringBuilder();
            paramF.append("Domain attribute \"");
            paramF.append(paramC.getDomain());
            paramF.append("\" violates RFC 2965: effective host name does not ");
            paramF.append("domain-match domain attribute.");
            throw new h(paramF.toString());
          }
          paramF = new StringBuilder();
          paramF.append("Domain attribute \"");
          paramF.append(paramC.getDomain());
          paramF.append("\" violates RFC 2965: the value contains no embedded dots ");
          paramF.append("and the value is not .local");
          throw new h(paramF.toString());
        }
        paramF = new StringBuilder();
        paramF.append("Domain attribute \"");
        paramF.append(paramC.getDomain());
        paramF.append("\" violates RFC 2109: domain must start with a dot");
        throw new h(paramF.toString());
      }
      if (paramC.getDomain().equals(paramF)) {
        return;
      }
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Illegal domain attribute: \"");
      ((StringBuilder)localObject).append(paramC.getDomain());
      ((StringBuilder)localObject).append("\".");
      ((StringBuilder)localObject).append("Domain of origin: \"");
      ((StringBuilder)localObject).append(paramF);
      ((StringBuilder)localObject).append("\"");
      throw new h(((StringBuilder)localObject).toString());
    }
    throw new h("Invalid cookie state: domain not specified");
  }
  
  public void a(p paramP, String paramString)
  {
    c.a.a.a.p.a.a(paramP, "Cookie");
    if (paramString != null)
    {
      if (!paramString.trim().isEmpty())
      {
        String str2 = paramString.toLowerCase(Locale.ROOT);
        String str1 = str2;
        if (!paramString.startsWith("."))
        {
          paramString = new StringBuilder();
          paramString.append('.');
          paramString.append(str2);
          str1 = paramString.toString();
        }
        paramP.setDomain(str1);
        return;
      }
      throw new n("Blank value for domain attribute");
    }
    throw new n("Missing value for domain attribute");
  }
  
  public boolean a(String paramString1, String paramString2)
  {
    return (paramString1.equals(paramString2)) || ((paramString2.startsWith(".")) && (paramString1.endsWith(paramString2)));
  }
  
  public boolean b(c paramC, f paramF)
  {
    c.a.a.a.p.a.a(paramC, "Cookie");
    c.a.a.a.p.a.a(paramF, "Cookie origin");
    paramF = paramF.a().toLowerCase(Locale.ROOT);
    paramC = paramC.getDomain();
    boolean bool2 = a(paramF, paramC);
    boolean bool1 = false;
    if (!bool2) {
      return false;
    }
    if (paramF.substring(0, paramF.length() - paramC.length()).indexOf('.') == -1) {
      bool1 = true;
    }
    return bool1;
  }
}
