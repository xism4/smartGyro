package c.a.a.a.i.d;

import c.a.a.a.k.w;
import c.a.a.a.p.a;
import c.a.a.a.z;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Locale;

public class n
  extends q
{
  private static final String[] b = { "EEE, dd MMM yyyy HH:mm:ss zzz", "EEE, dd-MMM-yy HH:mm:ss zzz", "EEE MMM d HH:mm:ss yyyy", "EEE, dd-MMM-yyyy HH:mm:ss z", "EEE, dd-MMM-yyyy HH-mm-ss z", "EEE, dd MMM yy HH:mm:ss z", "EEE dd-MMM-yyyy HH:mm:ss z", "EEE dd MMM yyyy HH:mm:ss z", "EEE dd-MMM-yyyy HH-mm-ss z", "EEE dd-MMM-yy HH:mm:ss z", "EEE dd MMM yy HH:mm:ss z", "EEE,dd-MMM-yy HH:mm:ss z", "EEE,dd-MMM-yyyy HH:mm:ss z", "EEE, dd-MM-yyyy HH:mm:ss z" };
  
  public n(String[] paramArrayOfString, o.a paramA)
  {
    super(new c.a.a.a.f.b[] { localP, localF, paramA, localH, localJ, localE, new g(paramArrayOfString) });
  }
  
  private static boolean b(String paramString)
  {
    return (paramString != null) && (paramString.startsWith("\"")) && (paramString.endsWith("\""));
  }
  
  public List<c.a.a.a.f.c> a(c.a.a.a.e paramE, c.a.a.a.f.f paramF)
  {
    a.a(paramE, "Header");
    a.a(paramF, "Cookie origin");
    if (paramE.getName().equalsIgnoreCase("Set-Cookie"))
    {
      Object localObject1 = paramE.getElements();
      int m = localObject1.length;
      int j = 0;
      int i = 0;
      int k = 0;
      while (j < m)
      {
        localObject2 = localObject1[j];
        if (((c.a.a.a.f)localObject2).getParameterByName("version") != null) {
          k = 1;
        }
        if (((c.a.a.a.f)localObject2).getParameterByName("expires") != null) {
          i = 1;
        }
        j += 1;
      }
      if ((i == 0) && (k != 0)) {
        return a((c.a.a.a.f[])localObject1, paramF);
      }
      Object localObject2 = v.a;
      if ((paramE instanceof c.a.a.a.d))
      {
        localObject1 = (c.a.a.a.d)paramE;
        paramE = ((c.a.a.a.d)localObject1).getBuffer();
        localObject1 = new w(((c.a.a.a.d)localObject1).getValuePos(), paramE.length());
      }
      else
      {
        localObject1 = paramE.getValue();
        if (localObject1 == null) {
          break label395;
        }
        paramE = new c.a.a.a.p.d(((String)localObject1).length());
        paramE.a((String)localObject1);
        localObject1 = new w(0, paramE.length());
      }
      localObject1 = ((v)localObject2).a(paramE, (w)localObject1);
      paramE = ((c.a.a.a.f)localObject1).getName();
      localObject2 = ((c.a.a.a.f)localObject1).getValue();
      if ((paramE != null) && (!paramE.isEmpty()))
      {
        paramE = new d(paramE, (String)localObject2);
        paramE.setPath(q.b(paramF));
        paramE.setDomain(q.a(paramF));
        paramF = ((c.a.a.a.f)localObject1).getParameters();
        j = paramF.length - 1;
        while (j >= 0)
        {
          localObject1 = paramF[j];
          localObject2 = ((z)localObject1).getName().toLowerCase(Locale.ROOT);
          paramE.a((String)localObject2, ((z)localObject1).getValue());
          localObject2 = a((String)localObject2);
          if (localObject2 != null) {
            ((c.a.a.a.f.d)localObject2).a(paramE, ((z)localObject1).getValue());
          }
          j -= 1;
        }
        if (i != 0) {
          paramE.setVersion(0);
        }
        return Collections.singletonList(paramE);
      }
      throw new c.a.a.a.f.n("Cookie name may not be empty");
      label395:
      throw new c.a.a.a.f.n("Header value is null");
    }
    paramF = new StringBuilder();
    paramF.append("Unrecognized cookie header '");
    paramF.append(paramE.toString());
    paramF.append("'");
    paramE = new c.a.a.a.f.n(paramF.toString());
    for (;;)
    {
      throw paramE;
    }
  }
  
  public List<c.a.a.a.e> formatCookies(List<c.a.a.a.f.c> paramList)
  {
    a.a(paramList, "List of cookies");
    c.a.a.a.p.d localD = new c.a.a.a.p.d(paramList.size() * 20);
    localD.a("Cookie");
    localD.a(": ");
    int i = 0;
    while (i < paramList.size())
    {
      c.a.a.a.f.c localC = (c.a.a.a.f.c)paramList.get(i);
      if (i > 0) {
        localD.a("; ");
      }
      String str1 = localC.getName();
      String str2 = localC.getValue();
      if ((localC.getVersion() > 0) && (!b(str2)))
      {
        c.a.a.a.k.f.b.a(localD, new c.a.a.a.k.c(str1, str2), false);
      }
      else
      {
        localD.a(str1);
        localD.a("=");
        if (str2 != null) {
          localD.a(str2);
        }
      }
      i += 1;
    }
    paramList = new ArrayList(1);
    paramList.add(new c.a.a.a.k.q(localD));
    return paramList;
  }
  
  public int getVersion()
  {
    return 0;
  }
  
  public c.a.a.a.e getVersionHeader()
  {
    return null;
  }
  
  public String toString()
  {
    return "compatibility";
  }
}
