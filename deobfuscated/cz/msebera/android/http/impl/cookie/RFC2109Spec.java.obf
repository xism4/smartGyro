package c.a.a.a.i.d;

import c.a.a.a.f.b;
import c.a.a.a.f.c;
import c.a.a.a.f.f;
import c.a.a.a.f.n;
import c.a.a.a.p.d;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

public class z
  extends q
{
  static final String[] b = { "EEE, dd MMM yyyy HH:mm:ss zzz", "EEE, dd-MMM-yy HH:mm:ss zzz", "EEE MMM d HH:mm:ss yyyy" };
  private final boolean c;
  
  public z()
  {
    this(null, false);
  }
  
  protected z(boolean paramBoolean, b... paramVarArgs)
  {
    super(paramVarArgs);
    c = paramBoolean;
  }
  
  public z(String[] paramArrayOfString, boolean paramBoolean)
  {
    super(new b[] { localB, localI, localY, localH, localJ, localE, new g(paramArrayOfString) });
    c = paramBoolean;
  }
  
  private List<c.a.a.a.e> a(List<c> paramList)
  {
    ArrayList localArrayList = new ArrayList(paramList.size());
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      c localC = (c)paramList.next();
      int i = localC.getVersion();
      d localD = new d(40);
      localD.a("Cookie: ");
      localD.a("$Version=");
      localD.a(Integer.toString(i));
      localD.a("; ");
      a(localD, localC, i);
      localArrayList.add(new c.a.a.a.k.q(localD));
    }
    return localArrayList;
  }
  
  private List<c.a.a.a.e> b(List<c> paramList)
  {
    Object localObject = paramList.iterator();
    int i = Integer.MAX_VALUE;
    c localC;
    while (((Iterator)localObject).hasNext())
    {
      localC = (c)((Iterator)localObject).next();
      if (localC.getVersion() < i) {
        i = localC.getVersion();
      }
    }
    localObject = new d(paramList.size() * 40);
    ((d)localObject).a("Cookie");
    ((d)localObject).a(": ");
    ((d)localObject).a("$Version=");
    ((d)localObject).a(Integer.toString(i));
    paramList = paramList.iterator();
    while (paramList.hasNext())
    {
      localC = (c)paramList.next();
      ((d)localObject).a("; ");
      a((d)localObject, localC, i);
    }
    paramList = new ArrayList(1);
    paramList.add(new c.a.a.a.k.q((d)localObject));
    return paramList;
  }
  
  public List<c> a(c.a.a.a.e paramE, f paramF)
  {
    c.a.a.a.p.a.a(paramE, "Header");
    c.a.a.a.p.a.a(paramF, "Cookie origin");
    if (paramE.getName().equalsIgnoreCase("Set-Cookie")) {
      return a(paramE.getElements(), paramF);
    }
    paramF = new StringBuilder();
    paramF.append("Unrecognized cookie header '");
    paramF.append(paramE.toString());
    paramF.append("'");
    throw new n(paramF.toString());
  }
  
  public void a(c paramC, f paramF)
  {
    c.a.a.a.p.a.a(paramC, "Cookie");
    String str = paramC.getName();
    if (str.indexOf(' ') == -1)
    {
      if (!str.startsWith("$"))
      {
        super.a(paramC, paramF);
        return;
      }
      throw new c.a.a.a.f.h("Cookie name may not start with $");
    }
    throw new c.a.a.a.f.h("Cookie name may not contain blanks");
  }
  
  protected void a(d paramD, c paramC, int paramInt)
  {
    a(paramD, paramC.getName(), paramC.getValue(), paramInt);
    if ((paramC.getPath() != null) && ((paramC instanceof c.a.a.a.f.a)) && (((c.a.a.a.f.a)paramC).containsAttribute("path")))
    {
      paramD.a("; ");
      a(paramD, "$Path", paramC.getPath(), paramInt);
    }
    if ((paramC.getDomain() != null) && ((paramC instanceof c.a.a.a.f.a)) && (((c.a.a.a.f.a)paramC).containsAttribute("domain")))
    {
      paramD.a("; ");
      a(paramD, "$Domain", paramC.getDomain(), paramInt);
    }
  }
  
  protected void a(d paramD, String paramString1, String paramString2, int paramInt)
  {
    paramD.a(paramString1);
    paramD.a("=");
    if (paramString2 != null)
    {
      if (paramInt > 0)
      {
        paramD.append('"');
        paramD.a(paramString2);
        paramD.append('"');
        return;
      }
      paramD.a(paramString2);
    }
  }
  
  public List<c.a.a.a.e> formatCookies(List<c> paramList)
  {
    c.a.a.a.p.a.a(paramList, "List of cookies");
    Object localObject = paramList;
    if (paramList.size() > 1)
    {
      localObject = new ArrayList(paramList);
      Collections.sort((List)localObject, c.a.a.a.f.g.a);
    }
    if (c) {
      return b((List)localObject);
    }
    return a((List)localObject);
  }
  
  public int getVersion()
  {
    return 1;
  }
  
  public c.a.a.a.e getVersionHeader()
  {
    return null;
  }
  
  public String toString()
  {
    return "rfc2109";
  }
}
