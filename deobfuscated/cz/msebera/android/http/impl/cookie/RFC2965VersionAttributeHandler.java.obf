package c.a.a.a.i.d;

import c.a.a.a.f.b;
import c.a.a.a.f.c;
import c.a.a.a.f.f;
import c.a.a.a.f.h;
import c.a.a.a.f.n;
import c.a.a.a.f.p;
import c.a.a.a.p.a;
import java.util.Locale;

public class y
  implements b
{
  public y() {}
  
  public String a()
  {
    return "domain";
  }
  
  public void a(c paramC, f paramF)
  {
    a.a(paramC, "Cookie");
    a.a(paramF, "Cookie origin");
    paramF = paramF.a();
    paramC = paramC.getDomain();
    if (paramC != null)
    {
      if (!paramC.equals(paramF))
      {
        if (paramC.indexOf('.') != -1)
        {
          if (paramC.startsWith("."))
          {
            int i = paramC.indexOf('.', 1);
            if ((i >= 0) && (i != paramC.length() - 1))
            {
              paramF = paramF.toLowerCase(Locale.ROOT);
              if (paramF.endsWith(paramC))
              {
                if (paramF.substring(0, paramF.length() - paramC.length()).indexOf('.') == -1) {
                  return;
                }
                paramF = new StringBuilder();
                paramF.append("Domain attribute \"");
                paramF.append(paramC);
                paramF.append("\" violates RFC 2109: host minus domain may not contain any dots");
                throw new h(paramF.toString());
              }
              localStringBuilder = new StringBuilder();
              localStringBuilder.append("Illegal domain attribute \"");
              localStringBuilder.append(paramC);
              localStringBuilder.append("\". Domain of origin: \"");
              localStringBuilder.append(paramF);
              localStringBuilder.append("\"");
              throw new h(localStringBuilder.toString());
            }
            paramF = new StringBuilder();
            paramF.append("Domain attribute \"");
            paramF.append(paramC);
            paramF.append("\" violates RFC 2109: domain must contain an embedded dot");
            throw new h(paramF.toString());
          }
          paramF = new StringBuilder();
          paramF.append("Domain attribute \"");
          paramF.append(paramC);
          paramF.append("\" violates RFC 2109: domain must start with a dot");
          throw new h(paramF.toString());
        }
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Domain attribute \"");
        localStringBuilder.append(paramC);
        localStringBuilder.append("\" does not match the host \"");
        localStringBuilder.append(paramF);
        localStringBuilder.append("\"");
        throw new h(localStringBuilder.toString());
      }
      return;
    }
    throw new h("Cookie domain may not be null");
  }
  
  public void a(p paramP, String paramString)
  {
    a.a(paramP, "Cookie");
    if (paramString != null)
    {
      if (!paramString.trim().isEmpty())
      {
        paramP.setDomain(paramString);
        return;
      }
      throw new n("Blank value for domain attribute");
    }
    throw new n("Missing value for domain attribute");
  }
  
  public boolean b(c paramC, f paramF)
  {
    a.a(paramC, "Cookie");
    a.a(paramF, "Cookie origin");
    paramF = paramF.a();
    paramC = paramC.getDomain();
    boolean bool2 = false;
    if (paramC == null) {
      return false;
    }
    boolean bool1;
    if (!paramF.equals(paramC))
    {
      bool1 = bool2;
      if (paramC.startsWith("."))
      {
        bool1 = bool2;
        if (!paramF.endsWith(paramC)) {}
      }
    }
    else
    {
      bool1 = true;
    }
    return bool1;
  }
}
