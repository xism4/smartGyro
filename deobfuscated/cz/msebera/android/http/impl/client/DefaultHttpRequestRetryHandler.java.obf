package c.a.a.a.i.b;

import c.a.a.a.b.k;
import c.a.a.a.m;
import c.a.a.a.n.e;
import c.a.a.a.n.f;
import c.a.a.a.r;
import java.io.IOException;
import java.io.InterruptedIOException;
import java.net.ConnectException;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Collection;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;
import javax.net.ssl.SSLException;

public class l
  implements k
{
  public static final l a = new l();
  private final int b;
  private final boolean c;
  private final Set<Class<? extends IOException>> d;
  
  public l()
  {
    this(3, false);
  }
  
  public l(int paramInt, boolean paramBoolean)
  {
    this(paramInt, paramBoolean, Arrays.asList(new Class[] { InterruptedIOException.class, UnknownHostException.class, ConnectException.class, SSLException.class }));
  }
  
  protected l(int paramInt, boolean paramBoolean, Collection<Class<? extends IOException>> paramCollection)
  {
    b = paramInt;
    c = paramBoolean;
    d = new HashSet();
    paramCollection = paramCollection.iterator();
    while (paramCollection.hasNext())
    {
      Class localClass = (Class)paramCollection.next();
      d.add(localClass);
    }
  }
  
  protected boolean a(r paramR)
  {
    return !(paramR instanceof m);
  }
  
  public boolean a(IOException paramIOException, int paramInt, e paramE)
  {
    c.a.a.a.p.a.a(paramIOException, "Exception parameter");
    c.a.a.a.p.a.a(paramE, "HTTP context");
    if (paramInt > b) {
      return false;
    }
    if (d.contains(paramIOException.getClass())) {
      return false;
    }
    Iterator localIterator = d.iterator();
    while (localIterator.hasNext()) {
      if (((Class)localIterator.next()).isInstance(paramIOException)) {
        return false;
      }
    }
    paramIOException = c.a.a.a.b.e.a.a(paramE);
    paramE = paramIOException.b();
    if (b(paramE)) {
      return false;
    }
    if (a(paramE)) {
      return true;
    }
    if (paramIOException.d()) {
      return c;
    }
    return true;
  }
  
  @Deprecated
  protected boolean b(r paramR)
  {
    r localR = paramR;
    if ((paramR instanceof v)) {
      localR = ((v)paramR).c();
    }
    return ((localR instanceof c.a.a.a.b.c.l)) && (((c.a.a.a.b.c.l)localR).isAborted());
  }
}
