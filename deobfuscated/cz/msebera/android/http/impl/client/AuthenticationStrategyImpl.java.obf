package c.a.a.a.i.b;

import c.a.a.a.G;
import c.a.a.a.a.h;
import c.a.a.a.a.n;
import c.a.a.a.a.p;
import c.a.a.a.b.i;
import c.a.a.a.h.b;
import c.a.a.a.o;
import c.a.a.a.q;
import c.a.a.a.t;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Queue;

abstract class c
  implements c.a.a.a.b.c
{
  private static final List<String> a = Collections.unmodifiableList(Arrays.asList(new String[] { "Negotiate", "Kerberos", "NTLM", "Digest", "Basic" }));
  public b b = new b(getClass());
  private final int c;
  private final String d;
  
  c(int paramInt, String paramString)
  {
    c = paramInt;
    d = paramString;
  }
  
  abstract Collection<String> a(c.a.a.a.b.a.a paramA);
  
  public Map<String, c.a.a.a.e> a(o paramO, t paramT, c.a.a.a.n.e paramE)
  {
    c.a.a.a.p.a.a(paramT, "HTTP response");
    paramT = paramT.getHeaders(d);
    paramE = new HashMap(paramT.length);
    int m = paramT.length;
    int j = 0;
    while (j < m)
    {
      Object localObject1 = paramT[j];
      Object localObject2;
      int i;
      if ((localObject1 instanceof c.a.a.a.d))
      {
        localObject2 = (c.a.a.a.d)localObject1;
        paramO = ((c.a.a.a.d)localObject2).getBuffer();
        i = ((c.a.a.a.d)localObject2).getValuePos();
      }
      else
      {
        localObject2 = localObject1.getValue();
        if (localObject2 == null) {
          break label215;
        }
        paramO = new c.a.a.a.p.d(((String)localObject2).length());
        paramO.a((String)localObject2);
        i = 0;
      }
      while ((i < paramO.length()) && (c.a.a.a.n.d.a(paramO.charAt(i)))) {
        i += 1;
      }
      int k = i;
      while ((k < paramO.length()) && (!c.a.a.a.n.d.a(paramO.charAt(k)))) {
        k += 1;
      }
      paramE.put(paramO.a(i, k).toLowerCase(Locale.ROOT), localObject1);
      j += 1;
      continue;
      label215:
      throw new p("Header value is null");
    }
    return paramE;
  }
  
  public Queue<c.a.a.a.a.a> a(Map<String, c.a.a.a.e> paramMap, o paramO, t paramT, c.a.a.a.n.e paramE)
  {
    c.a.a.a.p.a.a(paramMap, "Map of auth challenges");
    c.a.a.a.p.a.a(paramO, "Host");
    c.a.a.a.p.a.a(paramT, "HTTP response");
    c.a.a.a.p.a.a(paramE, "HTTP context");
    paramT = c.a.a.a.b.e.a.a(paramE);
    LinkedList localLinkedList = new LinkedList();
    c.a.a.a.d.a localA = paramT.f();
    if (localA == null) {
      paramMap = b;
    }
    i localI;
    for (paramO = "Auth scheme registry not set in the context";; paramO = "Credentials provider not set in the context")
    {
      paramMap.a(paramO);
      return localLinkedList;
      localI = paramT.k();
      if (localI != null) {
        break;
      }
      paramMap = b;
    }
    Object localObject1 = a(paramT.n());
    paramT = (t)localObject1;
    if (localObject1 == null) {
      paramT = a;
    }
    Object localObject2;
    if (b.a())
    {
      localObject1 = b;
      localObject2 = new StringBuilder();
      ((StringBuilder)localObject2).append("Authentication schemes in the order of preference: ");
      ((StringBuilder)localObject2).append(paramT);
      ((b)localObject1).a(((StringBuilder)localObject2).toString());
    }
    paramT = paramT.iterator();
    while (paramT.hasNext())
    {
      localObject1 = (String)paramT.next();
      localObject2 = (c.a.a.a.e)paramMap.get(((String)localObject1).toLowerCase(Locale.ROOT));
      Object localObject3;
      if (localObject2 != null)
      {
        localObject3 = (c.a.a.a.a.e)localA.lookup((String)localObject1);
        if (localObject3 == null)
        {
          if (b.d())
          {
            localObject2 = b;
            localObject3 = new StringBuilder();
            ((StringBuilder)localObject3).append("Authentication scheme ");
            ((StringBuilder)localObject3).append((String)localObject1);
            ((StringBuilder)localObject3).append(" not supported");
            ((b)localObject2).d(((StringBuilder)localObject3).toString());
          }
        }
        else
        {
          localObject1 = ((c.a.a.a.a.e)localObject3).a(paramE);
          ((c.a.a.a.a.c)localObject1).a((c.a.a.a.e)localObject2);
          localObject2 = localI.a(new h(paramO.b(), paramO.c(), ((c.a.a.a.a.c)localObject1).getRealm(), ((c.a.a.a.a.c)localObject1).getSchemeName()));
          if (localObject2 != null) {
            localLinkedList.add(new c.a.a.a.a.a((c.a.a.a.a.c)localObject1, (n)localObject2));
          }
        }
      }
      else if (b.a())
      {
        localObject2 = b;
        localObject3 = new StringBuilder();
        ((StringBuilder)localObject3).append("Challenge for ");
        ((StringBuilder)localObject3).append((String)localObject1);
        ((StringBuilder)localObject3).append(" authentication scheme not available");
        ((b)localObject2).a(((StringBuilder)localObject3).toString());
      }
    }
    return localLinkedList;
  }
  
  public void a(o paramO, c.a.a.a.a.c paramC, c.a.a.a.n.e paramE)
  {
    c.a.a.a.p.a.a(paramO, "Host");
    c.a.a.a.p.a.a(paramE, "HTTP context");
    paramC = c.a.a.a.b.e.a.a(paramE).e();
    if (paramC != null)
    {
      if (b.a())
      {
        paramE = b;
        StringBuilder localStringBuilder = new StringBuilder();
        localStringBuilder.append("Clearing cached auth scheme for ");
        localStringBuilder.append(paramO);
        paramE.a(localStringBuilder.toString());
      }
      paramC.a(paramO);
    }
  }
  
  protected boolean a(c.a.a.a.a.c paramC)
  {
    boolean bool2 = false;
    boolean bool1 = bool2;
    if (paramC != null)
    {
      if (!paramC.isComplete()) {
        return false;
      }
      paramC = paramC.getSchemeName();
      if (!paramC.equalsIgnoreCase("Basic"))
      {
        bool1 = bool2;
        if (!paramC.equalsIgnoreCase("Digest")) {}
      }
      else
      {
        bool1 = true;
      }
    }
    return bool1;
  }
  
  public void b(o paramO, c.a.a.a.a.c paramC, c.a.a.a.n.e paramE)
  {
    c.a.a.a.p.a.a(paramO, "Host");
    c.a.a.a.p.a.a(paramC, "Auth scheme");
    c.a.a.a.p.a.a(paramE, "HTTP context");
    Object localObject2 = c.a.a.a.b.e.a.a(paramE);
    if (a(paramC))
    {
      Object localObject1 = ((c.a.a.a.b.e.a)localObject2).e();
      paramE = (c.a.a.a.n.e)localObject1;
      if (localObject1 == null)
      {
        paramE = new d();
        ((c.a.a.a.b.e.a)localObject2).a(paramE);
      }
      if (b.a())
      {
        localObject1 = b;
        localObject2 = new StringBuilder();
        ((StringBuilder)localObject2).append("Caching '");
        ((StringBuilder)localObject2).append(paramC.getSchemeName());
        ((StringBuilder)localObject2).append("' auth scheme for ");
        ((StringBuilder)localObject2).append(paramO);
        ((b)localObject1).a(((StringBuilder)localObject2).toString());
      }
      paramE.a(paramO, paramC);
    }
  }
  
  public boolean b(o paramO, t paramT, c.a.a.a.n.e paramE)
  {
    c.a.a.a.p.a.a(paramT, "HTTP response");
    return paramT.getStatusLine().getStatusCode() == c;
  }
}
