package c.a.a.a.i.b;

import c.a.a.a.a.h;
import c.a.a.a.a.n;
import c.a.a.a.b.i;
import c.a.a.a.p.a;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class f
  implements i
{
  private final ConcurrentHashMap<h, n> a = new ConcurrentHashMap();
  
  public f() {}
  
  private static n a(Map<h, n> paramMap, h paramH)
  {
    n localN = (n)paramMap.get(paramH);
    Object localObject2 = localN;
    if (localN == null)
    {
      int i = -1;
      Object localObject1 = null;
      Iterator localIterator = paramMap.keySet().iterator();
      while (localIterator.hasNext())
      {
        localObject2 = (h)localIterator.next();
        int j = paramH.a((h)localObject2);
        if (j > i)
        {
          localObject1 = localObject2;
          i = j;
        }
      }
      localObject2 = localN;
      if (localObject1 != null) {
        localObject2 = (n)paramMap.get(localObject1);
      }
    }
    return localObject2;
  }
  
  public n a(h paramH)
  {
    a.a(paramH, "Authentication scope");
    return a(a, paramH);
  }
  
  public String toString()
  {
    return a.toString();
  }
}
