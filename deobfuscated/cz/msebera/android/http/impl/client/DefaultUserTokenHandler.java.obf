package c.a.a.a.i.b;

import c.a.a.a.a.c;
import c.a.a.a.a.i;
import c.a.a.a.a.n;
import c.a.a.a.b.e.a;
import c.a.a.a.b.r;
import c.a.a.a.e.p;
import c.a.a.a.j;
import c.a.a.a.n.e;
import c.a.a.a.n.f;
import java.security.Principal;
import javax.net.ssl.SSLSession;

public class q
  implements r
{
  public static final q a = new q();
  
  public q() {}
  
  private static Principal a(i paramI)
  {
    c localC = paramI.b();
    if ((localC != null) && (localC.isComplete()) && (localC.isConnectionBased()))
    {
      paramI = paramI.c();
      if (paramI != null) {
        return paramI.getUserPrincipal();
      }
    }
    return null;
  }
  
  public Object a(e paramE)
  {
    Object localObject2 = a.a(paramE);
    paramE = ((a)localObject2).o();
    if (paramE != null)
    {
      localObject1 = a(paramE);
      paramE = (e)localObject1;
      if (localObject1 == null) {
        paramE = a(((a)localObject2).m());
      }
    }
    else
    {
      paramE = null;
    }
    Object localObject1 = paramE;
    if (paramE == null)
    {
      localObject2 = ((f)localObject2).a();
      localObject1 = paramE;
      if (((j)localObject2).isOpen())
      {
        localObject1 = paramE;
        if ((localObject2 instanceof p))
        {
          localObject2 = ((p)localObject2).getSSLSession();
          localObject1 = paramE;
          if (localObject2 != null) {
            localObject1 = ((SSLSession)localObject2).getLocalPrincipal();
          }
        }
      }
    }
    return localObject1;
  }
}
