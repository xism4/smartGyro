package c.a.a.a.i.b;

import c.a.a.a.a.c;
import c.a.a.a.e.r;
import c.a.a.a.e.s;
import c.a.a.a.h.b;
import c.a.a.a.i.c.k;
import c.a.a.a.o;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.io.Serializable;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

public class d
  implements c.a.a.a.b.a
{
  public b a = new b(d.class);
  private final Map<o, byte[]> b = new ConcurrentHashMap();
  private final r c;
  
  public d()
  {
    this(null);
  }
  
  public d(r paramR)
  {
    if (paramR == null) {
      paramR = k.a;
    }
    c = paramR;
  }
  
  public void a(o paramO)
  {
    c.a.a.a.p.a.a(paramO, "HTTP host");
    b.remove(c(paramO));
  }
  
  public void a(o paramO, c paramC)
  {
    c.a.a.a.p.a.a(paramO, "HTTP host");
    if (paramC == null) {
      return;
    }
    Object localObject;
    if ((paramC instanceof Serializable))
    {
      try
      {
        localObject = new ByteArrayOutputStream();
        ObjectOutputStream localObjectOutputStream = new ObjectOutputStream((OutputStream)localObject);
        localObjectOutputStream.writeObject(paramC);
        localObjectOutputStream.close();
        b.put(c(paramO), ((ByteArrayOutputStream)localObject).toByteArray());
        return;
      }
      catch (IOException paramO)
      {
        if (!a.d()) {
          return;
        }
      }
      a.b("Unexpected I/O error while serializing auth scheme", paramO);
    }
    else if (a.a())
    {
      paramO = a;
      localObject = new StringBuilder();
      ((StringBuilder)localObject).append("Auth scheme ");
      ((StringBuilder)localObject).append(paramC.getClass());
      ((StringBuilder)localObject).append(" is not serializable");
      paramO.a(((StringBuilder)localObject).toString());
    }
  }
  
  public c b(o paramO)
  {
    c.a.a.a.p.a.a(paramO, "HTTP host");
    paramO = (byte[])b.get(c(paramO));
    if (paramO != null) {
      try
      {
        paramO = new ObjectInputStream(new ByteArrayInputStream(paramO));
        c localC = (c)paramO.readObject();
        paramO.close();
        return localC;
      }
      catch (ClassNotFoundException paramO)
      {
        if (a.d()) {
          a.b("Unexpected error while de-serializing auth scheme", paramO);
        }
        return null;
      }
      catch (IOException paramO)
      {
        if (a.d()) {
          a.b("Unexpected I/O error while de-serializing auth scheme", paramO);
        }
      }
    }
    return null;
  }
  
  protected o c(o paramO)
  {
    if (paramO.c() <= 0) {}
    try
    {
      int i = c.a(paramO);
      return new o(paramO.b(), i, paramO.d());
    }
    catch (s localS) {}
    return paramO;
    return paramO;
  }
  
  public String toString()
  {
    return b.toString();
  }
}
