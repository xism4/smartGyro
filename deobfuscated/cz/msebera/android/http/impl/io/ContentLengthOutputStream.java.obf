package c.a.a.a.i.f;

import c.a.a.a.j.g;
import c.a.a.a.p.a;
import java.io.IOException;
import java.io.OutputStream;

public class h
  extends OutputStream
{
  private final g a;
  private final long b;
  private long c = 0L;
  private boolean d = false;
  
  public h(g paramG, long paramLong)
  {
    a.a(paramG, "Session output buffer");
    a = ((g)paramG);
    a.a(paramLong, "Content length");
    b = paramLong;
  }
  
  public void close()
  {
    if (!d)
    {
      d = true;
      a.flush();
    }
  }
  
  public void flush()
  {
    a.flush();
  }
  
  public void write(int paramInt)
  {
    if (!d)
    {
      if (c < b)
      {
        a.write(paramInt);
        c += 1L;
      }
      return;
    }
    throw new IOException("Attempted write to closed stream.");
  }
  
  public void write(byte[] paramArrayOfByte)
  {
    write(paramArrayOfByte, 0, paramArrayOfByte.length);
  }
  
  public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (!d)
    {
      long l1 = c;
      long l2 = b;
      if (l1 < l2)
      {
        l1 = l2 - l1;
        int i = paramInt2;
        if (paramInt2 > l1) {
          i = (int)l1;
        }
        a.write(paramArrayOfByte, paramInt1, i);
        c += i;
      }
      return;
    }
    throw new IOException("Attempted write to closed stream.");
  }
}
