package c.a.a.a.i.f;

import c.a.a.a.j.e;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.CoderResult;
import java.nio.charset.CodingErrorAction;

@Deprecated
public abstract class d
  implements c.a.a.a.j.g, c.a.a.a.j.a
{
  private static final byte[] a = { 13, 10 };
  private OutputStream b;
  private c.a.a.a.p.c c;
  private Charset d;
  private boolean e;
  private int f;
  private k g;
  private CodingErrorAction h;
  private CodingErrorAction i;
  private CharsetEncoder j;
  private ByteBuffer k;
  
  public d() {}
  
  private void a(CharBuffer paramCharBuffer)
  {
    if (!paramCharBuffer.hasRemaining()) {
      return;
    }
    if (j == null)
    {
      j = d.newEncoder();
      j.onMalformedInput(h);
      j.onUnmappableCharacter(i);
    }
    if (k == null) {
      k = ByteBuffer.allocate(1024);
    }
    j.reset();
    while (paramCharBuffer.hasRemaining()) {
      a(j.encode(paramCharBuffer, k, true));
    }
    a(j.flush(k));
    k.clear();
  }
  
  private void a(CoderResult paramCoderResult)
  {
    if (paramCoderResult.isError()) {
      paramCoderResult.throwException();
    }
    k.flip();
    while (k.hasRemaining()) {
      write(k.get());
    }
    k.compact();
  }
  
  protected k a()
  {
    return new k();
  }
  
  public void a(c.a.a.a.p.d paramD)
  {
    if (paramD == null) {
      return;
    }
    boolean bool = e;
    int n = 0;
    if (bool)
    {
      int m = paramD.length();
      while (m > 0)
      {
        int i1 = Math.min(c.b() - c.f(), m);
        if (i1 > 0) {
          c.a(paramD, n, i1);
        }
        if (c.e()) {
          b();
        }
        n += i1;
        m -= i1;
      }
    }
    a(CharBuffer.wrap(paramD.a(), 0, paramD.length()));
    a(a);
  }
  
  protected void a(OutputStream paramOutputStream, int paramInt, c.a.a.a.l.g paramG)
  {
    c.a.a.a.p.a.a(paramOutputStream, "Input stream");
    c.a.a.a.p.a.a(paramInt, "Buffer size");
    c.a.a.a.p.a.a(paramG, "HTTP parameters");
    b = paramOutputStream;
    c = new c.a.a.a.p.c(paramInt);
    paramOutputStream = (String)paramG.getParameter("http.protocol.element-charset");
    if (paramOutputStream != null) {
      paramOutputStream = Charset.forName(paramOutputStream);
    } else {
      paramOutputStream = c.a.a.a.c.b;
    }
    d = paramOutputStream;
    e = d.equals(c.a.a.a.c.b);
    j = null;
    f = paramG.getIntParameter("http.connection.min-chunk-limit", 512);
    g = a();
    paramOutputStream = (CodingErrorAction)paramG.getParameter("http.malformed.input.action");
    if (paramOutputStream == null) {
      paramOutputStream = CodingErrorAction.REPORT;
    }
    h = paramOutputStream;
    paramOutputStream = (CodingErrorAction)paramG.getParameter("http.unmappable.input.action");
    if (paramOutputStream == null) {
      paramOutputStream = CodingErrorAction.REPORT;
    }
    i = paramOutputStream;
  }
  
  public void a(byte[] paramArrayOfByte)
  {
    if (paramArrayOfByte == null) {
      return;
    }
    write(paramArrayOfByte, 0, paramArrayOfByte.length);
  }
  
  protected void b()
  {
    int m = c.f();
    if (m > 0)
    {
      b.write(c.a(), 0, m);
      c.c();
      g.a(m);
    }
  }
  
  public void flush()
  {
    b();
    b.flush();
  }
  
  public e getMetrics()
  {
    return g;
  }
  
  public int length()
  {
    return c.f();
  }
  
  public void write(int paramInt)
  {
    if (c.e()) {
      b();
    }
    c.a(paramInt);
  }
  
  public void write(byte[] paramArrayOfByte, int paramInt1, int paramInt2)
  {
    if (paramArrayOfByte == null) {
      return;
    }
    if ((paramInt2 <= f) && (paramInt2 <= c.b()))
    {
      if (paramInt2 > c.b() - c.f()) {
        b();
      }
      c.a(paramArrayOfByte, paramInt1, paramInt2);
      return;
    }
    b();
    b.write(paramArrayOfByte, paramInt1, paramInt2);
    g.a(paramInt2);
  }
  
  public void writeLine(String paramString)
  {
    if (paramString == null) {
      return;
    }
    if (paramString.length() > 0)
    {
      if (e)
      {
        int m = 0;
        while (m < paramString.length())
        {
          write(paramString.charAt(m));
          m += 1;
        }
      }
      a(CharBuffer.wrap(paramString));
    }
    a(a);
  }
}
