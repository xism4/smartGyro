package c.a.a.a.i;

import c.a.a.a.i.f.n;
import c.a.a.a.i.f.o;
import c.a.a.a.p;
import c.a.a.a.p.b;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketException;

@Deprecated
public class f
  extends a
  implements p
{
  private volatile boolean i;
  private volatile Socket j = null;
  
  public f() {}
  
  private static void a(StringBuilder paramStringBuilder, SocketAddress paramSocketAddress)
  {
    if ((paramSocketAddress instanceof InetSocketAddress))
    {
      InetSocketAddress localInetSocketAddress = (InetSocketAddress)paramSocketAddress;
      if (localInetSocketAddress.getAddress() != null) {
        paramSocketAddress = localInetSocketAddress.getAddress().getHostAddress();
      } else {
        paramSocketAddress = localInetSocketAddress.getAddress();
      }
      paramStringBuilder.append(paramSocketAddress);
      paramStringBuilder.append(':');
      paramStringBuilder.append(localInetSocketAddress.getPort());
      return;
    }
    paramStringBuilder.append(paramSocketAddress);
  }
  
  protected c.a.a.a.j.f a(Socket paramSocket, int paramInt, c.a.a.a.l.g paramG)
  {
    return new n(paramSocket, paramInt, paramG);
  }
  
  protected void a()
  {
    b.a(i, "Connection is not open");
  }
  
  protected void a(Socket paramSocket, c.a.a.a.l.g paramG)
  {
    c.a.a.a.p.a.a(paramSocket, "Socket");
    c.a.a.a.p.a.a(paramG, "HTTP parameters");
    j = paramSocket;
    int k = paramG.getIntParameter("http.socket.buffer-size", -1);
    a(a(paramSocket, k, paramG), b(paramSocket, k, paramG), paramG);
    i = true;
  }
  
  protected c.a.a.a.j.g b(Socket paramSocket, int paramInt, c.a.a.a.l.g paramG)
  {
    return new o(paramSocket, paramInt, paramG);
  }
  
  /* Error */
  public void close()
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 56	c/a/a/a/i/f:i	Z
    //   4: ifne +4 -> 8
    //   7: return
    //   8: aload_0
    //   9: iconst_0
    //   10: putfield 56	c/a/a/a/i/f:i	Z
    //   13: aload_0
    //   14: getfield 17	c/a/a/a/i/f:j	Ljava/net/Socket;
    //   17: astore_1
    //   18: aload_0
    //   19: invokevirtual 101	c/a/a/a/i/a:e	()V
    //   22: aload_1
    //   23: invokevirtual 106	java/net/Socket:shutdownOutput	()V
    //   26: aload_1
    //   27: invokevirtual 109	java/net/Socket:shutdownInput	()V
    //   30: aload_1
    //   31: invokevirtual 111	java/net/Socket:close	()V
    //   34: return
    //   35: astore_2
    //   36: aload_1
    //   37: invokevirtual 111	java/net/Socket:close	()V
    //   40: aload_2
    //   41: athrow
    //   42: astore_2
    //   43: goto -17 -> 26
    //   46: astore_2
    //   47: goto -17 -> 30
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	50	0	this	f
    //   17	20	1	localSocket	Socket
    //   35	6	2	localObject	Object
    //   42	1	2	localIOException	java.io.IOException
    //   46	1	2	localUnsupportedOperationException	UnsupportedOperationException
    // Exception table:
    //   from	to	target	type
    //   18	22	35	finally
    //   22	26	35	finally
    //   26	30	35	finally
    //   22	26	42	java/io/IOException
    //   22	26	46	java/lang/UnsupportedOperationException
    //   26	30	46	java/io/IOException
    //   26	30	46	java/lang/UnsupportedOperationException
  }
  
  protected void g()
  {
    b.a(i ^ true, "Connection is already open");
  }
  
  public InetAddress getRemoteAddress()
  {
    if (j != null) {
      return j.getInetAddress();
    }
    return null;
  }
  
  public int getRemotePort()
  {
    if (j != null) {
      return j.getPort();
    }
    return -1;
  }
  
  public boolean isOpen()
  {
    return i;
  }
  
  public void setSocketTimeout(int paramInt)
  {
    a();
    if (j != null) {}
    try
    {
      j.setSoTimeout(paramInt);
      return;
    }
    catch (SocketException localSocketException) {}
  }
  
  public void shutdown()
  {
    i = false;
    Socket localSocket = j;
    if (localSocket != null) {
      localSocket.close();
    }
  }
  
  public String toString()
  {
    if (j != null)
    {
      StringBuilder localStringBuilder = new StringBuilder();
      SocketAddress localSocketAddress1 = j.getRemoteSocketAddress();
      SocketAddress localSocketAddress2 = j.getLocalSocketAddress();
      if ((localSocketAddress1 != null) && (localSocketAddress2 != null))
      {
        a(localStringBuilder, localSocketAddress2);
        localStringBuilder.append("<->");
        a(localStringBuilder, localSocketAddress1);
      }
      return localStringBuilder.toString();
    }
    return super.toString();
  }
}
