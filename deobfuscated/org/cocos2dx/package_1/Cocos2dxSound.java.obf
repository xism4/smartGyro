package org.cocos2dx.lib;

import android.content.Context;
import android.media.SoundPool;
import android.media.SoundPool.OnLoadCompleteListener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

public class Cocos2dxSound
{
  private static final int INVALID_SOUND_ID = -1;
  private static final int INVALID_STREAM_ID = -1;
  private static final int LOAD_TIME_OUT = 500;
  private static final int MAX_SIMULTANEOUS_STREAMS_DEFAULT = 5;
  private static final int MAX_SIMULTANEOUS_STREAMS_I9100 = 3;
  private static final int SOUND_PRIORITY = 1;
  private static final int SOUND_QUALITY = 5;
  private static final float SOUND_RATE = 1.0F;
  private static final String TAG = "Cocos2dxSound";
  private final Context mContext;
  private boolean mIsAudioFocus = true;
  private float mLeftVolume;
  private final Object mLockPathStreamIDsMap = new Object();
  private final HashMap<String, Integer> mPathSoundIDMap = new HashMap();
  private final HashMap<String, ArrayList<Integer>> mPathStreamIDsMap = new HashMap();
  private ConcurrentHashMap<Integer, a> mPlayWhenLoadedEffects = new ConcurrentHashMap();
  private float mRightVolume;
  private SoundPool mSoundPool;
  
  public Cocos2dxSound(Context paramContext)
  {
    mContext = paramContext;
    initData();
  }
  
  private float clamp(float paramFloat1, float paramFloat2, float paramFloat3)
  {
    return Math.max(paramFloat2, Math.min(paramFloat1, paramFloat3));
  }
  
  /* Error */
  private int createSoundIDFromAsset(String paramString)
  {
    // Byte code:
    //   0: aload_1
    //   1: ldc 100
    //   3: invokevirtual 106	java/lang/String:startsWith	(Ljava/lang/String;)Z
    //   6: ifeq +16 -> 22
    //   9: aload_0
    //   10: getfield 108	org/cocos2dx/lib/Cocos2dxSound:mSoundPool	Landroid/media/SoundPool;
    //   13: aload_1
    //   14: iconst_0
    //   15: invokevirtual 114	android/media/SoundPool:load	(Ljava/lang/String;I)I
    //   18: istore_2
    //   19: goto +105 -> 124
    //   22: invokestatic 120	org/cocos2dx/lib/Cocos2dxHelper:getObbFile	()Lb/a/a/a/a/b;
    //   25: ifnull +28 -> 53
    //   28: invokestatic 120	org/cocos2dx/lib/Cocos2dxHelper:getObbFile	()Lb/a/a/a/a/b;
    //   31: aload_1
    //   32: invokevirtual 126	b/a/a/a/a/b:b	(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
    //   35: astore 4
    //   37: aload_0
    //   38: getfield 108	org/cocos2dx/lib/Cocos2dxSound:mSoundPool	Landroid/media/SoundPool;
    //   41: astore_1
    //   42: aload_1
    //   43: aload 4
    //   45: iconst_0
    //   46: invokevirtual 129	android/media/SoundPool:load	(Landroid/content/res/AssetFileDescriptor;I)I
    //   49: istore_2
    //   50: goto +74 -> 124
    //   53: aload_0
    //   54: getfield 108	org/cocos2dx/lib/Cocos2dxSound:mSoundPool	Landroid/media/SoundPool;
    //   57: astore 4
    //   59: aload_0
    //   60: getfield 71	org/cocos2dx/lib/Cocos2dxSound:mContext	Landroid/content/Context;
    //   63: invokevirtual 135	android/content/Context:getAssets	()Landroid/content/res/AssetManager;
    //   66: aload_1
    //   67: invokevirtual 140	android/content/res/AssetManager:openFd	(Ljava/lang/String;)Landroid/content/res/AssetFileDescriptor;
    //   70: astore 5
    //   72: aload 4
    //   74: astore_1
    //   75: aload 5
    //   77: astore 4
    //   79: goto -37 -> 42
    //   82: astore_1
    //   83: new 142	java/lang/StringBuilder
    //   86: dup
    //   87: invokespecial 143	java/lang/StringBuilder:<init>	()V
    //   90: astore 4
    //   92: aload 4
    //   94: ldc -111
    //   96: invokevirtual 149	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   99: pop
    //   100: aload 4
    //   102: aload_1
    //   103: invokevirtual 153	java/lang/Exception:getMessage	()Ljava/lang/String;
    //   106: invokevirtual 149	java/lang/StringBuilder:append	(Ljava/lang/String;)Ljava/lang/StringBuilder;
    //   109: pop
    //   110: ldc 30
    //   112: aload 4
    //   114: invokevirtual 156	java/lang/StringBuilder:toString	()Ljava/lang/String;
    //   117: aload_1
    //   118: invokestatic 162	android/util/Log:e	(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I
    //   121: pop
    //   122: iconst_m1
    //   123: istore_2
    //   124: iload_2
    //   125: istore_3
    //   126: iload_2
    //   127: ifne +5 -> 132
    //   130: iconst_m1
    //   131: istore_3
    //   132: iload_3
    //   133: ireturn
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	134	0	this	Cocos2dxSound
    //   0	134	1	paramString	String
    //   18	109	2	i	int
    //   125	8	3	j	int
    //   35	78	4	localObject	Object
    //   70	6	5	localAssetFileDescriptor	android.content.res.AssetFileDescriptor
    // Exception table:
    //   from	to	target	type
    //   0	19	82	java/lang/Exception
    //   22	42	82	java/lang/Exception
    //   42	50	82	java/lang/Exception
    //   53	72	82	java/lang/Exception
  }
  
  private int doPlayEffect(String paramString, int paramInt, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    for (;;)
    {
      try
      {
        float f2 = mLeftVolume;
        float f3 = clamp(paramFloat2, 0.0F, 1.0F);
        float f1 = mRightVolume;
        paramFloat2 = clamp(-paramFloat2, 0.0F, 1.0F);
        paramFloat1 = clamp(paramFloat1 * 1.0F, 0.5F, 2.0F);
        Object localObject1 = mSoundPool;
        f2 = clamp(f2 * paramFloat3 * (1.0F - f3), 0.0F, 1.0F);
        paramFloat2 = clamp(f1 * paramFloat3 * (1.0F - paramFloat2), 0.0F, 1.0F);
        if (paramBoolean)
        {
          i = -1;
          paramInt = ((SoundPool)localObject1).play(paramInt, f2, paramFloat2, 1, i, paramFloat1);
          synchronized (mLockPathStreamIDsMap)
          {
            ArrayList localArrayList = (ArrayList)mPathStreamIDsMap.get(paramString);
            localObject1 = localArrayList;
            if (localArrayList == null)
            {
              localObject1 = new ArrayList();
              mPathStreamIDsMap.put(paramString, localObject1);
            }
            ((ArrayList)localObject1).add(Integer.valueOf(paramInt));
            return paramInt;
          }
        }
        int i = 0;
      }
      finally {}
    }
  }
  
  private void initData()
  {
    SoundPool localSoundPool;
    if (Cocos2dxHelper.getDeviceModel().contains("GT-I9100")) {
      localSoundPool = new SoundPool(3, 3, 5);
    } else {
      localSoundPool = new SoundPool(5, 3, 5);
    }
    mSoundPool = localSoundPool;
    mSoundPool.setOnLoadCompleteListener(new OnLoadCompletedListener());
    mLeftVolume = 0.5F;
    mRightVolume = 0.5F;
  }
  
  private void setEffectsVolumeInternal(float paramFloat1, float paramFloat2)
  {
    synchronized (mLockPathStreamIDsMap)
    {
      if (!mPathStreamIDsMap.isEmpty())
      {
        Iterator localIterator1 = mPathStreamIDsMap.entrySet().iterator();
        while (localIterator1.hasNext())
        {
          Iterator localIterator2 = ((ArrayList)((Map.Entry)localIterator1.next()).getValue()).iterator();
          while (localIterator2.hasNext())
          {
            int i = ((Integer)localIterator2.next()).intValue();
            mSoundPool.setVolume(i, paramFloat1, paramFloat2);
          }
        }
      }
      return;
    }
    for (;;)
    {
      throw localObject2;
    }
  }
  
  public void end()
  {
    mSoundPool.release();
    synchronized (mLockPathStreamIDsMap)
    {
      mPathStreamIDsMap.clear();
      mPathSoundIDMap.clear();
      mPlayWhenLoadedEffects.clear();
      mLeftVolume = 0.5F;
      mRightVolume = 0.5F;
      initData();
      return;
    }
  }
  
  public float getEffectsVolume()
  {
    return (mLeftVolume + mRightVolume) / 2.0F;
  }
  
  public void onEnterBackground()
  {
    mSoundPool.autoPause();
  }
  
  public void onEnterForeground()
  {
    mSoundPool.autoResume();
  }
  
  public void pauseAllEffects()
  {
    synchronized (mLockPathStreamIDsMap)
    {
      if (!mPathStreamIDsMap.isEmpty())
      {
        Iterator localIterator1 = mPathStreamIDsMap.entrySet().iterator();
        while (localIterator1.hasNext())
        {
          Iterator localIterator2 = ((ArrayList)((Map.Entry)localIterator1.next()).getValue()).iterator();
          while (localIterator2.hasNext())
          {
            int i = ((Integer)localIterator2.next()).intValue();
            mSoundPool.pause(i);
          }
        }
      }
      return;
    }
    for (;;)
    {
      throw localObject2;
    }
  }
  
  public void pauseEffect(int paramInt)
  {
    mSoundPool.pause(paramInt);
  }
  
  /* Error */
  public int playEffect(String paramString, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3)
  {
    // Byte code:
    //   0: aload_0
    //   1: getfield 64	org/cocos2dx/lib/Cocos2dxSound:mPathSoundIDMap	Ljava/util/HashMap;
    //   4: aload_1
    //   5: invokevirtual 177	java/util/HashMap:get	(Ljava/lang/Object;)Ljava/lang/Object;
    //   8: checkcast 186	java/lang/Integer
    //   11: astore 7
    //   13: aload 7
    //   15: ifnull +20 -> 35
    //   18: aload_0
    //   19: aload_1
    //   20: aload 7
    //   22: invokevirtual 248	java/lang/Integer:intValue	()I
    //   25: iload_2
    //   26: fload_3
    //   27: fload 4
    //   29: fload 5
    //   31: invokespecial 83	org/cocos2dx/lib/Cocos2dxSound:doPlayEffect	(Ljava/lang/String;IZFFF)I
    //   34: ireturn
    //   35: aload_0
    //   36: aload_1
    //   37: invokevirtual 281	org/cocos2dx/lib/Cocos2dxSound:preloadEffect	(Ljava/lang/String;)I
    //   40: invokestatic 190	java/lang/Integer:valueOf	(I)Ljava/lang/Integer;
    //   43: astore 7
    //   45: aload 7
    //   47: invokevirtual 248	java/lang/Integer:intValue	()I
    //   50: iconst_m1
    //   51: if_icmpne +5 -> 56
    //   54: iconst_m1
    //   55: ireturn
    //   56: new 9	org/cocos2dx/lib/Cocos2dxSound$a
    //   59: dup
    //   60: aload_0
    //   61: aload_1
    //   62: iload_2
    //   63: fload_3
    //   64: fload 4
    //   66: fload 5
    //   68: invokespecial 284	org/cocos2dx/lib/Cocos2dxSound$a:<init>	(Lorg/cocos2dx/lib/Cocos2dxSound;Ljava/lang/String;ZFFF)V
    //   71: astore_1
    //   72: aload_0
    //   73: getfield 69	org/cocos2dx/lib/Cocos2dxSound:mPlayWhenLoadedEffects	Ljava/util/concurrent/ConcurrentHashMap;
    //   76: aload 7
    //   78: aload_1
    //   79: invokevirtual 287	java/util/concurrent/ConcurrentHashMap:putIfAbsent	(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;
    //   82: pop
    //   83: aload_1
    //   84: monitorenter
    //   85: aload_1
    //   86: ldc2_w 288
    //   89: invokevirtual 293	java/lang/Object:wait	(J)V
    //   92: goto +15 -> 107
    //   95: astore 7
    //   97: goto +31 -> 128
    //   100: astore 8
    //   102: aload 8
    //   104: invokevirtual 296	java/lang/Exception:printStackTrace	()V
    //   107: aload_1
    //   108: monitorexit
    //   109: aload_1
    //   110: getfield 299	org/cocos2dx/lib/Cocos2dxSound$a:f	I
    //   113: istore 6
    //   115: aload_0
    //   116: getfield 69	org/cocos2dx/lib/Cocos2dxSound:mPlayWhenLoadedEffects	Ljava/util/concurrent/ConcurrentHashMap;
    //   119: aload 7
    //   121: invokevirtual 302	java/util/concurrent/ConcurrentHashMap:remove	(Ljava/lang/Object;)Ljava/lang/Object;
    //   124: pop
    //   125: iload 6
    //   127: ireturn
    //   128: aload_1
    //   129: monitorexit
    //   130: aload 7
    //   132: athrow
    // Local variable table:
    //   start	length	slot	name	signature
    //   0	133	0	this	Cocos2dxSound
    //   0	133	1	paramString	String
    //   0	133	2	paramBoolean	boolean
    //   0	133	3	paramFloat1	float
    //   0	133	4	paramFloat2	float
    //   0	133	5	paramFloat3	float
    //   113	13	6	i	int
    //   11	66	7	localInteger	Integer
    //   95	36	7	localObject	Object
    //   100	3	8	localException	Exception
    // Exception table:
    //   from	to	target	type
    //   85	92	95	finally
    //   102	107	95	finally
    //   107	109	95	finally
    //   128	130	95	finally
    //   85	92	100	java/lang/Exception
  }
  
  public int preloadEffect(String paramString)
  {
    Integer localInteger2 = (Integer)mPathSoundIDMap.get(paramString);
    Integer localInteger1 = localInteger2;
    if (localInteger2 == null)
    {
      localInteger2 = Integer.valueOf(createSoundIDFromAsset(paramString));
      localInteger1 = localInteger2;
      if (localInteger2.intValue() != -1)
      {
        mPathSoundIDMap.put(paramString, localInteger2);
        localInteger1 = localInteger2;
      }
    }
    return localInteger1.intValue();
  }
  
  public void resumeAllEffects()
  {
    synchronized (mLockPathStreamIDsMap)
    {
      if (!mPathStreamIDsMap.isEmpty())
      {
        Iterator localIterator1 = mPathStreamIDsMap.entrySet().iterator();
        while (localIterator1.hasNext())
        {
          Iterator localIterator2 = ((ArrayList)((Map.Entry)localIterator1.next()).getValue()).iterator();
          while (localIterator2.hasNext())
          {
            int i = ((Integer)localIterator2.next()).intValue();
            mSoundPool.resume(i);
          }
        }
      }
      return;
    }
    for (;;)
    {
      throw localObject2;
    }
  }
  
  public void resumeEffect(int paramInt)
  {
    mSoundPool.resume(paramInt);
  }
  
  void setAudioFocus(boolean paramBoolean)
  {
    mIsAudioFocus = paramBoolean;
    paramBoolean = mIsAudioFocus;
    float f2 = 0.0F;
    float f1;
    if (paramBoolean) {
      f1 = mLeftVolume;
    } else {
      f1 = 0.0F;
    }
    if (mIsAudioFocus) {
      f2 = mRightVolume;
    }
    setEffectsVolumeInternal(f1, f2);
  }
  
  public void setEffectsVolume(float paramFloat)
  {
    float f = paramFloat;
    if (paramFloat < 0.0F) {
      f = 0.0F;
    }
    paramFloat = f;
    if (f > 1.0F) {
      paramFloat = 1.0F;
    }
    mRightVolume = paramFloat;
    mLeftVolume = paramFloat;
    if (!mIsAudioFocus) {
      return;
    }
    setEffectsVolumeInternal(mLeftVolume, mRightVolume);
  }
  
  public void stopAllEffects()
  {
    synchronized (mLockPathStreamIDsMap)
    {
      if (!mPathStreamIDsMap.isEmpty())
      {
        Iterator localIterator1 = mPathStreamIDsMap.entrySet().iterator();
        while (localIterator1.hasNext())
        {
          Iterator localIterator2 = ((ArrayList)((Map.Entry)localIterator1.next()).getValue()).iterator();
          while (localIterator2.hasNext())
          {
            int i = ((Integer)localIterator2.next()).intValue();
            mSoundPool.stop(i);
          }
        }
      }
      mPathStreamIDsMap.clear();
      return;
    }
    for (;;)
    {
      throw localObject2;
    }
  }
  
  public void stopEffect(int paramInt)
  {
    mSoundPool.stop(paramInt);
    synchronized (mLockPathStreamIDsMap)
    {
      Iterator localIterator = mPathStreamIDsMap.keySet().iterator();
      while (localIterator.hasNext())
      {
        String str = (String)localIterator.next();
        if (((ArrayList)mPathStreamIDsMap.get(str)).contains(Integer.valueOf(paramInt))) {
          ((ArrayList)mPathStreamIDsMap.get(str)).remove(((ArrayList)mPathStreamIDsMap.get(str)).indexOf(Integer.valueOf(paramInt)));
        }
      }
      return;
    }
    for (;;)
    {
      throw localObject2;
    }
  }
  
  public void unloadEffect(String paramString)
  {
    synchronized (mLockPathStreamIDsMap)
    {
      Object localObject2 = (ArrayList)mPathStreamIDsMap.get(paramString);
      if (localObject2 != null)
      {
        localObject2 = ((ArrayList)localObject2).iterator();
        while (((Iterator)localObject2).hasNext())
        {
          Integer localInteger = (Integer)((Iterator)localObject2).next();
          mSoundPool.stop(localInteger.intValue());
        }
      }
      mPathStreamIDsMap.remove(paramString);
      ??? = (Integer)mPathSoundIDMap.get(paramString);
      if (??? != null)
      {
        mSoundPool.unload(((Integer)???).intValue());
        mPathSoundIDMap.remove(paramString);
      }
      return;
    }
    for (;;)
    {
      throw paramString;
    }
  }
  
  public class OnLoadCompletedListener
    implements SoundPool.OnLoadCompleteListener
  {
    public OnLoadCompletedListener() {}
    
    public void onLoadComplete(SoundPool paramSoundPool, int paramInt1, int paramInt2)
    {
      if (paramInt2 == 0)
      {
        paramSoundPool = (Cocos2dxSound.a)mPlayWhenLoadedEffects.get(Integer.valueOf(paramInt1));
        if (paramSoundPool != null)
        {
          f = Cocos2dxSound.this.doPlayEffect(e, paramInt1, a, b, c, d);
          try
          {
            paramSoundPool.notifyAll();
            return;
          }
          finally {}
        }
      }
    }
  }
  
  private class a
  {
    boolean a;
    float b;
    float c;
    float d;
    String e;
    int f;
    
    a(String paramString, boolean paramBoolean, float paramFloat1, float paramFloat2, float paramFloat3)
    {
      e = paramString;
      a = paramBoolean;
      b = paramFloat1;
      c = paramFloat2;
      d = paramFloat3;
      f = -1;
    }
  }
}
