package org.cocos2dx.lib;

import android.app.Activity;
import android.content.Context;
import android.opengl.GLSurfaceView;
import android.os.Handler;
import android.os.Message;
import android.util.AttributeSet;
import android.util.Log;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;

public class Cocos2dxGLSurfaceView
  extends GLSurfaceView
{
  private static final int HANDLER_CLOSE_IME_KEYBOARD = 3;
  private static final int HANDLER_OPEN_IME_KEYBOARD = 2;
  private static final String TAG = "Cocos2dxGLSurfaceView";
  private static Cocos2dxGLSurfaceView mCocos2dxGLSurfaceView;
  private static Cocos2dxTextInputWrapper sCocos2dxTextInputWraper;
  private static Handler sHandler;
  private Cocos2dxEditBox mCocos2dxEditText;
  private Cocos2dxRenderer mCocos2dxRenderer;
  private boolean mMultipleTouchEnabled = true;
  private boolean mSoftKeyboardShown = false;
  
  public Cocos2dxGLSurfaceView(Context paramContext)
  {
    super(paramContext);
    initView();
  }
  
  public Cocos2dxGLSurfaceView(Context paramContext, AttributeSet paramAttributeSet)
  {
    super(paramContext, paramAttributeSet);
    initView();
  }
  
  public static void closeIMEKeyboard()
  {
    Message localMessage = new Message();
    what = 3;
    sHandler.sendMessage(localMessage);
  }
  
  private static void dumpMotionEvent(MotionEvent paramMotionEvent)
  {
    StringBuilder localStringBuilder = new StringBuilder();
    int i = paramMotionEvent.getAction();
    int j = i & 0xFF;
    localStringBuilder.append("event ACTION_");
    localStringBuilder.append(new String[] { "DOWN", "UP", "MOVE", "CANCEL", "OUTSIDE", "POINTER_DOWN", "POINTER_UP", "7?", "8?", "9?" }[j]);
    if ((j == 5) || (j == 6))
    {
      localStringBuilder.append("(pid ");
      localStringBuilder.append(i >> 8);
      localStringBuilder.append(")");
    }
    localStringBuilder.append("[");
    i = 0;
    while (i < paramMotionEvent.getPointerCount())
    {
      localStringBuilder.append("#");
      localStringBuilder.append(i);
      localStringBuilder.append("(pid ");
      localStringBuilder.append(paramMotionEvent.getPointerId(i));
      localStringBuilder.append(")=");
      localStringBuilder.append((int)paramMotionEvent.getX(i));
      localStringBuilder.append(",");
      localStringBuilder.append((int)paramMotionEvent.getY(i));
      j = i + 1;
      i = j;
      if (j < paramMotionEvent.getPointerCount())
      {
        localStringBuilder.append(";");
        i = j;
      }
    }
    localStringBuilder.append("]");
    Log.d(TAG, localStringBuilder.toString());
  }
  
  private String getContentText()
  {
    return mCocos2dxRenderer.getContentText();
  }
  
  public static Cocos2dxGLSurfaceView getInstance()
  {
    return mCocos2dxGLSurfaceView;
  }
  
  public static void openIMEKeyboard()
  {
    Message localMessage = new Message();
    what = 2;
    obj = mCocos2dxGLSurfaceView.getContentText();
    sHandler.sendMessage(localMessage);
  }
  
  public static void queueAccelerometer(float paramFloat1, float paramFloat2, float paramFloat3, long paramLong)
  {
    mCocos2dxGLSurfaceView.queueEvent(new Y(paramFloat1, paramFloat2, paramFloat3, paramLong));
  }
  
  public void deleteBackward()
  {
    queueEvent(new W(this));
  }
  
  public Cocos2dxEditBox getCocos2dxEditText()
  {
    return mCocos2dxEditText;
  }
  
  protected void initView()
  {
    setEGLContextClientVersion(2);
    setFocusableInTouchMode(true);
    mCocos2dxGLSurfaceView = this;
    sCocos2dxTextInputWraper = new Cocos2dxTextInputWrapper(this);
    sHandler = new X(this);
  }
  
  public void insertText(String paramString)
  {
    queueEvent(new V(this, paramString));
  }
  
  public boolean isMultipleTouchEnabled()
  {
    return mMultipleTouchEnabled;
  }
  
  public boolean isSoftKeyboardShown()
  {
    return mSoftKeyboardShown;
  }
  
  public boolean onKeyDown(int paramInt, KeyEvent paramKeyEvent)
  {
    if (paramInt != 4)
    {
      if ((paramInt == 66) || (paramInt == 82) || (paramInt == 85)) {}
    }
    else {
      switch (paramInt)
      {
      default: 
        return super.onKeyDown(paramInt, paramKeyEvent);
        Cocos2dxVideoHelper.mVideoHandler.sendEmptyMessage(1000);
      }
    }
    queueEvent(new T(this, paramInt));
    return true;
  }
  
  public boolean onKeyUp(int paramInt, KeyEvent paramKeyEvent)
  {
    if ((paramInt != 4) && (paramInt != 66) && (paramInt != 82) && (paramInt != 85)) {
      switch (paramInt)
      {
      default: 
        return super.onKeyUp(paramInt, paramKeyEvent);
      }
    }
    queueEvent(new U(this, paramInt));
    return true;
  }
  
  public void onPause()
  {
    queueEvent(new aa(this));
    setRenderMode(0);
  }
  
  public void onResume()
  {
    super.onResume();
    setRenderMode(1);
    queueEvent(new Z(this));
  }
  
  protected void onSizeChanged(int paramInt1, int paramInt2, int paramInt3, int paramInt4)
  {
    if (!isInEditMode()) {
      mCocos2dxRenderer.setScreenWidthAndHeight(paramInt1, paramInt2);
    }
  }
  
  public boolean onTouchEvent(MotionEvent paramMotionEvent)
  {
    int j = paramMotionEvent.getPointerCount();
    int[] arrayOfInt = new int[j];
    float[] arrayOfFloat1 = new float[j];
    float[] arrayOfFloat2 = new float[j];
    if (mSoftKeyboardShown)
    {
      ((InputMethodManager)getContext().getSystemService("input_method")).hideSoftInputFromWindow(((Activity)getContext()).getCurrentFocus().getWindowToken(), 0);
      requestFocus();
      mSoftKeyboardShown = false;
    }
    int i = 0;
    while (i < j)
    {
      arrayOfInt[i] = paramMotionEvent.getPointerId(i);
      arrayOfFloat1[i] = paramMotionEvent.getX(i);
      arrayOfFloat2[i] = paramMotionEvent.getY(i);
      i += 1;
    }
    i = paramMotionEvent.getAction() & 0xFF;
    if (i != 0)
    {
      if (i != 1)
      {
        float f1;
        float f2;
        if (i != 2)
        {
          if (i != 3)
          {
            if (i != 5)
            {
              if (i != 6) {
                return true;
              }
              i = paramMotionEvent.getAction() >> 8;
              if ((!mMultipleTouchEnabled) && (i != 0)) {
                return true;
              }
              paramMotionEvent = new fa(this, paramMotionEvent.getPointerId(i), paramMotionEvent.getX(i), paramMotionEvent.getY(i));
            }
            else
            {
              i = paramMotionEvent.getAction() >> 8;
              if ((!mMultipleTouchEnabled) && (i != 0)) {
                return true;
              }
              paramMotionEvent = new ba(this, paramMotionEvent.getPointerId(i), paramMotionEvent.getX(i), paramMotionEvent.getY(i));
            }
            queueEvent(paramMotionEvent);
            return true;
          }
          if (!mMultipleTouchEnabled)
          {
            i = 0;
            for (;;)
            {
              if (i >= j) {
                break label532;
              }
              if (arrayOfInt[i] == 0)
              {
                f1 = arrayOfFloat1[i];
                f2 = arrayOfFloat2[i];
                paramMotionEvent = new Q(this, new int[] { 0 }, new float[] { f1 }, new float[] { f2 });
                break;
              }
              i += 1;
            }
          }
          paramMotionEvent = new S(this, arrayOfInt, arrayOfFloat1, arrayOfFloat2);
        }
        else
        {
          if (!mMultipleTouchEnabled)
          {
            i = 0;
            for (;;)
            {
              if (i >= j) {
                break label532;
              }
              if (arrayOfInt[i] == 0)
              {
                f1 = arrayOfFloat1[i];
                f2 = arrayOfFloat2[i];
                paramMotionEvent = new da(this, new int[] { 0 }, new float[] { f1 }, new float[] { f2 });
                break;
              }
              i += 1;
            }
          }
          paramMotionEvent = new ea(this, arrayOfInt, arrayOfFloat1, arrayOfFloat2);
        }
        queueEvent(paramMotionEvent);
        return true;
      }
      paramMotionEvent = new P(this, paramMotionEvent.getPointerId(0), arrayOfFloat1[0], arrayOfFloat2[0]);
    }
    else
    {
      paramMotionEvent = new ca(this, paramMotionEvent.getPointerId(0), arrayOfFloat1[0], arrayOfFloat2[0]);
    }
    queueEvent(paramMotionEvent);
    label532:
    return true;
  }
  
  public void setCocos2dxEditText(Cocos2dxEditBox paramCocos2dxEditBox)
  {
    mCocos2dxEditText = paramCocos2dxEditBox;
    paramCocos2dxEditBox = mCocos2dxEditText;
    if (paramCocos2dxEditBox != null)
    {
      Cocos2dxTextInputWrapper localCocos2dxTextInputWrapper = sCocos2dxTextInputWraper;
      if (localCocos2dxTextInputWrapper != null)
      {
        paramCocos2dxEditBox.setOnEditorActionListener(localCocos2dxTextInputWrapper);
        requestFocus();
      }
    }
  }
  
  public void setCocos2dxRenderer(Cocos2dxRenderer paramCocos2dxRenderer)
  {
    mCocos2dxRenderer = paramCocos2dxRenderer;
    setRenderer(mCocos2dxRenderer);
  }
  
  public void setMultipleTouchEnabled(boolean paramBoolean)
  {
    mMultipleTouchEnabled = paramBoolean;
  }
  
  public void setSoftKeyboardShown(boolean paramBoolean)
  {
    mSoftKeyboardShown = paramBoolean;
  }
}
